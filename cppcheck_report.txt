api/test.c:58:9: style: The scope of the variable 'len' can be reduced. [variableScope]
    int len;
        ^
api/test.c:131:9: style: The scope of the variable 'len' can be reduced. [variableScope]
    int len;
        ^
deps/flb_libco/libco.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/flb_libco/ucontext.c:44:32: style: Condition '!(thread->uc_stack.ss_sp=0)' is always true [knownConditionTrueFalse]
    if((!getcontext(thread) && !(thread->uc_stack.ss_sp = 0)) && (thread->uc_stack.ss_sp = malloc(heapsize))) {
                               ^
deps/mbedtls-2.4.2/library/aes.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/aes.c:391:18: style: The scope of the variable 'z' can be reduced. [variableScope]
    int i, x, y, z;
                 ^
deps/mbedtls-2.4.2/library/aesni.c:63:26: style: Condition '(c&what)!=0' is always false [knownConditionTrueFalse]
    return( ( c & what ) != 0 );
                         ^
deps/mbedtls-2.4.2/library/aesni.c:30:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/arc4.c:74:15: style: The scope of the variable 'a' can be reduced. [variableScope]
    int i, j, a;
              ^
deps/mbedtls-2.4.2/library/arc4.c:104:15: style: The scope of the variable 'a' can be reduced. [variableScope]
    int x, y, a, b;
              ^
deps/mbedtls-2.4.2/library/arc4.c:104:18: style: The scope of the variable 'b' can be reduced. [variableScope]
    int x, y, a, b;
                 ^
deps/mbedtls-2.4.2/library/arc4.c:30:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/asn1parse.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/asn1write.c:167:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/asn1write.c:181:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/asn1write.c:196:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/asn1write.c:215:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/asn1write.c:232:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/asn1write.c:263:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/asn1write.c:278:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/asn1write.c:293:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/asn1write.c:320:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/asn1write.c:160:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/asn1write.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/base64.c:81:17: style: The scope of the variable 'C3' can be reduced. [variableScope]
    int C1, C2, C3;
                ^
deps/mbedtls-2.4.2/library/base64.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/bignum.c:427:15: style: The scope of the variable 'j' can be reduced. [variableScope]
    size_t i, j, slen, n;
              ^
deps/mbedtls-2.4.2/library/bignum.c:427:24: style: The scope of the variable 'n' can be reduced. [variableScope]
    size_t i, j, slen, n;
                       ^
deps/mbedtls-2.4.2/library/bignum.c:206:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:246:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:283:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:300:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:339:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:486:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:515:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:589:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:687:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:757:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:935:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:997:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:1030:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:1061:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:1200:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:1426:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:1468:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:1799:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:1857:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:1884:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:1162:6: style: Variable 't' is assigned a value that is never used. [unreadVariable]
    t++;
     ^
deps/mbedtls-2.4.2/library/bignum.c:1218:10: style: Variable 'p[0]' is assigned a value that is never used. [unreadVariable]
    p[0] = b;
         ^
deps/mbedtls-2.4.2/library/bignum.c:663:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:2050:14: style: The scope of the variable 'count' can be reduced. [variableScope]
    int ret, count;
             ^
deps/mbedtls-2.4.2/library/bignum.c:2039:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:2140:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/bignum.c:2408:17: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/bignum.c:2405:17: note: First condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/bignum.c:2408:17: note: Second condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/bignum.c:1117:0: information: Skipping configuration 'MBEDTLS_BIGNUM_C;MULADDC_HUIT' since the value of 'MULADDC_HUIT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        MULADDC_HUIT
^
deps/mbedtls-2.4.2/library/bignum.c:41:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/blowfish.c:178:14: style: The scope of the variable 'data' can be reduced. [variableScope]
    uint32_t data, datal, datar;
             ^
deps/mbedtls-2.4.2/library/blowfish.c:31:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/camellia.c:566:19: style: The scope of the variable 'temp' can be reduced. [variableScope]
    unsigned char temp[16];
                  ^
deps/mbedtls-2.4.2/library/camellia.c:1004:17: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/camellia.c:950:17: note: First condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/camellia.c:1004:17: note: Second condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/camellia.c:668:9: style: The scope of the variable 'c' can be reduced. [variableScope]
    int c, i;
        ^
deps/mbedtls-2.4.2/library/camellia.c:31:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/ccm.c:405:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
deps/mbedtls-2.4.2/library/ccm.c:34:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/certs.c:295:35: error: Syntax Error: AST broken, binary operator '=' doesn't have two operands. [internalAstError]
const char mbedtls_test_cas_pem[] = TEST_CA_CRT_RSA TEST_CA_CRT_EC;
                                  ^
deps/mbedtls-2.4.2/library/certs.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/cipher.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/cipher.c:72:40: style: The scope of the variable 'def' can be reduced. [variableScope]
    const mbedtls_cipher_definition_t *def;
                                       ^
deps/mbedtls-2.4.2/library/cipher.c:73:10: style: The scope of the variable 'type' can be reduced. [variableScope]
    int *type;
         ^
deps/mbedtls-2.4.2/library/cipher.c:772:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
deps/mbedtls-2.4.2/library/cipher.c:323:25: style: Variable 'copy_len' is assigned a value that is never used. [unreadVariable]
        size_t copy_len = 0;
                        ^
deps/mbedtls-2.4.2/library/cipher.c:526:38: style:inconclusive: Boolean expression 'done==prev_done' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]
        bad &= ( input[i-1] ^ 0x80 ) | ( done == prev_done );
                                     ^
deps/mbedtls-2.4.2/library/cipher.c:514:29: style: The scope of the variable 'prev_done' can be reduced. [variableScope]
    unsigned char done = 0, prev_done, bad;
                            ^
deps/mbedtls-2.4.2/library/cipher_wrap.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 56 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/cmac.c:784:13: warning: %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
            mbedtls_printf( "  %s CMAC subkey #%u: ", testname, i + 1 );
            ^
deps/mbedtls-2.4.2/library/cmac.c:864:13: warning: %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
            mbedtls_printf( "  %s CMAC #%u: ", testname, i + 1 );
            ^
deps/mbedtls-2.4.2/library/cmac.c:898:9: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
        mbedtls_printf( "  AES CMAC 128 PRF #%u: ", i );
        ^
deps/mbedtls-2.4.2/library/cmac.c:920:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/cmac.c:46:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/ctr_drbg.c:30:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/ctr_drbg.c:153:21: style: The scope of the variable 'use_len' can be reduced. [variableScope]
    size_t buf_len, use_len;
                    ^
deps/mbedtls-2.4.2/library/ctr_drbg.c:273:19: style: The scope of the variable 'add_input' can be reduced. [variableScope]
    unsigned char add_input[MBEDTLS_CTR_DRBG_SEEDLEN];
                  ^
deps/mbedtls-2.4.2/library/ctr_drbg.c:337:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret = 0;
        ^
deps/mbedtls-2.4.2/library/ctr_drbg.c:343:12: style: The scope of the variable 'use_len' can be reduced. [variableScope]
    size_t use_len;
           ^
deps/mbedtls-2.4.2/library/ctr_drbg.c:337:13: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    int ret = 0;
            ^
deps/mbedtls-2.4.2/library/ctr_drbg.c:569:17: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/ctr_drbg.c:563:17: note: First condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/ctr_drbg.c:569:17: note: Second condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/ctr_drbg.c:587:17: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/ctr_drbg.c:584:17: note: First condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/ctr_drbg.c:587:17: note: Second condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/debug.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/debug.c:63:0: information: Skipping configuration 'MBEDTLS_DEBUG_C;_MSC_VER;__ARMCC_VERSION;inline' since the value of 'inline' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static inline void debug_send_line( const mbedtls_ssl_context *ssl, int level,
^
deps/mbedtls-2.4.2/library/debug.c:95:0: information: Skipping configuration 'MBEDTLS_DEBUG_C;_TRUNCATE;_WIN32' since the value of '_TRUNCATE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    ret = _vsnprintf_s( str, DEBUG_BUF_SIZE, _TRUNCATE, format, argp );
^
deps/mbedtls-2.4.2/library/des.c:533:26: error: Array 'esk[96]' accessed at index -1, which is out of bounds. [negativeIndex]
        dsk[i     ] = esk[30 - i];
                         ^
deps/mbedtls-2.4.2/library/des.c:540:12: error: Array 'esk[96]' accessed at index 96, which is out of bounds. [arrayIndexOutOfBounds]
        esk[i + 65] = esk[i + 1];
           ^
deps/mbedtls-2.4.2/library/des.c:543:12: error: Array 'dsk[96]' accessed at index 96, which is out of bounds. [arrayIndexOutOfBounds]
        dsk[i + 65] = dsk[i + 1];
           ^
deps/mbedtls-2.4.2/library/des.c:593:26: error: Array 'esk[96]' accessed at index -1, which is out of bounds. [negativeIndex]
        dsk[i + 64] = esk[30 - i];
                         ^
deps/mbedtls-2.4.2/library/des.c:594:12: error: Array 'dsk[96]' accessed at index 96, which is out of bounds. [arrayIndexOutOfBounds]
        dsk[i + 65] = esk[31 - i];
           ^
deps/mbedtls-2.4.2/library/des.c:671:19: style: The scope of the variable 'temp' can be reduced. [variableScope]
    unsigned char temp[8];
                  ^
deps/mbedtls-2.4.2/library/des.c:770:19: style: The scope of the variable 'temp' can be reduced. [variableScope]
    unsigned char temp[8];
                  ^
deps/mbedtls-2.4.2/library/des.c:31:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/des.c:1049:17: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/des.c:952:17: note: First condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/des.c:1049:17: note: Second condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/dhm.c:116:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/dhm.c:208:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/dhm.c:272:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/dhm.c:341:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/dhm.c:389:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/dhm.c:535:16: style: Condition '*n+1==0' is always false [knownConditionTrueFalse]
    if( *n + 1 == 0 ||
               ^
deps/mbedtls-2.4.2/library/dhm.c:526:31: note: Assuming that condition '(size=ftell(f))==-1' is not redundant
    if( ( size = ftell( f ) ) == -1 )
                              ^
deps/mbedtls-2.4.2/library/dhm.c:533:10: note: Assignment '*n=(unsigned long)size', assigned value is -1
    *n = (size_t) size;
         ^
deps/mbedtls-2.4.2/library/dhm.c:535:16: note: Condition '*n+1==0' is always false
    if( *n + 1 == 0 ||
               ^
deps/mbedtls-2.4.2/library/dhm.c:33:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/ecdh.c:32:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/ecdsa.c:31:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/ecdsa.c:64:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecdsa.c:187:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecdsa.c:335:1: style: Label 'cleanup' is not used. There is #if in function body so the label might be used in code that is removed by the preprocessor. [unusedLabelConfiguration]
cleanup:
^
deps/mbedtls-2.4.2/library/ecdsa.c:287:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/ecjpake.c:30:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/ecjpake.c:116:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecjpake.c:221:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecjpake.c:427:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecjpake.c:460:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecjpake.c:494:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecjpake.c:542:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecjpake.c:631:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecjpake.c:756:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecjpake.c:117:9: error: Uninitialized variable: ret [uninitvar]
    if( ret != 0 )
        ^
deps/mbedtls-2.4.2/library/ecjpake.c:109:62: note: Assuming condition is false
    if( ( ctx->md_info = mbedtls_md_info_from_type( hash ) ) == NULL )
                                                             ^
deps/mbedtls-2.4.2/library/ecjpake.c:117:9: note: Uninitialized variable: ret
    if( ret != 0 )
        ^
deps/mbedtls-2.4.2/library/ecjpake.c:995:17: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/ecjpake.c:992:17: note: First condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/ecjpake.c:995:17: note: Second condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/ecjpake.c:1030:17: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/ecjpake.c:1027:17: note: First condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/ecjpake.c:1030:17: note: Second condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/ecjpake.c:931:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/ecp.c:46:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/ecp.c:323:12: style: The scope of the variable 'i' can be reduced. [variableScope]
    size_t i;
           ^
deps/mbedtls-2.4.2/library/ecp.c:371:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp.c:394:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp.c:434:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp.c:490:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp.c:526:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp.c:687:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp.c:1712:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp.c:1738:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp.c:1887:1: style: Label 'cleanup' is not used. There is #if in function body so the label might be used in code that is removed by the preprocessor. [unusedLabelConfiguration]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp.c:1822:19: style: Variable 'n_size' is assigned a value that is never used. [unreadVariable]
    size_t n_size = ( grp->nbits + 7 ) / 8;
                  ^
deps/mbedtls-2.4.2/library/ecp.c:1557:19: style: The scope of the variable 'b' can be reduced. [variableScope]
    unsigned char b;
                  ^
deps/mbedtls-2.4.2/library/ecp.c:1448:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp.c:1486:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp.c:1538:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp.c:1600:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp.c:1888:9: error: Uninitialized variable: ret [uninitvar]
    if( ret != 0 )
        ^
deps/mbedtls-2.4.2/library/ecp.c:2037:17: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/ecp.c:2034:17: note: First condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/ecp.c:2037:17: note: Second condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/ecp.c:257:0: information: Skipping configuration 'MBEDTLS_ECP_C;_MSC_VER;__ARMCC_VERSION;inline' since the value of 'inline' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
^
deps/mbedtls-2.4.2/library/ecp_curves.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/ecp_curves.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/ecp_curves.c:680:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp_curves.c:1193:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp_curves.c:681:9: error: Uninitialized variable: ret [uninitvar]
    if( ret != 0 )
        ^
deps/mbedtls-2.4.2/library/ecp_curves.c:1272:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/ecp_curves.c:847:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/entropy.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/entropy.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/entropy.c:226:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret, i, have_one_strong = 0;
        ^
deps/mbedtls-2.4.2/library/entropy.c:641:17: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/entropy.c:588:17: note: First condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/entropy.c:641:17: note: Second condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/entropy.c:643:17: style: Condition 'ret!=0' is always true [knownConditionTrueFalse]
        if( ret != 0 )
                ^
deps/mbedtls-2.4.2/library/entropy.c:580:15: note: Assignment 'ret=1', assigned value is 1
    int ret = 1;
              ^
deps/mbedtls-2.4.2/library/entropy.c:643:17: note: Condition 'ret!=0' is always true
        if( ret != 0 )
                ^
deps/mbedtls-2.4.2/library/entropy.c:651:17: style: Condition 'ret!=0' is always true [knownConditionTrueFalse]
    return( ret != 0 );
                ^
deps/mbedtls-2.4.2/library/entropy.c:580:15: note: Assignment 'ret=1', assigned value is 1
    int ret = 1;
              ^
deps/mbedtls-2.4.2/library/entropy.c:651:17: note: Condition 'ret!=0' is always true
    return( ret != 0 );
                ^
deps/mbedtls-2.4.2/library/entropy_poll.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/entropy_poll.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/error.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 34 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/error.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/gcm.c:274:19: style: The scope of the variable 'work_buf' can be reduced. [variableScope]
    unsigned char work_buf[16];
                  ^
deps/mbedtls-2.4.2/library/gcm.c:352:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
deps/mbedtls-2.4.2/library/gcm.c:357:12: style: The scope of the variable 'use_len' can be reduced. [variableScope]
    size_t use_len, olen = 0;
           ^
deps/mbedtls-2.4.2/library/gcm.c:410:19: style: The scope of the variable 'work_buf' can be reduced. [variableScope]
    unsigned char work_buf[16];
                  ^
deps/mbedtls-2.4.2/library/gcm.c:411:12: style: The scope of the variable 'i' can be reduced. [variableScope]
    size_t i;
           ^
deps/mbedtls-2.4.2/library/gcm.c:780:25: style: The if condition is the same as the previous if condition [duplicateCondition]
            if( verbose != 0 )
                        ^
deps/mbedtls-2.4.2/library/gcm.c:777:25: note: First condition
            if( verbose != 0 )
                        ^
deps/mbedtls-2.4.2/library/gcm.c:780:25: note: Second condition
            if( verbose != 0 )
                        ^
deps/mbedtls-2.4.2/library/gcm.c:807:25: style: The if condition is the same as the previous if condition [duplicateCondition]
            if( verbose != 0 )
                        ^
deps/mbedtls-2.4.2/library/gcm.c:804:25: note: First condition
            if( verbose != 0 )
                        ^
deps/mbedtls-2.4.2/library/gcm.c:807:25: note: Second condition
            if( verbose != 0 )
                        ^
deps/mbedtls-2.4.2/library/gcm.c:874:25: style: The if condition is the same as the previous if condition [duplicateCondition]
            if( verbose != 0 )
                        ^
deps/mbedtls-2.4.2/library/gcm.c:871:25: note: First condition
            if( verbose != 0 )
                        ^
deps/mbedtls-2.4.2/library/gcm.c:874:25: note: Second condition
            if( verbose != 0 )
                        ^
deps/mbedtls-2.4.2/library/gcm.c:35:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/havege.c:32:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/havege.c:184:9: style: Variable 'PTEST' is reassigned a value before the old one has been used. [redundantAssignment]
        ONE_ITERATION
        ^
deps/mbedtls-2.4.2/library/havege.c:183:9: note: PTEST is assigned
        ONE_ITERATION
        ^
deps/mbedtls-2.4.2/library/havege.c:184:9: note: PTEST is overwritten
        ONE_ITERATION
        ^
deps/mbedtls-2.4.2/library/havege.c:185:9: style: Variable 'PTEST' is reassigned a value before the old one has been used. [redundantAssignment]
        ONE_ITERATION
        ^
deps/mbedtls-2.4.2/library/havege.c:184:9: note: PTEST is assigned
        ONE_ITERATION
        ^
deps/mbedtls-2.4.2/library/havege.c:185:9: note: PTEST is overwritten
        ONE_ITERATION
        ^
deps/mbedtls-2.4.2/library/havege.c:186:9: style: Variable 'PTEST' is reassigned a value before the old one has been used. [redundantAssignment]
        ONE_ITERATION
        ^
deps/mbedtls-2.4.2/library/havege.c:185:9: note: PTEST is assigned
        ONE_ITERATION
        ^
deps/mbedtls-2.4.2/library/havege.c:186:9: note: PTEST is overwritten
        ONE_ITERATION
        ^
deps/mbedtls-2.4.2/library/havege.c:165:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i, n = 0;
        ^
deps/mbedtls-2.4.2/library/havege.c:166:24: style: The scope of the variable 'B' can be reduced. [variableScope]
    int  U1,  U2, *A, *B, *C, *D;
                       ^
deps/mbedtls-2.4.2/library/havege.c:166:32: style: The scope of the variable 'D' can be reduced. [variableScope]
    int  U1,  U2, *A, *B, *C, *D;
                               ^
deps/mbedtls-2.4.2/library/havege.c:168:19: style: The scope of the variable 'CLK' can be reduced. [variableScope]
    int PTX, PTY, CLK, PTEST, IN;
                  ^
deps/mbedtls-2.4.2/library/havege.c:168:24: style: The scope of the variable 'PTEST' can be reduced. [variableScope]
    int PTX, PTY, CLK, PTEST, IN;
                       ^
deps/mbedtls-2.4.2/library/havege.c:168:31: style: The scope of the variable 'IN' can be reduced. [variableScope]
    int PTX, PTY, CLK, PTEST, IN;
                              ^
deps/mbedtls-2.4.2/library/havege.c:220:12: style: The scope of the variable 'use_len' can be reduced. [variableScope]
    size_t use_len;
           ^
deps/mbedtls-2.4.2/library/havege.c:183:9: portability: Shifting signed 32-bit value by 31 bits is implementation-defined behaviour [shiftTooManyBitsSigned]
        ONE_ITERATION
        ^
deps/mbedtls-2.4.2/library/havege.c:184:9: portability: Shifting signed 32-bit value by 31 bits is implementation-defined behaviour [shiftTooManyBitsSigned]
        ONE_ITERATION
        ^
deps/mbedtls-2.4.2/library/havege.c:185:9: portability: Shifting signed 32-bit value by 31 bits is implementation-defined behaviour [shiftTooManyBitsSigned]
        ONE_ITERATION
        ^
deps/mbedtls-2.4.2/library/havege.c:186:9: portability: Shifting signed 32-bit value by 31 bits is implementation-defined behaviour [shiftTooManyBitsSigned]
        ONE_ITERATION
        ^
deps/mbedtls-2.4.2/library/havege.c:186:9: style: Variable 'PTEST' is assigned a value that is never used. [unreadVariable]
        ONE_ITERATION
        ^
deps/mbedtls-2.4.2/library/hmac_drbg.c:31:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/hmac_drbg.c:253:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
deps/mbedtls-2.4.2/library/hmac_drbg.c:501:17: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/hmac_drbg.c:495:17: note: First condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/hmac_drbg.c:501:17: note: Second condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/hmac_drbg.c:521:17: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/hmac_drbg.c:518:17: note: First condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/hmac_drbg.c:521:17: note: Second condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/md.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/md.c:29:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/md2.c:31:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/md4.c:31:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/md5.c:30:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/md_wrap.c:29:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/memory_buffer_alloc.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/memory_buffer_alloc.c:681:17: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/memory_buffer_alloc.c:678:17: note: First condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/memory_buffer_alloc.c:681:17: note: Second condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/memory_buffer_alloc.c:707:17: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/memory_buffer_alloc.c:704:17: note: First condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/memory_buffer_alloc.c:707:17: note: Second condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/net_sockets.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/net_sockets.c:142:33: style: Condition '(ret=net_prepare())!=0' is always false [knownConditionTrueFalse]
    if( ( ret = net_prepare() ) != 0 )
                                ^
deps/mbedtls-2.4.2/library/net_sockets.c:189:33: style: Condition '(ret=net_prepare())!=0' is always false [knownConditionTrueFalse]
    if( ( ret = net_prepare() ) != 0 )
                                ^
deps/mbedtls-2.4.2/library/net_sockets.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/oid.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 37 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/oid.c:701:19: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
            ret = mbedtls_snprintf( p, n, ".%d", value );
                  ^
deps/mbedtls-2.4.2/library/oid.c:27:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/padlock.c:31:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/padlock.c:52:18: style: The scope of the variable 'edx' can be reduced. [variableScope]
    int ebx = 0, edx = 0;
                 ^
deps/mbedtls-2.4.2/library/pem.c:66:18: style: The scope of the variable 'k' can be reduced. [variableScope]
    size_t i, j, k;
                 ^
deps/mbedtls-2.4.2/library/pem.c:404:12: style: The scope of the variable 'len' can be reduced. [variableScope]
    size_t len = 0, use_len, add_len = 0;
           ^
deps/mbedtls-2.4.2/library/pem.c:404:16: style: Variable 'len' is assigned a value that is never used. [unreadVariable]
    size_t len = 0, use_len, add_len = 0;
               ^
deps/mbedtls-2.4.2/library/pem.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/pk.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/pk_wrap.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/pkcs12.c:237:12: style: The scope of the variable 'use_len' can be reduced. [variableScope]
    size_t use_len;
           ^
deps/mbedtls-2.4.2/library/pkcs12.c:31:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/pkcs5.c:35:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/pkcs5.c:222:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret, j;
        ^
deps/mbedtls-2.4.2/library/pkcs5.c:227:12: style: The scope of the variable 'use_len' can be reduced. [variableScope]
    size_t use_len;
           ^
deps/mbedtls-2.4.2/library/pkcs5.c:119:22: style: Local variable 'salt' shadows outer variable [shadowVariable]
    mbedtls_asn1_buf salt;
                     ^
deps/mbedtls-2.4.2/library/pkcs5.c:317:28: note: Shadowed declaration
static const unsigned char salt[MAX_TESTS][40] =
                           ^
deps/mbedtls-2.4.2/library/pkcs5.c:119:22: note: Shadow variable
    mbedtls_asn1_buf salt;
                     ^
deps/mbedtls-2.4.2/library/pkparse.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/pkparse.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/pkparse.c:930:5: style:inconclusive: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
    return( 0 );
    ^
deps/mbedtls-2.4.2/library/pkparse.c:1211:15: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
              ^
deps/mbedtls-2.4.2/library/pkparse.c:1064:30: style: Unused variable: pk_info [unusedVariable]
    const mbedtls_pk_info_t *pk_info;
                             ^
deps/mbedtls-2.4.2/library/pkparse.c:733:20: style: The scope of the variable 'end2' can be reduced. [variableScope]
    unsigned char *end2;
                   ^
deps/mbedtls-2.4.2/library/pkparse.c:1234:15: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
        ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), key, keylen ) ) == 0 )
              ^
deps/mbedtls-2.4.2/library/pkparse.c:405:13: style: The comparison 'ret == 0' is always true. [knownConditionTrueFalse]
    if( ret == 0 && *id == MBEDTLS_ECP_DP_NONE )
            ^
deps/mbedtls-2.4.2/library/pkparse.c:372:15: note: 'ret' is assigned value '0' here.
    int ret = 0;
              ^
deps/mbedtls-2.4.2/library/pkparse.c:405:13: note: The comparison 'ret == 0' is always true.
    if( ret == 0 && *id == MBEDTLS_ECP_DP_NONE )
            ^
deps/mbedtls-2.4.2/library/pkparse.c:400:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/pkparse.c:94:16: style: Condition '*n+1==0' is always false [knownConditionTrueFalse]
    if( *n + 1 == 0 ||
               ^
deps/mbedtls-2.4.2/library/pkparse.c:85:31: note: Assuming that condition '(size=ftell(f))==-1' is not redundant
    if( ( size = ftell( f ) ) == -1 )
                              ^
deps/mbedtls-2.4.2/library/pkparse.c:92:10: note: Assignment '*n=(unsigned long)size', assigned value is -1
    *n = (size_t) size;
         ^
deps/mbedtls-2.4.2/library/pkparse.c:94:16: note: Condition '*n+1==0' is always false
    if( *n + 1 == 0 ||
               ^
deps/mbedtls-2.4.2/library/pkparse.c:531:15: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    if( ( ret = mbedtls_rsa_check_pubkey( rsa ) ) != 0 )
              ^
deps/mbedtls-2.4.2/library/pkparse.c:1221:15: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
        ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) ) == 0 )
              ^
deps/mbedtls-2.4.2/library/pkwrite.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/pkwrite.c:148:5: style:inconclusive: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
    return( (int) len );
    ^
deps/mbedtls-2.4.2/library/pkwrite.c:282:5: style:inconclusive: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
    return( (int) len );
    ^
deps/mbedtls-2.4.2/library/pkwrite.c:134:16: style: Variable 'len' is assigned a value that is never used. [unreadVariable]
    size_t len = 0;
               ^
deps/mbedtls-2.4.2/library/pkwrite.c:133:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/pkwrite.c:202:22: style: Variable 'c' is assigned a value that is never used. [unreadVariable]
    unsigned char *c = buf + size;
                     ^
deps/mbedtls-2.4.2/library/pkwrite.c:203:16: style: Variable 'len' is assigned a value that is never used. [unreadVariable]
    size_t len = 0;
               ^
deps/mbedtls-2.4.2/library/pkwrite.c:201:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/pkwrite.c:381:30: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    unsigned char output_buf[PUB_DER_MAX_BYTES];
                             ^
deps/mbedtls-2.4.2/library/pkwrite.c:403:30: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    unsigned char output_buf[PRV_DER_MAX_BYTES];
                             ^
deps/mbedtls-2.4.2/library/pkwrite.c:428:5: style:inconclusive: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
    if( ( ret = mbedtls_pem_write_buffer( begin, end,
    ^
deps/mbedtls-2.4.2/library/pkwrite.c:405:17: style: Variable 'olen' is assigned a value that is never used. [unreadVariable]
    size_t olen = 0;
                ^
deps/mbedtls-2.4.2/library/pkwrite.c:67:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/platform.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/platform.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/platform.c:292:0: information: Skipping configuration 'MBEDTLS_ENTROPY_NV_SEED;MBEDTLS_PLATFORM_C;MBEDTLS_PLATFORM_NV_SEED_ALT;MBEDTLS_PLATFORM_STD_NV_SEED_READ' since the value of 'MBEDTLS_PLATFORM_STD_NV_SEED_READ' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            MBEDTLS_PLATFORM_STD_NV_SEED_READ;
^
deps/mbedtls-2.4.2/library/platform.c:294:0: information: Skipping configuration 'MBEDTLS_ENTROPY_NV_SEED;MBEDTLS_PLATFORM_C;MBEDTLS_PLATFORM_NV_SEED_ALT;MBEDTLS_PLATFORM_STD_NV_SEED_WRITE' since the value of 'MBEDTLS_PLATFORM_STD_NV_SEED_WRITE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            MBEDTLS_PLATFORM_STD_NV_SEED_WRITE;
^
deps/mbedtls-2.4.2/library/platform.c:209:0: information: Skipping configuration 'MBEDTLS_HAVE_TIME;MBEDTLS_PLATFORM_C;MBEDTLS_PLATFORM_STD_TIME;MBEDTLS_PLATFORM_TIME_ALT' since the value of 'MBEDTLS_PLATFORM_STD_TIME' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
mbedtls_time_t (*mbedtls_time)( mbedtls_time_t* timer ) = MBEDTLS_PLATFORM_STD_TIME;
^
deps/mbedtls-2.4.2/library/platform.c:184:0: information: Skipping configuration 'MBEDTLS_PLATFORM_C;MBEDTLS_PLATFORM_EXIT_ALT;MBEDTLS_PLATFORM_STD_EXIT' since the value of 'MBEDTLS_PLATFORM_STD_EXIT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
void (*mbedtls_exit)( int status ) = MBEDTLS_PLATFORM_STD_EXIT;
^
deps/mbedtls-2.4.2/library/ripemd160.c:31:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/rsa.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/rsa.c:37:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/rsa.c:155:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/rsa.c:240:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/rsa.c:1505:1: style: Label 'cleanup' is not used. [unusedLabel]
cleanup:
^
deps/mbedtls-2.4.2/library/rsa.c:1506:9: error: Uninitialized variable: ret [uninitvar]
    if( ret != 0 )
        ^
deps/mbedtls-2.4.2/library/rsa.c:99:9: style: Variable 'ret' is not assigned a value. [unassignedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/rsa.c:591:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
deps/mbedtls-2.4.2/library/rsa.c:1426:15: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
              ^
deps/mbedtls-2.4.2/library/rsa.c:1717:17: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/rsa.c:1683:17: note: First condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/rsa.c:1717:17: note: Second condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/rsa.c:1592:19: style: The statement 'if (rng_state!=NULL) rng_state=NULL' is logically equivalent to 'rng_state=NULL'. [duplicateConditionalAssign]
    if( rng_state != NULL )
                  ^
deps/mbedtls-2.4.2/library/rsa.c:1593:20: note: Assignment 'rng_state=NULL'
        rng_state  = NULL;
                   ^
deps/mbedtls-2.4.2/library/rsa.c:1592:19: note: Condition 'rng_state!=NULL' is redundant
    if( rng_state != NULL )
                  ^
deps/mbedtls-2.4.2/library/rsa.c:1720:1: style: Label 'cleanup' is not used. There is #if in function body so the label might be used in code that is removed by the preprocessor. [unusedLabelConfiguration]
cleanup:
^
deps/mbedtls-2.4.2/library/rsa.c:1687:17: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/rsa.c:1683:17: note: First condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/rsa.c:1687:17: note: Second condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/rsa.c:1717:17: style: The if condition is the same as the previous if condition [duplicateCondition]
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/rsa.c:1713:17: note: First condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/rsa.c:1717:17: note: Second condition
    if( verbose != 0 )
                ^
deps/mbedtls-2.4.2/library/rsa.c:1599:9: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
        rng_state = NULL;
        ^
deps/mbedtls-2.4.2/library/rsa.c:1598:19: style: The statement 'if (rng_state!=NULL) rng_state=NULL' is logically equivalent to 'rng_state=NULL'. [duplicateConditionalAssign]
    if( rng_state != NULL )
                  ^
deps/mbedtls-2.4.2/library/rsa.c:1599:19: note: Assignment 'rng_state=NULL'
        rng_state = NULL;
                  ^
deps/mbedtls-2.4.2/library/rsa.c:1598:19: note: Condition 'rng_state!=NULL' is redundant
    if( rng_state != NULL )
                  ^
deps/mbedtls-2.4.2/library/rsa.c:471:15: style: The scope of the variable 'use_len' can be reduced. [variableScope]
    size_t i, use_len;
              ^
deps/mbedtls-2.4.2/library/sha1.c:30:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/sha256.c:30:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/sha512.c:30:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/sha512.c:202:14: style: The scope of the variable 'temp1' can be reduced. [variableScope]
    uint64_t temp1, temp2, W[80];
             ^
deps/mbedtls-2.4.2/library/sha512.c:202:21: style: The scope of the variable 'temp2' can be reduced. [variableScope]
    uint64_t temp1, temp2, W[80];
                    ^
deps/mbedtls-2.4.2/library/ssl_cache.c:29:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/ssl_ciphersuites.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 258 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/ssl_cli.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 53 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/ssl_cli.c:937:9: style: Condition 'offer_compress' is always false [knownConditionTrueFalse]
    if( offer_compress )
        ^
deps/mbedtls-2.4.2/library/ssl_cli.c:923:22: note: Assignment 'offer_compress=0', assigned value is 0
    offer_compress = 0;
                     ^
deps/mbedtls-2.4.2/library/ssl_cli.c:937:9: note: Condition 'offer_compress' is always false
    if( offer_compress )
        ^
deps/mbedtls-2.4.2/library/ssl_cli.c:2729:12: style: Variable 'i' is not assigned a value. [unassignedVariable]
    size_t i, n;
           ^
deps/mbedtls-2.4.2/library/ssl_cli.c:2729:15: style: Variable 'n' is not assigned a value. [unassignedVariable]
    size_t i, n;
              ^
deps/mbedtls-2.4.2/library/ssl_cli.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/ssl_cli.c:353:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
deps/mbedtls-2.4.2/library/ssl_cli.c:2344:34: style: Variable 'md_alg' is assigned a value that is never used. [unreadVariable]
        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
                                 ^
deps/mbedtls-2.4.2/library/ssl_cli.c:2345:34: style: Variable 'pk_alg' is assigned a value that is never used. [unreadVariable]
        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
                                 ^
deps/mbedtls-2.4.2/library/ssl_cli.c:2347:27: style: Variable 'params_len' is assigned a value that is never used. [unreadVariable]
        size_t params_len = p - params;
                          ^
deps/mbedtls-2.4.2/library/ssl_cli.c:3020:14: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
    size_t n = 0, offset = 0;
             ^
deps/mbedtls-2.4.2/library/ssl_cli.c:3020:26: style: Variable 'offset' is assigned a value that is never used. [unreadVariable]
    size_t n = 0, offset = 0;
                         ^
deps/mbedtls-2.4.2/library/ssl_cli.c:3022:31: style: Variable 'hash_start' is assigned a value that is never used. [unreadVariable]
    unsigned char *hash_start = hash;
                              ^
deps/mbedtls-2.4.2/library/ssl_cli.c:3023:30: style: Variable 'md_alg' is assigned a value that is never used. [unreadVariable]
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
                             ^
deps/mbedtls-2.4.2/library/ssl_cookie.c:29:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/ssl_srv.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 72 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/ssl_srv.c:2670:55: style: Variable 'ciphersuite_info' is assigned a value that is never used. [unreadVariable]
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
                                                      ^
deps/mbedtls-2.4.2/library/ssl_srv.c:3282:22: style: Variable 'ciphersuite_info' is assigned a value that is never used. [unreadVariable]
    ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
                     ^
deps/mbedtls-2.4.2/library/ssl_srv.c:3292:7: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
    p = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
      ^
deps/mbedtls-2.4.2/library/ssl_srv.c:3293:9: style: Variable 'end' is assigned a value that is never used. [unreadVariable]
    end = ssl->in_msg + ssl->in_hslen;
        ^
deps/mbedtls-2.4.2/library/ssl_srv.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/ssl_srv.c:2681:32: style: Variable 'len' is not assigned a value. [unassignedVariable]
    size_t dig_signed_len = 0, len;
                               ^
deps/mbedtls-2.4.2/library/ssl_srv.c:3082:32: error: The address of local variable 'p' is accessed at non-zero index. [objectIndex]
    n = ( (*p)[0] << 8 ) | (*p)[1];
                               ^
deps/mbedtls-2.4.2/library/ssl_srv.c:3310:54: note: Address of variable taken here.
        if( ( ret = ssl_parse_client_dh_public( ssl, &p, end ) ) != 0 )
                                                     ^
deps/mbedtls-2.4.2/library/ssl_srv.c:3310:54: note: Calling function 'ssl_parse_client_dh_public', 2nd argument '&p' value is lifetime=p
        if( ( ret = ssl_parse_client_dh_public( ssl, &p, end ) ) != 0 )
                                                     ^
deps/mbedtls-2.4.2/library/ssl_srv.c:3076:16: note: Assuming condition is Assuming condition is false
    if( *p + 2 > end )
               ^
deps/mbedtls-2.4.2/library/ssl_srv.c:3082:32: note: The address of local variable 'p' is accessed at non-zero index.
    n = ( (*p)[0] << 8 ) | (*p)[1];
                               ^
deps/mbedtls-2.4.2/library/ssl_srv.c:3082:32: error: The address of local variable 'p' is accessed at non-zero index. [objectIndex]
    n = ( (*p)[0] << 8 ) | (*p)[1];
                               ^
deps/mbedtls-2.4.2/library/ssl_srv.c:3427:54: note: Address of variable taken here.
        if( ( ret = ssl_parse_client_dh_public( ssl, &p, end ) ) != 0 )
                                                     ^
deps/mbedtls-2.4.2/library/ssl_srv.c:3427:54: note: Calling function 'ssl_parse_client_dh_public', 2nd argument '&p' value is lifetime=p
        if( ( ret = ssl_parse_client_dh_public( ssl, &p, end ) ) != 0 )
                                                     ^
deps/mbedtls-2.4.2/library/ssl_srv.c:3076:16: note: Assuming condition is Assuming condition is false
    if( *p + 2 > end )
               ^
deps/mbedtls-2.4.2/library/ssl_srv.c:3082:32: note: The address of local variable 'p' is accessed at non-zero index.
    n = ( (*p)[0] << 8 ) | (*p)[1];
                               ^
deps/mbedtls-2.4.2/library/ssl_srv.c:2978:68: style: The comparison 'hashlen != 0' is always false. [knownConditionTrueFalse]
        MBEDTLS_SSL_DEBUG_BUF( 3, "parameters hash", hash, hashlen != 0 ? hashlen :
                                                                   ^
deps/mbedtls-2.4.2/library/ssl_srv.c:2862:32: note: 'hashlen' is assigned value '0' here.
        unsigned int hashlen = 0;
                               ^
deps/mbedtls-2.4.2/library/ssl_srv.c:2978:68: note: The comparison 'hashlen != 0' is always false.
        MBEDTLS_SSL_DEBUG_BUF( 3, "parameters hash", hash, hashlen != 0 ? hashlen :
                                                                   ^
deps/mbedtls-2.4.2/library/ssl_srv.c:2784:20: style: Variable 'dig_signed' is assigned a value that is never used. [unreadVariable]
        dig_signed = p;
                   ^
deps/mbedtls-2.4.2/library/ssl_srv.c:2785:24: style: Variable 'dig_signed_len' is assigned a value that is never used. [unreadVariable]
        dig_signed_len = len;
                       ^
deps/mbedtls-2.4.2/library/ssl_srv.c:2861:30: style: Variable 'signature_len' is assigned a value that is never used. [unreadVariable]
        size_t signature_len = 0;
                             ^
deps/mbedtls-2.4.2/library/ssl_srv.c:2862:30: style: Variable 'hashlen' is assigned a value that is never used. [unreadVariable]
        unsigned int hashlen = 0;
                             ^
deps/mbedtls-2.4.2/library/ssl_srv.c:2892:20: style: Variable 'md_alg' is assigned a value that is never used. [unreadVariable]
            md_alg = MBEDTLS_MD_NONE;
                   ^
deps/mbedtls-2.4.2/library/ssl_srv.c:3558:31: style: Variable 'hash_start' is assigned a value that is never used. [unreadVariable]
    unsigned char *hash_start = hash;
                              ^
deps/mbedtls-2.4.2/library/ssl_srv.c:3609:7: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
    i = mbedtls_ssl_hs_hdr_len( ssl );
      ^
deps/mbedtls-2.4.2/library/ssl_ticket.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/ssl_ticket.c:184:10: style: Variable 'left' is assigned a value that is never used. [unreadVariable]
    left -= sizeof( mbedtls_ssl_session );
         ^
deps/mbedtls-2.4.2/library/ssl_tls.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 111 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:2811:9: style: Condition '!done' is always true [knownConditionTrueFalse]
    if( !done )
        ^
deps/mbedtls-2.4.2/library/ssl_tls.c:2698:21: note: Assignment 'done=0', assigned value is 0
    int ret, done = 0, out_msg_type;
                    ^
deps/mbedtls-2.4.2/library/ssl_tls.c:2811:9: note: Condition '!done' is always true
    if( !done )
        ^
deps/mbedtls-2.4.2/library/ssl_tls.c:3675:9: style: Condition '!done' is always true [knownConditionTrueFalse]
    if( !done && ssl->transform_in != NULL )
        ^
deps/mbedtls-2.4.2/library/ssl_tls.c:3654:21: note: Assignment 'done=0', assigned value is 0
    int ret, done = 0;
                    ^
deps/mbedtls-2.4.2/library/ssl_tls.c:3675:9: note: Condition '!done' is always true
    if( !done && ssl->transform_in != NULL )
        ^
deps/mbedtls-2.4.2/library/ssl_tls.c:1919:19: style: The comparison 'auth_done == 0' is always true. [knownConditionTrueFalse]
    if( auth_done == 0 )
                  ^
deps/mbedtls-2.4.2/library/ssl_tls.c:1571:21: note: 'auth_done' is assigned value '0' here.
    int auth_done = 0;
                    ^
deps/mbedtls-2.4.2/library/ssl_tls.c:1919:19: note: The comparison 'auth_done == 0' is always true.
    if( auth_done == 0 )
                  ^
deps/mbedtls-2.4.2/library/ssl_tls.c:2413:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
deps/mbedtls-2.4.2/library/ssl_tls.c:2414:20: style: The scope of the variable 'buf' can be reduced. [variableScope]
    unsigned char *buf, i;
                   ^
deps/mbedtls-2.4.2/library/ssl_tls.c:6901:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
deps/mbedtls-2.4.2/library/ssl_tls.c:691:63: style: Clarify calculation precedence for '&' and '?'. [clarifyCalculation]
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
                                                              ^
deps/mbedtls-2.4.2/library/ssl_tls.c:486:13: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    int ret = 0;
            ^
deps/mbedtls-2.4.2/library/ssl_tls.c:497:34: style: Variable 'session' is assigned a value that is never used. [unreadVariable]
    mbedtls_ssl_session *session = ssl->session_negotiate;
                                 ^
deps/mbedtls-2.4.2/library/ssl_tls.c:499:45: style: Variable 'handshake' is assigned a value that is never used. [unreadVariable]
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
                                            ^
deps/mbedtls-2.4.2/library/ssl_tls.c:491:20: style: Unused variable: mac_enc [unusedVariable]
    unsigned char *mac_enc;
                   ^
deps/mbedtls-2.4.2/library/ssl_tls.c:492:20: style: Unused variable: mac_dec [unusedVariable]
    unsigned char *mac_dec;
                   ^
deps/mbedtls-2.4.2/library/ssl_tls.c:493:12: style: Unused variable: iv_copy_len [unusedVariable]
    size_t iv_copy_len;
           ^
deps/mbedtls-2.4.2/library/ssl_tls.c:1573:19: style: Variable 'padlen' is assigned a value that is never used. [unreadVariable]
    size_t padlen = 0, correct = 1;
                  ^
deps/mbedtls-2.4.2/library/ssl_tls.c:1573:32: style: Variable 'correct' is assigned a value that is never used. [unreadVariable]
    size_t padlen = 0, correct = 1;
                               ^
deps/mbedtls-2.4.2/library/ssl_tls.c:1599:16: style: Variable 'padlen' is assigned a value that is never used. [unreadVariable]
        padlen = 0;
               ^
deps/mbedtls-2.4.2/library/ssl_tls.c:1832:20: style: Variable 'padlen' is assigned a value that is never used. [unreadVariable]
            padlen = 0;
                   ^
deps/mbedtls-2.4.2/library/ssl_tls.c:1833:21: style: Variable 'correct' is assigned a value that is never used. [unreadVariable]
            correct = 0;
                    ^
deps/mbedtls-2.4.2/library/ssl_tls.c:374:18: style: The scope of the variable 'k' can be reduced. [variableScope]
    size_t i, j, k, md_len;
                 ^
deps/mbedtls-2.4.2/library/threading.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/timing.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/timing.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/version.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/version_features.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 198 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/x509.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/x509.c:771:13: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
            ^
deps/mbedtls-2.4.2/library/x509.c:767:17: note: ret is assigned
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
                ^
deps/mbedtls-2.4.2/library/x509.c:771:13: note: ret is overwritten
        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
            ^
deps/mbedtls-2.4.2/library/x509.c:790:13: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
        ret = mbedtls_snprintf( p, n, "%s", s );
            ^
deps/mbedtls-2.4.2/library/x509.c:774:17: note: ret is assigned
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
                ^
deps/mbedtls-2.4.2/library/x509.c:790:13: note: ret is overwritten
        ret = mbedtls_snprintf( p, n, "%s", s );
            ^
deps/mbedtls-2.4.2/library/x509.c:790:13: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
        ret = mbedtls_snprintf( p, n, "%s", s );
            ^
deps/mbedtls-2.4.2/library/x509.c:776:17: note: ret is assigned
            ret = mbedtls_snprintf( p, n, "\?\?=" );
                ^
deps/mbedtls-2.4.2/library/x509.c:790:13: note: ret is overwritten
        ret = mbedtls_snprintf( p, n, "%s", s );
            ^
deps/mbedtls-2.4.2/library/x509.c:433:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
deps/mbedtls-2.4.2/library/x509.c:435:26: style: The scope of the variable 'end_set' can be reduced. [variableScope]
    const unsigned char *end_set;
                         ^
deps/mbedtls-2.4.2/library/x509.c:828:13: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
        ret = mbedtls_snprintf( p, n, "...." );
            ^
deps/mbedtls-2.4.2/library/x509.c:849:13: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
        ret = mbedtls_snprintf( p, n, "???"  );
            ^
deps/mbedtls-2.4.2/library/x509.c:851:13: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
        ret = mbedtls_snprintf( p, n, "%s", desc );
            ^
deps/mbedtls-2.4.2/library/x509.c:889:9: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    ret = mbedtls_snprintf( p, n, "%s key size", name );
        ^
deps/mbedtls-2.4.2/library/x509.c:35:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/x509_create.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/x509_create.c:199:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/x509_create.c:236:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/x509_create.c:259:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/x509_create.c:289:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/x509_create.c:327:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:596:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n%sissuer name   : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:592:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "%sCRL version   : %d",
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:596:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n%sissuer name   : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:598:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_x509_dn_gets( p, n, &crl->issuer );
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:596:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "\n%sissuer name   : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:598:9: note: ret is overwritten
    ret = mbedtls_x509_dn_gets( p, n, &crl->issuer );
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:601:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n%sthis update   : " \
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:598:9: note: ret is assigned
    ret = mbedtls_x509_dn_gets( p, n, &crl->issuer );
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:601:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n%sthis update   : " \
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:608:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n%snext update   : " \
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:601:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "\n%sthis update   : " \
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:608:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n%snext update   : " \
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:617:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n%sRevoked certificates:",
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:608:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "\n%snext update   : " \
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:617:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n%sRevoked certificates:",
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:640:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n%ssigned using  : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:617:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "\n%sRevoked certificates:",
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:640:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n%ssigned using  : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:627:13: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
        ret = mbedtls_x509_serial_gets( p, n, &entry->serial );
            ^
deps/mbedtls-2.4.2/library/x509_crl.c:623:13: note: ret is assigned
        ret = mbedtls_snprintf( p, n, "\n%sserial number: ",
            ^
deps/mbedtls-2.4.2/library/x509_crl.c:627:13: note: ret is overwritten
        ret = mbedtls_x509_serial_gets( p, n, &entry->serial );
            ^
deps/mbedtls-2.4.2/library/x509_crl.c:630:13: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
        ret = mbedtls_snprintf( p, n, " revocation date: " \
            ^
deps/mbedtls-2.4.2/library/x509_crl.c:627:13: note: ret is assigned
        ret = mbedtls_x509_serial_gets( p, n, &entry->serial );
            ^
deps/mbedtls-2.4.2/library/x509_crl.c:630:13: note: ret is overwritten
        ret = mbedtls_snprintf( p, n, " revocation date: " \
            ^
deps/mbedtls-2.4.2/library/x509_crl.c:640:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n%ssigned using  : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:630:13: note: ret is assigned
        ret = mbedtls_snprintf( p, n, " revocation date: " \
            ^
deps/mbedtls-2.4.2/library/x509_crl.c:640:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n%ssigned using  : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:643:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_x509_sig_alg_gets( p, n, &crl->sig_oid, crl->sig_pk, crl->sig_md,
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:640:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "\n%ssigned using  : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:643:9: note: ret is overwritten
    ret = mbedtls_x509_sig_alg_gets( p, n, &crl->sig_oid, crl->sig_pk, crl->sig_md,
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:647:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n" );
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:643:9: note: ret is assigned
    ret = mbedtls_x509_sig_alg_gets( p, n, &crl->sig_oid, crl->sig_pk, crl->sig_md,
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:647:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n" );
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:647:9: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    ret = mbedtls_snprintf( p, n, "\n" );
        ^
deps/mbedtls-2.4.2/library/x509_crl.c:35:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/x509_crt.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
deps/mbedtls-2.4.2/library/x509_crt.c:1378:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1375:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1378:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1382:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1378:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1382:9: note: ret is overwritten
    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1385:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1382:9: note: ret is assigned
    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1385:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1387:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1385:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1387:9: note: ret is overwritten
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1390:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1387:9: note: ret is assigned
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1390:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1392:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1390:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1392:9: note: ret is overwritten
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1395:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1392:9: note: ret is assigned
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1395:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1402:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1395:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1402:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1409:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1402:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1409:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1412:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1409:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1412:9: note: ret is overwritten
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1417:15: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
              ^
deps/mbedtls-2.4.2/library/x509_crt.c:1412:9: note: ret is assigned
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1417:15: note: ret is overwritten
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
              ^
deps/mbedtls-2.4.2/library/x509_crt.c:1482:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n" );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1423:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1482:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n" );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1482:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n" );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1433:13: note: ret is assigned
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
            ^
deps/mbedtls-2.4.2/library/x509_crt.c:1482:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n" );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1482:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n" );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1439:17: note: ret is assigned
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
                ^
deps/mbedtls-2.4.2/library/x509_crt.c:1482:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n" );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1449:19: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
        if( ( ret = x509_info_subject_alt_name( &p, &n,
                  ^
deps/mbedtls-2.4.2/library/x509_crt.c:1446:13: note: ret is assigned
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
            ^
deps/mbedtls-2.4.2/library/x509_crt.c:1449:19: note: ret is overwritten
        if( ( ret = x509_info_subject_alt_name( &p, &n,
                  ^
deps/mbedtls-2.4.2/library/x509_crt.c:1459:19: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
                  ^
deps/mbedtls-2.4.2/library/x509_crt.c:1456:13: note: ret is assigned
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
            ^
deps/mbedtls-2.4.2/library/x509_crt.c:1459:19: note: ret is overwritten
        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
                  ^
deps/mbedtls-2.4.2/library/x509_crt.c:1468:19: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
                  ^
deps/mbedtls-2.4.2/library/x509_crt.c:1465:13: note: ret is assigned
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
            ^
deps/mbedtls-2.4.2/library/x509_crt.c:1468:19: note: ret is overwritten
        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
                  ^
deps/mbedtls-2.4.2/library/x509_crt.c:1477:19: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
        if( ( ret = x509_info_ext_key_usage( &p, &n,
                  ^
deps/mbedtls-2.4.2/library/x509_crt.c:1474:13: note: ret is assigned
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
            ^
deps/mbedtls-2.4.2/library/x509_crt.c:1477:19: note: ret is overwritten
        if( ( ret = x509_info_ext_key_usage( &p, &n,
                  ^
deps/mbedtls-2.4.2/library/x509_crt.c:2272:60: style: The comparison 'pathlen == 0' is always true. [knownConditionTrueFalse]
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
                                                           ^
deps/mbedtls-2.4.2/library/x509_crt.c:2197:19: note: 'pathlen' is assigned value '0' here.
    int pathlen = 0, selfsigned = 0;
                  ^
deps/mbedtls-2.4.2/library/x509_crt.c:2272:60: note: The comparison 'pathlen == 0' is always true.
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
                                                           ^
deps/mbedtls-2.4.2/library/x509_crt.c:2287:64: style: The comparison 'pathlen == 0' is always true. [knownConditionTrueFalse]
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
                                                               ^
deps/mbedtls-2.4.2/library/x509_crt.c:2197:19: note: 'pathlen' is assigned value '0' here.
    int pathlen = 0, selfsigned = 0;
                  ^
deps/mbedtls-2.4.2/library/x509_crt.c:2287:64: note: The comparison 'pathlen == 0' is always true.
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
                                                               ^
deps/mbedtls-2.4.2/library/x509_crt.c:450:19: style: The scope of the variable 'tag' can be reduced. [variableScope]
    unsigned char tag;
                  ^
deps/mbedtls-2.4.2/library/x509_crt.c:1325:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1725:19: style: The scope of the variable 'diff' can be reduced. [variableScope]
    unsigned char diff;
                  ^
deps/mbedtls-2.4.2/library/x509_crt.c:2195:12: style: The scope of the variable 'cn_len' can be reduced. [variableScope]
    size_t cn_len;
           ^
deps/mbedtls-2.4.2/library/x509_crt.c:1279:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1280:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1281:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1282:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1283:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1284:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1285:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1286:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1306:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1307:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1308:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1309:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1310:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1311:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1312:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1313:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1314:5: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
    ^
deps/mbedtls-2.4.2/library/x509_crt.c:1337:13: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
            ^
deps/mbedtls-2.4.2/library/x509_crt.c:1369:13: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
            ^
deps/mbedtls-2.4.2/library/x509_crt.c:1482:9: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    ret = mbedtls_snprintf( p, n, "\n" );
        ^
deps/mbedtls-2.4.2/library/x509_crt.c:1537:13: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
        ret = mbedtls_snprintf( p, n, "%sUnknown reason "
            ^
deps/mbedtls-2.4.2/library/x509_crt.c:35:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/x509_crt.c:1003:13: style: The scope of the variable 'ret' can be reduced. [variableScope]
        int ret;
            ^
deps/mbedtls-2.4.2/library/x509_csr.c:355:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n%ssubject name  : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_csr.c:351:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "%sCSR version   : %d",
        ^
deps/mbedtls-2.4.2/library/x509_csr.c:355:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n%ssubject name  : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_csr.c:357:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_x509_dn_gets( p, n, &csr->subject );
        ^
deps/mbedtls-2.4.2/library/x509_csr.c:355:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "\n%ssubject name  : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_csr.c:357:9: note: ret is overwritten
    ret = mbedtls_x509_dn_gets( p, n, &csr->subject );
        ^
deps/mbedtls-2.4.2/library/x509_csr.c:360:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_snprintf( p, n, "\n%ssigned using  : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_csr.c:357:9: note: ret is assigned
    ret = mbedtls_x509_dn_gets( p, n, &csr->subject );
        ^
deps/mbedtls-2.4.2/library/x509_csr.c:360:9: note: ret is overwritten
    ret = mbedtls_snprintf( p, n, "\n%ssigned using  : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_csr.c:363:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mbedtls_x509_sig_alg_gets( p, n, &csr->sig_oid, csr->sig_pk, csr->sig_md,
        ^
deps/mbedtls-2.4.2/library/x509_csr.c:360:9: note: ret is assigned
    ret = mbedtls_snprintf( p, n, "\n%ssigned using  : ", prefix );
        ^
deps/mbedtls-2.4.2/library/x509_csr.c:363:9: note: ret is overwritten
    ret = mbedtls_x509_sig_alg_gets( p, n, &csr->sig_oid, csr->sig_pk, csr->sig_md,
        ^
deps/mbedtls-2.4.2/library/x509_csr.c:367:15: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
              ^
deps/mbedtls-2.4.2/library/x509_csr.c:363:9: note: ret is assigned
    ret = mbedtls_x509_sig_alg_gets( p, n, &csr->sig_oid, csr->sig_pk, csr->sig_md,
        ^
deps/mbedtls-2.4.2/library/x509_csr.c:367:15: note: ret is overwritten
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
              ^
deps/mbedtls-2.4.2/library/x509_csr.c:373:9: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits\n", prefix, key_size_str,
        ^
deps/mbedtls-2.4.2/library/x509_csr.c:35:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/x509write_crt.c:31:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/x509write_crt.c:141:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/x509write_crt.c:269:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/x509write_crt.c:172:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/x509write_crt.c:194:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
deps/mbedtls-2.4.2/library/x509write_csr.c:30:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/mbedtls-2.4.2/library/xtea.c:25:0: error: No header in #include [preprocessorErrorDirective]
#include MBEDTLS_CONFIG_FILE
^
deps/regex/re.c:105:8: style: The scope of the variable 'c' can be reduced. [variableScope]
  char c;     /* current char in pattern   */
       ^
fuzz/mk_check.c:30:9: style: The scope of the variable 'len' can be reduced. [variableScope]
    int len;
        ^
fuzz/mk_fuzz_me.c:88:5: portability: %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
    printf(" => %lu bytes\n", size);
    ^
fuzz/mk_fuzz_me.c:29:9: style: The scope of the variable 'len' can be reduced. [variableScope]
    int len;
        ^
fuzz/mk_fuzz_me.c:102:9: style: The scope of the variable 'len' can be reduced. [variableScope]
    int len;
        ^
mk_bin/monkey.c:47:23: style: The scope of the variable 'p' can be reduced. [variableScope]
    struct mk_plugin *p;
                      ^
mk_bin/monkey.c:29:0: information: Skipping configuration '__DATE__;__TIME__' since the value of '__DATE__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static const char MONKEY_BUILT[] = __DATE__ " " __TIME__;
^
mk_bin/monkey.c:29:0: information: Skipping configuration '__DATE__;__TIME__' since the value of '__TIME__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static const char MONKEY_BUILT[] = __DATE__ " " __TIME__;
^
mk_core/deps/libevent/WIN32-Code/getopt.c:45:0: information: Skipping configuration '__weak_alias' since the value of '__weak_alias' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
__weak_alias(getopt,_getopt);
^
mk_core/deps/libevent/arc4random.c:111:16: style: The scope of the variable 'si' can be reduced. [variableScope]
 unsigned char si;
               ^
mk_core/deps/libevent/arc4random.c:129:10: style: The scope of the variable 'result' can be reduced. [variableScope]
 ssize_t result;
         ^
mk_core/deps/libevent/arc4random.c:259:6: style: The scope of the variable 'fd' can be reduced. [variableScope]
 int fd;
     ^
mk_core/deps/libevent/arc4random.c:262:13: style: The scope of the variable 'n' can be reduced. [variableScope]
 int bytes, n, i, nybbles;
            ^
mk_core/deps/libevent/buffer.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/buffer.c:3228:9: style:inconclusive: Found duplicate branches for 'if' and 'else'. [duplicateBranch]
 } else if (seg->is_mapping) {
        ^
mk_core/deps/libevent/buffer.c:3259:4: note: Found duplicate branches for 'if' and 'else'.
 } else {
   ^
mk_core/deps/libevent/buffer.c:3228:9: note: Found duplicate branches for 'if' and 'else'.
 } else if (seg->is_mapping) {
        ^
mk_core/deps/libevent/buffer.c:1495:16: style: The scope of the variable 'cr' can be reduced. [variableScope]
 char *s_end, *cr, *lf;
               ^
mk_core/deps/libevent/buffer.c:1495:21: style: The scope of the variable 'lf' can be reduced. [variableScope]
 char *s_end, *cr, *lf;
                    ^
mk_core/deps/libevent/buffer.c:2671:6: style: The scope of the variable 'r' can be reduced. [variableScope]
 int r;
     ^
mk_core/deps/libevent/buffer.c:3127:1: style: Label 'done' is not used. There is #if in function body so the label might be used in code that is removed by the preprocessor. [unusedLabelConfiguration]
done:
^
mk_core/deps/libevent/buffer.c:513:45: style:inconclusive: Function 'evbuffer_invoke_callbacks_' argument 1 names different: declaration 'buf' definition 'buffer'. [funcArgNamesDifferent]
evbuffer_invoke_callbacks_(struct evbuffer *buffer)
                                            ^
mk_core/deps/libevent/evbuffer-internal.h:340:50: note: Function 'evbuffer_invoke_callbacks_' argument 1 names different: declaration 'buf' definition 'buffer'.
void evbuffer_invoke_callbacks_(struct evbuffer *buf);
                                                 ^
mk_core/deps/libevent/buffer.c:513:45: note: Function 'evbuffer_invoke_callbacks_' argument 1 names different: declaration 'buf' definition 'buffer'.
evbuffer_invoke_callbacks_(struct evbuffer *buffer)
                                            ^
mk_core/deps/libevent/buffer.c:1918:12: style:inconclusive: Function 'evbuffer_chain_should_realign' argument 2 names different: declaration 'datalen' definition 'datlen'. [funcArgNamesDifferent]
    size_t datlen)
           ^
mk_core/deps/libevent/buffer.c:144:12: note: Function 'evbuffer_chain_should_realign' argument 2 names different: declaration 'datalen' definition 'datlen'.
    size_t datalen);
           ^
mk_core/deps/libevent/buffer.c:1918:12: note: Function 'evbuffer_chain_should_realign' argument 2 names different: declaration 'datalen' definition 'datlen'.
    size_t datlen)
           ^
mk_core/deps/libevent/buffer.c:2215:38: style:inconclusive: Function 'evbuffer_read_setup_vecs_' argument 4 names different: declaration 'n_vecs' definition 'n_vecs_avail'. [funcArgNamesDifferent]
    struct evbuffer_iovec *vecs, int n_vecs_avail,
                                     ^
mk_core/deps/libevent/evbuffer-internal.h:326:38: note: Function 'evbuffer_read_setup_vecs_' argument 4 names different: declaration 'n_vecs' definition 'n_vecs_avail'.
    struct evbuffer_iovec *vecs, int n_vecs, struct evbuffer_chain ***chainp,
                                     ^
mk_core/deps/libevent/buffer.c:2215:38: note: Function 'evbuffer_read_setup_vecs_' argument 4 names different: declaration 'n_vecs' definition 'n_vecs_avail'.
    struct evbuffer_iovec *vecs, int n_vecs_avail,
                                     ^
mk_core/deps/libevent/buffer.c:3045:18: style: Condition 'page_size==-1' is always false [knownConditionTrueFalse]
   if (page_size == -1)
                 ^
mk_core/deps/libevent/buffer.c:3044:34: note: Assignment 'page_size=get_page_size()', assigned value is 1
   long page_size = get_page_size();
                                 ^
mk_core/deps/libevent/buffer.c:3045:18: note: Condition 'page_size==-1' is always false
   if (page_size == -1)
                 ^
mk_core/deps/libevent/buffer.c:3056:0: information: Skipping configuration 'EVENT__HAVE_MMAP;MAP_FILE' since the value of 'MAP_FILE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      MAP_FILE |
^
mk_core/deps/libevent/buffer_iocp.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/buffer_iocp.c:101:20: style: The scope of the variable 'len' can be reduced. [variableScope]
 size_t remaining, len;
                   ^
mk_core/deps/libevent/buffer_iocp.c:171:57: style:inconclusive: Function 'evbuffer_launch_write_' argument 2 names different: declaration 'n' definition 'at_most'. [funcArgNamesDifferent]
evbuffer_launch_write_(struct evbuffer *buf, ev_ssize_t at_most,
                                                        ^
mk_core/deps/libevent/iocp-internal.h:148:61: note: Function 'evbuffer_launch_write_' argument 2 names different: declaration 'n' definition 'at_most'.
int evbuffer_launch_write_(struct evbuffer *buf, ev_ssize_t n, struct event_overlapped *ol);
                                                            ^
mk_core/deps/libevent/buffer_iocp.c:171:57: note: Function 'evbuffer_launch_write_' argument 2 names different: declaration 'n' definition 'at_most'.
evbuffer_launch_write_(struct evbuffer *buf, ev_ssize_t at_most,
                                                        ^
mk_core/deps/libevent/buffer_iocp.c:245:52: style:inconclusive: Function 'evbuffer_launch_read_' argument 2 names different: declaration 'n' definition 'at_most'. [funcArgNamesDifferent]
evbuffer_launch_read_(struct evbuffer *buf, size_t at_most,
                                                   ^
mk_core/deps/libevent/iocp-internal.h:134:56: note: Function 'evbuffer_launch_read_' argument 2 names different: declaration 'n' definition 'at_most'.
int evbuffer_launch_read_(struct evbuffer *buf, size_t n, struct event_overlapped *ol);
                                                       ^
mk_core/deps/libevent/buffer_iocp.c:245:52: note: Function 'evbuffer_launch_read_' argument 2 names different: declaration 'n' definition 'at_most'.
evbuffer_launch_read_(struct evbuffer *buf, size_t at_most,
                                                   ^
mk_core/deps/libevent/buffer_iocp.c:89:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(chain);
^
mk_core/deps/libevent/buffer_iocp.c:105:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(buf->read_in_progress && !buf->write_in_progress);
^
mk_core/deps/libevent/buffer_iocp.c:106:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(nBytes >= 0); /* XXXX Can this be false? */
^
mk_core/deps/libevent/buffer_iocp.c:115:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(*chainp);
^
mk_core/deps/libevent/buffer_iocp.c:143:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(buf->write_in_progress && !buf->read_in_progress);
^
mk_core/deps/libevent/buffer_iocp.c:186:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(!buf_o->read_in_progress);
^
mk_core/deps/libevent/buffer_iocp.c:260:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(!buf_o->write_in_progress);
^
mk_core/deps/libevent/buffer_iocp.c:288:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(npin == nvecs);
^
mk_core/deps/libevent/bufferevent.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 29 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/minheap-internal.h:107:45: error: syntax error [syntaxError]
  if (e->ev_timeout_pos.min_heap_idx > 0 && min_heap_elem_greater(s->p[parent], last))
                                            ^
mk_core/deps/libevent/bufferevent_async.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/bufferevent_filter.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/bufferevent_filter.c:422:36: style:inconclusive: Function 'bufferevent_filtered_outbuf_cb' argument 2 names different: declaration 'info' definition 'cbinfo'. [funcArgNamesDifferent]
    const struct evbuffer_cb_info *cbinfo, void *arg)
                                   ^
mk_core/deps/libevent/bufferevent_filter.c:78:36: note: Function 'bufferevent_filtered_outbuf_cb' argument 2 names different: declaration 'info' definition 'cbinfo'.
    const struct evbuffer_cb_info *info, void *arg);
                                   ^
mk_core/deps/libevent/bufferevent_filter.c:422:36: note: Function 'bufferevent_filtered_outbuf_cb' argument 2 names different: declaration 'info' definition 'cbinfo'.
    const struct evbuffer_cb_info *cbinfo, void *arg)
                                   ^
mk_core/deps/libevent/bufferevent_filter.c:517:26: style: Variable 'bev' is assigned a value that is never used. [unreadVariable]
 struct bufferevent *bev = downcast(bevf);
                         ^
mk_core/deps/libevent/bufferevent_openssl.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 29 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/bufferevent_openssl.c:580:6: style: The scope of the variable 'r' can be reduced. [variableScope]
 int r, n, i, n_used = 0, atmost;
     ^
mk_core/deps/libevent/bufferevent_pair.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/bufferevent_ratelim.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/bufferevent_sock.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 28 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/cmake/CheckFunctionExistsEx.c:4:0: information: Skipping configuration 'CHECK_FUNCTION_EXISTS' since the value of 'CHECK_FUNCTION_EXISTS' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
char CHECK_FUNCTION_EXISTS();
^
mk_core/deps/libevent/cmake/CheckFunctionExistsEx.c:17:0: information: Skipping configuration 'CHECK_FUNCTION_EXISTS' since the value of 'CHECK_FUNCTION_EXISTS' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  CHECK_FUNCTION_EXISTS();
^
mk_core/deps/libevent/cmake/CheckFunctionExistsEx.c:15:0: information: Skipping configuration 'CHECK_FUNCTION_EXISTS;_WIN32' since the value of 'CHECK_FUNCTION_EXISTS' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  void * p = &CHECK_FUNCTION_EXISTS;
^
mk_core/deps/libevent/cmake/CheckFunctionExistsEx.c:4:0: information: Skipping configuration 'CHECK_FUNCTION_EXISTS;__CLASSIC_C__' since the value of 'CHECK_FUNCTION_EXISTS' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
char CHECK_FUNCTION_EXISTS();
^
mk_core/deps/libevent/cmake/CheckFunctionExistsEx.c:17:0: information: Skipping configuration 'CHECK_FUNCTION_EXISTS;__CLASSIC_C__' since the value of 'CHECK_FUNCTION_EXISTS' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  CHECK_FUNCTION_EXISTS();
^
mk_core/deps/libevent/devpoll.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/epoll.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 32 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/epoll_sub.c:47:0: information: Skipping configuration '__NR_epoll_create;__NR_epoll_create1' since the value of '__NR_epoll_create' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (syscall(__NR_epoll_create, size));
^
mk_core/deps/libevent/epoll_sub.c:64:0: information: Skipping configuration '__NR_epoll_pwait;__NR_epoll_wait' since the value of '__NR_epoll_wait' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 return (syscall(__NR_epoll_wait, epfd, events, maxevents, timeout));
^
mk_core/deps/libevent/evdns.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/evdns.c:869:6: style: The scope of the variable 'error' can be reduced. [variableScope]
 int error;
     ^
mk_core/deps/libevent/evdns.c:870:7: style: The scope of the variable 'addrbuf' can be reduced. [variableScope]
 char addrbuf[128];
      ^
mk_core/deps/libevent/evdns.c:1412:6: style: The scope of the variable 'r' can be reduced. [variableScope]
 int r;
     ^
mk_core/deps/libevent/evdns.c:2076:6: style: The scope of the variable 'i' can be reduced. [variableScope]
 int i, rc=1, lock=0;
     ^
mk_core/deps/libevent/evdns.c:2884:18: style: The scope of the variable 'req' can be reduced. [variableScope]
 struct request *req;
                 ^
mk_core/deps/libevent/evdns.c:2923:18: style: The scope of the variable 'req' can be reduced. [variableScope]
 struct request *req;
                 ^
mk_core/deps/libevent/evdns.c:3389:62: style: The scope of the variable 'req' can be reduced. [variableScope]
 struct request **old_heads = base->req_heads, **new_heads, *req;
                                                             ^
mk_core/deps/libevent/evdns.c:3390:6: style: The scope of the variable 'i' can be reduced. [variableScope]
 int i;
     ^
mk_core/deps/libevent/evdns.c:4125:19: style: The scope of the variable 'hash' can be reduced. [variableScope]
 char *hostname, *hash;
                  ^
mk_core/deps/libevent/evdns.c:2749:12: style:inconclusive: Function 'request_new' argument 7 names different: declaration 'ptr' definition 'user_ptr'. [funcArgNamesDifferent]
     void *user_ptr) {
           ^
mk_core/deps/libevent/evdns.c:404:166: note: Function 'request_new' argument 7 names different: declaration 'ptr' definition 'user_ptr'.
static struct request *request_new(struct evdns_base *base, struct evdns_request *handle, int type, const char *name, int flags, evdns_callback_type callback, void *ptr);
                                                                                                                                                                     ^
mk_core/deps/libevent/evdns.c:2749:12: note: Function 'request_new' argument 7 names different: declaration 'ptr' definition 'user_ptr'.
     void *user_ptr) {
           ^
mk_core/deps/libevent/evdns.c:3256:45: style:inconclusive: Function 'search_try_next' argument 1 names different: declaration 'req' definition 'handle'. [funcArgNamesDifferent]
search_try_next(struct evdns_request *const handle) {
                                            ^
mk_core/deps/libevent/evdns.c:400:56: note: Function 'search_try_next' argument 1 names different: declaration 'req' definition 'handle'.
static int search_try_next(struct evdns_request *const req);
                                                       ^
mk_core/deps/libevent/evdns.c:3256:45: note: Function 'search_try_next' argument 1 names different: declaration 'req' definition 'handle'.
search_try_next(struct evdns_request *const handle) {
                                            ^
mk_core/deps/libevent/evdns.c:3326:23: error: Uninitialized variable: *state [uninitvar]
 start = cp = s ? s : *state;
                      ^
mk_core/deps/libevent/evdns.c:3534:52: note: Calling function 'strtok_r', 3rd argument '&strtok_state' value is <Uninit>
 char *const first_token = strtok_r(start, delims, &strtok_state);
                                                   ^
mk_core/deps/libevent/evdns.c:3326:23: note: Uninitialized variable: *state
 start = cp = s ? s : *state;
                      ^
mk_core/deps/libevent/evdns.c:1604:10: style: Variable 'ref' is assigned a value that is never used. [unreadVariable]
 int ref = 0;
         ^
mk_core/deps/libevent/evdns.c:2490:10: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
 int err = 0;
         ^
mk_core/deps/libevent/event.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 36 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/event.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
mk_core/deps/libevent/event_iocp.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/event_tagging.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/evmap.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/evport.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/evrpc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/evrpc.c:220:9: warning: Either the condition '(constructed_uri=event_mm_malloc_(constructed_uri_len))==NULL' is redundant or there is possible null pointer dereference: constructed_uri. [nullPointerRedundantCheck]
 memcpy(constructed_uri, EVRPC_URI_PREFIX, strlen(EVRPC_URI_PREFIX));
        ^
mk_core/deps/libevent/evrpc.c:217:57: note: Assuming that condition '(constructed_uri=event_mm_malloc_(constructed_uri_len))==NULL' is not redundant
 if ((constructed_uri = mm_malloc(constructed_uri_len)) == NULL)
                                                        ^
mk_core/deps/libevent/evrpc.c:220:9: note: Null pointer dereference
 memcpy(constructed_uri, EVRPC_URI_PREFIX, strlen(EVRPC_URI_PREFIX));
        ^
mk_core/deps/libevent/evrpc.c:222:2: warning: Either the condition '(constructed_uri=event_mm_malloc_(constructed_uri_len))==NULL' is redundant or there is possible null pointer dereference: constructed_uri. [nullPointerRedundantCheck]
 constructed_uri[constructed_uri_len - 1] = '\0';
 ^
mk_core/deps/libevent/evrpc.c:217:57: note: Assuming that condition '(constructed_uri=event_mm_malloc_(constructed_uri_len))==NULL' is not redundant
 if ((constructed_uri = mm_malloc(constructed_uri_len)) == NULL)
                                                        ^
mk_core/deps/libevent/evrpc.c:222:2: note: Null pointer dereference
 constructed_uri[constructed_uri_len - 1] = '\0';
 ^
mk_core/deps/libevent/evrpc.c:1061:14: warning:inconclusive: Possible null pointer dereference: meta [nullPointer]
  if (strcmp(meta->key, key) == 0) {
             ^
mk_core/deps/libevent/evrpc.c:1055:28: note: Assignment 'meta=NULL', assigned value is 0
 struct evrpc_meta *meta = NULL;
                           ^
mk_core/deps/libevent/evrpc.c:1057:21: note: Assuming condition is false
 if (req->hook_meta == NULL)
                    ^
mk_core/deps/libevent/evrpc.c:1061:14: note: Null pointer dereference
  if (strcmp(meta->key, key) == 0) {
             ^
mk_core/deps/libevent/evrpc.c:221:25: warning: Either the condition '(constructed_uri=event_mm_malloc_(constructed_uri_len))==NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
 memcpy(constructed_uri + strlen(EVRPC_URI_PREFIX), uri, strlen(uri));
                        ^
mk_core/deps/libevent/evrpc.c:217:57: note: Assuming that condition '(constructed_uri=event_mm_malloc_(constructed_uri_len))==NULL' is not redundant
 if ((constructed_uri = mm_malloc(constructed_uri_len)) == NULL)
                                                        ^
mk_core/deps/libevent/evrpc.c:221:25: note: Null pointer addition
 memcpy(constructed_uri + strlen(EVRPC_URI_PREFIX), uri, strlen(uri));
                        ^
mk_core/deps/libevent/evrpc.c:717:38: style:inconclusive: Function 'evrpc_schedule_request_closure' argument 1 names different: declaration 'ctx' definition 'arg'. [funcArgNamesDifferent]
evrpc_schedule_request_closure(void *arg, enum EVRPC_HOOK_RESULT hook_res)
                                     ^
mk_core/deps/libevent/evrpc.c:652:50: note: Function 'evrpc_schedule_request_closure' argument 1 names different: declaration 'ctx' definition 'arg'.
static void evrpc_schedule_request_closure(void *ctx, enum EVRPC_HOOK_RESULT);
                                                 ^
mk_core/deps/libevent/evrpc.c:717:38: note: Function 'evrpc_schedule_request_closure' argument 1 names different: declaration 'ctx' definition 'arg'.
evrpc_schedule_request_closure(void *arg, enum EVRPC_HOOK_RESULT hook_res)
                                     ^
mk_core/deps/libevent/evrpc.c:220:9: warning: Either the condition '(constructed_uri=malloc(constructed_uri_len))==NULL' is redundant or there is possible null pointer dereference: constructed_uri. [nullPointerRedundantCheck]
 memcpy(constructed_uri, EVRPC_URI_PREFIX, strlen(EVRPC_URI_PREFIX));
        ^
mk_core/deps/libevent/evrpc.c:217:57: note: Assuming that condition '(constructed_uri=malloc(constructed_uri_len))==NULL' is not redundant
 if ((constructed_uri = mm_malloc(constructed_uri_len)) == NULL)
                                                        ^
mk_core/deps/libevent/evrpc.c:220:9: note: Null pointer dereference
 memcpy(constructed_uri, EVRPC_URI_PREFIX, strlen(EVRPC_URI_PREFIX));
        ^
mk_core/deps/libevent/evrpc.c:222:2: warning: Either the condition '(constructed_uri=malloc(constructed_uri_len))==NULL' is redundant or there is possible null pointer dereference: constructed_uri. [nullPointerRedundantCheck]
 constructed_uri[constructed_uri_len - 1] = '\0';
 ^
mk_core/deps/libevent/evrpc.c:217:57: note: Assuming that condition '(constructed_uri=malloc(constructed_uri_len))==NULL' is not redundant
 if ((constructed_uri = mm_malloc(constructed_uri_len)) == NULL)
                                                        ^
mk_core/deps/libevent/evrpc.c:222:2: note: Null pointer dereference
 constructed_uri[constructed_uri_len - 1] = '\0';
 ^
mk_core/deps/libevent/evrpc.c:221:25: warning: Either the condition '(constructed_uri=malloc(constructed_uri_len))==NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
 memcpy(constructed_uri + strlen(EVRPC_URI_PREFIX), uri, strlen(uri));
                        ^
mk_core/deps/libevent/evrpc.c:217:57: note: Assuming that condition '(constructed_uri=malloc(constructed_uri_len))==NULL' is not redundant
 if ((constructed_uri = mm_malloc(constructed_uri_len)) == NULL)
                                                        ^
mk_core/deps/libevent/evrpc.c:221:25: note: Null pointer addition
 memcpy(constructed_uri + strlen(EVRPC_URI_PREFIX), uri, strlen(uri));
                        ^
mk_core/deps/libevent/evrpc.c:102:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(r == 0);
^
mk_core/deps/libevent/evrpc.c:110:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(r);
^
mk_core/deps/libevent/evrpc.c:114:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(r);
^
mk_core/deps/libevent/evrpc.c:136:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(hook_type == EVRPC_INPUT || hook_type == EVRPC_OUTPUT);
^
mk_core/deps/libevent/evrpc.c:140:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(hook != NULL);
^
mk_core/deps/libevent/evrpc.c:181:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(hook_type == EVRPC_INPUT || hook_type == EVRPC_OUTPUT);
^
mk_core/deps/libevent/evrpc.c:219:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      __func__, uri);
^
mk_core/deps/libevent/evrpc.c:271:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(r == 0);
^
mk_core/deps/libevent/evrpc.c:322:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   EVUTIL_ASSERT(hook_res == EVRPC_TERMINATE ||
^
mk_core/deps/libevent/evrpc.c:344:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(rpc_state);
^
mk_core/deps/libevent/evrpc.c:384:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(rpc_state != NULL);
^
mk_core/deps/libevent/evrpc.c:408:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(rpc_state);
^
mk_core/deps/libevent/evrpc.c:445:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   EVUTIL_ASSERT(hook_res == EVRPC_TERMINATE ||
^
mk_core/deps/libevent/evrpc.c:477:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(rpc_state);
^
mk_core/deps/libevent/evrpc.c:562:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(r);
^
mk_core/deps/libevent/evrpc.c:567:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(r);
^
mk_core/deps/libevent/evrpc.c:582:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(connection->http_server == NULL);
^
mk_core/deps/libevent/evrpc.c:699:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   EVUTIL_ASSERT(hook_res == EVRPC_TERMINATE ||
^
mk_core/deps/libevent/evrpc.c:807:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(TAILQ_FIRST(&pool->connections) != NULL);
^
mk_core/deps/libevent/evrpc.c:901:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   EVUTIL_ASSERT(hook_res == EVRPC_TERMINATE ||
^
mk_core/deps/libevent/evrpc.c:974:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(evcon != NULL);
^
mk_core/deps/libevent/evrpc.c:987:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(meta_data != NULL);
^
mk_core/deps/libevent/evrpc.c:1002:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(ctx != NULL);
^
mk_core/deps/libevent/evrpc.c:1040:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(meta != NULL);
^
mk_core/deps/libevent/evrpc.c:1042:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(meta->key != NULL);
^
mk_core/deps/libevent/evrpc.c:1045:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(meta->data != NULL);
^
mk_core/deps/libevent/evthread.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/evthread.c:345:36: style:inconclusive: Function 'evthread_is_debug_lock_held_' argument 1 names different: declaration 'lock' definition 'lock_'. [funcArgNamesDifferent]
evthread_is_debug_lock_held_(void *lock_)
                                   ^
mk_core/deps/libevent/evthread-internal.h:358:40: note: Function 'evthread_is_debug_lock_held_' argument 1 names different: declaration 'lock' definition 'lock_'.
int evthread_is_debug_lock_held_(void *lock);
                                       ^
mk_core/deps/libevent/evthread.c:345:36: note: Function 'evthread_is_debug_lock_held_' argument 1 names different: declaration 'lock' definition 'lock_'.
evthread_is_debug_lock_held_(void *lock_)
                                   ^
mk_core/deps/libevent/evthread.c:359:37: style:inconclusive: Function 'evthread_debug_get_real_lock_' argument 1 names different: declaration 'lock' definition 'lock_'. [funcArgNamesDifferent]
evthread_debug_get_real_lock_(void *lock_)
                                    ^
mk_core/deps/libevent/evthread-internal.h:359:43: note: Function 'evthread_debug_get_real_lock_' argument 1 names different: declaration 'lock' definition 'lock_'.
void *evthread_debug_get_real_lock_(void *lock);
                                          ^
mk_core/deps/libevent/evthread.c:359:37: note: Function 'evthread_debug_get_real_lock_' argument 1 names different: declaration 'lock' definition 'lock_'.
evthread_debug_get_real_lock_(void *lock_)
                                    ^
mk_core/deps/libevent/evthread.c:220:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(lock->count == 0);
^
mk_core/deps/libevent/evthread.c:221:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(locktype == lock->locktype);
^
mk_core/deps/libevent/evthread.c:222:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(DEBUG_LOCK_SIG == lock->signature);
^
mk_core/deps/libevent/evthread.c:236:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(DEBUG_LOCK_SIG == lock->signature);
^
mk_core/deps/libevent/evthread.c:239:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(lock->count == 1);
^
mk_core/deps/libevent/evthread.c:244:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   EVUTIL_ASSERT(lock->held_by == me);
^
mk_core/deps/libevent/evthread.c:255:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(mode & (EVTHREAD_READ|EVTHREAD_WRITE));
^
mk_core/deps/libevent/evthread.c:257:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT((mode & (EVTHREAD_READ|EVTHREAD_WRITE)) == 0);
^
mk_core/deps/libevent/evthread.c:269:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(DEBUG_LOCK_SIG == lock->signature);
^
mk_core/deps/libevent/evthread.c:271:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(mode & (EVTHREAD_READ|EVTHREAD_WRITE));
^
mk_core/deps/libevent/evthread.c:273:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT((mode & (EVTHREAD_READ|EVTHREAD_WRITE)) == 0);
^
mk_core/deps/libevent/evthread.c:277:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(lock->held_by == me);
^
mk_core/deps/libevent/evthread.c:282:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(lock->count >= 0);
^
mk_core/deps/libevent/evthread.c:301:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(lock);
^
mk_core/deps/libevent/evthread.c:302:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVUTIL_ASSERT(DEBUG_LOCK_SIG == lock->signature);
^
mk_core/deps/libevent/evthread.c:303:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 EVLOCK_ASSERT_LOCKED(lock_);
^
mk_core/deps/libevent/evthread.c:376:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(lock_ == NULL);
^
mk_core/deps/libevent/evthread.c:381:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(lock_ != NULL);
^
mk_core/deps/libevent/evthread.c:400:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(lock_ == NULL);
^
mk_core/deps/libevent/evthread.c:405:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(enable_locks &&
^
mk_core/deps/libevent/evthread.c:407:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  EVUTIL_ASSERT(lock->locktype == locktype);
^
mk_core/deps/libevent/evthread_pthread.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/evthread_win32.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/evutil.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 73 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/evutil.c:2393:22: style: Condition 'evutil_issetugid()' is always false [knownConditionTrueFalse]
 if (evutil_issetugid())
                     ^
mk_core/deps/libevent/evutil.c:1147:37: style: The scope of the variable 'ai' can be reduced. [variableScope]
 struct evutil_addrinfo *res=NULL, *ai;
                                    ^
mk_core/deps/libevent/evutil.c:2322:7: style: The scope of the variable 'c1' can be reduced. [variableScope]
 char c1, c2;
      ^
mk_core/deps/libevent/evutil.c:2322:11: style: The scope of the variable 'c2' can be reduced. [variableScope]
 char c1, c2;
          ^
mk_core/deps/libevent/evutil.c:2336:7: style: The scope of the variable 'c1' can be reduced. [variableScope]
 char c1, c2;
      ^
mk_core/deps/libevent/evutil.c:2336:11: style: The scope of the variable 'c2' can be reduced. [variableScope]
 char c1, c2;
          ^
mk_core/deps/libevent/evutil.c:1712:1: style:inconclusive: Function 'cached_sock_errs_map_HT_GROW' argument 1 names different: declaration 'ht' definition 'head'. [funcArgNamesDifferent]
HT_GENERATE(cached_sock_errs_map,
^
mk_core/deps/libevent/evutil.c:1706:1: note: Function 'cached_sock_errs_map_HT_GROW' argument 1 names different: declaration 'ht' definition 'head'.
HT_PROTOTYPE(cached_sock_errs_map,
^
mk_core/deps/libevent/evutil.c:1712:1: note: Function 'cached_sock_errs_map_HT_GROW' argument 1 names different: declaration 'ht' definition 'head'.
HT_GENERATE(cached_sock_errs_map,
^
mk_core/deps/libevent/evutil.c:1712:1: style:inconclusive: Function 'cached_sock_errs_map_HT_GROW' argument 2 names different: declaration 'min_capacity' definition 'size'. [funcArgNamesDifferent]
HT_GENERATE(cached_sock_errs_map,
^
mk_core/deps/libevent/evutil.c:1706:1: note: Function 'cached_sock_errs_map_HT_GROW' argument 2 names different: declaration 'min_capacity' definition 'size'.
HT_PROTOTYPE(cached_sock_errs_map,
^
mk_core/deps/libevent/evutil.c:1712:1: note: Function 'cached_sock_errs_map_HT_GROW' argument 2 names different: declaration 'min_capacity' definition 'size'.
HT_GENERATE(cached_sock_errs_map,
^
mk_core/deps/libevent/evutil.c:1712:1: style:inconclusive: Function 'cached_sock_errs_map_HT_CLEAR' argument 1 names different: declaration 'ht' definition 'head'. [funcArgNamesDifferent]
HT_GENERATE(cached_sock_errs_map,
^
mk_core/deps/libevent/evutil.c:1706:1: note: Function 'cached_sock_errs_map_HT_CLEAR' argument 1 names different: declaration 'ht' definition 'head'.
HT_PROTOTYPE(cached_sock_errs_map,
^
mk_core/deps/libevent/evutil.c:1712:1: note: Function 'cached_sock_errs_map_HT_CLEAR' argument 1 names different: declaration 'ht' definition 'head'.
HT_GENERATE(cached_sock_errs_map,
^
mk_core/deps/libevent/evutil.c:1712:1: style:inconclusive: Function 'cached_sock_errs_map_HT_REP_IS_BAD_' argument 1 names different: declaration 'ht' definition 'head'. [funcArgNamesDifferent]
HT_GENERATE(cached_sock_errs_map,
^
mk_core/deps/libevent/evutil.c:1706:1: note: Function 'cached_sock_errs_map_HT_REP_IS_BAD_' argument 1 names different: declaration 'ht' definition 'head'.
HT_PROTOTYPE(cached_sock_errs_map,
^
mk_core/deps/libevent/evutil.c:1712:1: note: Function 'cached_sock_errs_map_HT_REP_IS_BAD_' argument 1 names different: declaration 'ht' definition 'head'.
HT_GENERATE(cached_sock_errs_map,
^
mk_core/deps/libevent/evutil.c:2391:28: style:inconclusive: Function 'evutil_getenv_' argument 1 names different: declaration 'name' definition 'varname'. [funcArgNamesDifferent]
evutil_getenv_(const char *varname)
                           ^
mk_core/deps/libevent/util-internal.h:273:40: note: Function 'evutil_getenv_' argument 1 names different: declaration 'name' definition 'varname'.
const char *evutil_getenv_(const char *name);
                                       ^
mk_core/deps/libevent/evutil.c:2391:28: note: Function 'evutil_getenv_' argument 1 names different: declaration 'name' definition 'varname'.
evutil_getenv_(const char *varname)
                           ^
mk_core/deps/libevent/evutil.c:2417:48: style:inconclusive: Function 'evutil_weakrand_' argument 1 names different: declaration 'seed' definition 'state'. [funcArgNamesDifferent]
evutil_weakrand_(struct evutil_weakrand_state *state)
                                               ^
mk_core/deps/libevent/util-internal.h:297:59: note: Function 'evutil_weakrand_' argument 1 names different: declaration 'seed' definition 'state'.
ev_int32_t evutil_weakrand_(struct evutil_weakrand_state *seed);
                                                          ^
mk_core/deps/libevent/evutil.c:2417:48: note: Function 'evutil_weakrand_' argument 1 names different: declaration 'seed' definition 'state'.
evutil_weakrand_(struct evutil_weakrand_state *state)
                                               ^
mk_core/deps/libevent/evutil.c:2432:54: style:inconclusive: Function 'evutil_weakrand_range_' argument 1 names different: declaration 'seed' definition 'state'. [funcArgNamesDifferent]
evutil_weakrand_range_(struct evutil_weakrand_state *state, ev_int32_t top)
                                                     ^
mk_core/deps/libevent/util-internal.h:301:65: note: Function 'evutil_weakrand_range_' argument 1 names different: declaration 'seed' definition 'state'.
ev_int32_t evutil_weakrand_range_(struct evutil_weakrand_state *seed, ev_int32_t top);
                                                                ^
mk_core/deps/libevent/evutil.c:2432:54: note: Function 'evutil_weakrand_range_' argument 1 names different: declaration 'seed' definition 'state'.
evutil_weakrand_range_(struct evutil_weakrand_state *state, ev_int32_t top)
                                                     ^
mk_core/deps/libevent/evutil.c:2460:53: style:inconclusive: Function 'evutil_sockaddr_is_loopback_' argument 1 names different: declaration 'sa' definition 'addr'. [funcArgNamesDifferent]
evutil_sockaddr_is_loopback_(const struct sockaddr *addr)
                                                    ^
mk_core/deps/libevent/util-internal.h:382:57: note: Function 'evutil_sockaddr_is_loopback_' argument 1 names different: declaration 'sa' definition 'addr'.
int evutil_sockaddr_is_loopback_(const struct sockaddr *sa);
                                                        ^
mk_core/deps/libevent/evutil.c:2460:53: note: Function 'evutil_sockaddr_is_loopback_' argument 1 names different: declaration 'sa' definition 'addr'.
evutil_sockaddr_is_loopback_(const struct sockaddr *addr)
                                                    ^
mk_core/deps/libevent/evutil.c:1886:14: style: Variable 'curGapPos' is assigned a value that is never used. [unreadVariable]
   curGapPos = -1, curGapLen = 0;
             ^
mk_core/deps/libevent/evutil.c:1886:30: style: Variable 'curGapLen' is assigned a value that is never used. [unreadVariable]
   curGapPos = -1, curGapLen = 0;
                             ^
mk_core/deps/libevent/evutil.c:741:29: style: Condition 'evutil_check_ifaddrs()==0' is always false [knownConditionTrueFalse]
 if (evutil_check_ifaddrs() == 0) {
                            ^
mk_core/deps/libevent/evutil_rand.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/evutil_time.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 32 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/evutil_time.c:188:44: error: syntax error: <) [syntaxError]
 if (evutil_timercmp(tv, &base->last_time, <)) {
                                           ^
mk_core/deps/libevent/evutil_time.c:286:0: information: Skipping configuration 'CLOCK_MONOTONIC;EVENT__HAVE_CLOCK_GETTIME' since the value of 'CLOCK_MONOTONIC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (!fallback && clock_gettime(CLOCK_MONOTONIC, &ts) == 0) {
^
mk_core/deps/libevent/evutil_time.c:287:0: information: Skipping configuration 'CLOCK_MONOTONIC;EVENT__HAVE_CLOCK_GETTIME' since the value of 'CLOCK_MONOTONIC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  base->monotonic_clock = CLOCK_MONOTONIC;
^
mk_core/deps/libevent/evutil_time.c:291:0: information: Skipping configuration 'CLOCK_MONOTONIC;EVENT__HAVE_CLOCK_GETTIME' since the value of 'CLOCK_MONOTONIC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (CLOCK_MONOTONIC < 0) {
^
mk_core/deps/libevent/evutil_time.c:272:0: information: Skipping configuration 'CLOCK_MONOTONIC_COARSE;HAVE_POSIX_MONOTONIC' since the value of 'CLOCK_MONOTONIC_COARSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (CLOCK_MONOTONIC_COARSE < 0) {
^
mk_core/deps/libevent/evutil_time.c:280:0: information: Skipping configuration 'CLOCK_MONOTONIC_COARSE;HAVE_POSIX_MONOTONIC' since the value of 'CLOCK_MONOTONIC_COARSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if (clock_gettime(CLOCK_MONOTONIC_COARSE, &ts) == 0) {
^
mk_core/deps/libevent/evutil_time.c:281:0: information: Skipping configuration 'CLOCK_MONOTONIC_COARSE;HAVE_POSIX_MONOTONIC' since the value of 'CLOCK_MONOTONIC_COARSE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   base->monotonic_clock = CLOCK_MONOTONIC_COARSE;
^
mk_core/deps/libevent/http.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 38 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/http.c:3083:18: warning: Invalid test for overflow 'uri+slen<uri'; pointer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false. [invalidTestForOverflow]
  if (uri + slen < uri) {
                 ^
mk_core/deps/libevent/http.c:3127:7: style: The scope of the variable 'c' can be reduced. [variableScope]
 char c;
      ^
mk_core/deps/libevent/http.c:3310:7: style: The scope of the variable 'c' can be reduced. [variableScope]
 char c;
      ^
mk_core/deps/libevent/http.c:4090:10: style: The scope of the variable 'len' can be reduced. [variableScope]
  size_t len;
         ^
mk_core/deps/libevent/http.c:3125:49: style:inconclusive: Function 'evhttp_decode_uri_internal' argument 4 names different: declaration 'decode_plus' definition 'decode_plus_ctl'. [funcArgNamesDifferent]
 const char *uri, size_t length, char *ret, int decode_plus_ctl)
                                                ^
mk_core/deps/libevent/http-internal.h:203:20: note: Function 'evhttp_decode_uri_internal' argument 4 names different: declaration 'decode_plus' definition 'decode_plus_ctl'.
    char *ret, int decode_plus);
                   ^
mk_core/deps/libevent/http.c:3125:49: note: Function 'evhttp_decode_uri_internal' argument 4 names different: declaration 'decode_plus' definition 'decode_plus_ctl'.
 const char *uri, size_t length, char *ret, int decode_plus_ctl)
                                                ^
mk_core/deps/libevent/http.c:1342:2: warning: Conversion of string literal "drain output" to bool always evaluates to true. [incorrectStringBooleanError]
 EVUTIL_ASSERT(!err && "drain output");
 ^
mk_core/deps/libevent/http.c:1345:2: warning: Conversion of string literal "drain input" to bool always evaluates to true. [incorrectStringBooleanError]
 EVUTIL_ASSERT(!err && "drain input");
 ^
mk_core/deps/libevent/http.c:4296:0: information: Skipping configuration 'EAI_SYSTEM;EVENT__HAVE_GETNAMEINFO' since the value of 'EAI_SYSTEM' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if (ni_result == EAI_SYSTEM)
^
mk_core/deps/libevent/kqueue.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/listener.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/log.c:199:9: style: The scope of the variable 'len' can be reduced. [variableScope]
 size_t len;
        ^
mk_core/deps/libevent/poll.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 29 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/sample/http-connect.c:40:7: style: The scope of the variable 'buffer' can be reduced. [variableScope]
 char buffer[URL_MAX];
      ^
mk_core/deps/libevent/sample/http-server.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/sample/https-client.c:174:10: style: Condition 'res==MatchFound' is always false [knownConditionTrueFalse]
 if (res == MatchFound) {
         ^
mk_core/deps/libevent/sample/https-client.c:129:33: note: Assignment 'res=Error', assigned value is 4
 HostnameValidationResult res = Error;
                                ^
mk_core/deps/libevent/sample/https-client.c:138:6: note: Assuming condition is false
 if (ignore_cert) {
     ^
mk_core/deps/libevent/sample/https-client.c:174:10: note: Condition 'res==MatchFound' is always false
 if (res == MatchFound) {
         ^
mk_core/deps/libevent/sample/https-client.c:266:7: style: Local variable 'err' shadows outer function [shadowFunction]
  int err;
      ^
mk_core/deps/libevent/sample/https-client.c:105:1: note: Shadowed declaration
err(const char *msg)
^
mk_core/deps/libevent/sample/https-client.c:266:7: note: Shadow variable
  int err;
      ^
mk_core/deps/libevent/select.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/signal.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 28 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/test/bench_http.c:166:7: style: Local variable 'i' shadows outer variable [shadowVariable]
  int i = 0;
      ^
mk_core/deps/libevent/test/bench_http.c:90:6: note: Shadowed declaration
 int i;
     ^
mk_core/deps/libevent/test/bench_http.c:166:7: note: Shadow variable
  int i = 0;
      ^
mk_core/deps/libevent/test/regress.c:2820:2: error: syntax error [syntaxError]
 tt_assert(evutil_timercmp(&tv2, &now, >));
 ^
mk_core/deps/libevent/test/regress_buffer.c:263:4: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
   tt_int_op(r, ==, 1);
   ^
mk_core/deps/libevent/test/regress_buffer.c:263:4: note: print_ is assigned
   tt_int_op(r, ==, 1);
   ^
mk_core/deps/libevent/test/regress_buffer.c:263:4: note: print_ is overwritten
   tt_int_op(r, ==, 1);
   ^
mk_core/deps/libevent/test/regress_buffer.c:274:4: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
   tt_int_op(evbuffer_commit_space(evb, v, 1), ==, 0);
   ^
mk_core/deps/libevent/test/regress_buffer.c:274:4: note: print_ is assigned
   tt_int_op(evbuffer_commit_space(evb, v, 1), ==, 0);
   ^
mk_core/deps/libevent/test/regress_buffer.c:274:4: note: print_ is overwritten
   tt_int_op(evbuffer_commit_space(evb, v, 1), ==, 0);
   ^
mk_core/deps/libevent/test/regress_buffer.c:347:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(src), ==, 9);
 ^
mk_core/deps/libevent/test/regress_buffer.c:347:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(src), ==, 9);
 ^
mk_core/deps/libevent/test/regress_buffer.c:347:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(src), ==, 9);
 ^
mk_core/deps/libevent/test/regress_buffer.c:348:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(dst), ==, 9);
 ^
mk_core/deps/libevent/test/regress_buffer.c:348:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(dst), ==, 9);
 ^
mk_core/deps/libevent/test/regress_buffer.c:348:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(dst), ==, 9);
 ^
mk_core/deps/libevent/test/regress_buffer.c:358:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(src), ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:358:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(src), ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:358:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(src), ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:359:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(dst), ==, 17);
 ^
mk_core/deps/libevent/test/regress_buffer.c:359:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(dst), ==, 17);
 ^
mk_core/deps/libevent/test/regress_buffer.c:359:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(dst), ==, 17);
 ^
mk_core/deps/libevent/test/regress_buffer.c:388:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(src), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:388:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(src), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:388:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(src), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:389:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(dst), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:389:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(dst), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:389:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(dst), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:399:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(src), ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:399:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(src), ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:399:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(src), ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:400:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(dst), ==, 11);
 ^
mk_core/deps/libevent/test/regress_buffer.c:400:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(dst), ==, 11);
 ^
mk_core/deps/libevent/test/regress_buffer.c:400:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(dst), ==, 11);
 ^
mk_core/deps/libevent/test/regress_buffer.c:427:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(src), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:427:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(src), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:427:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(src), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:428:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(dst), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:428:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(dst), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:428:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(dst), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:456:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(src), ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:456:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(src), ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:456:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(src), ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:457:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(dst), ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:457:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(dst), ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:457:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(dst), ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:480:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:480:2: note: print_ is assigned
 tt_int_op(n, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:480:2: note: print_ is overwritten
 tt_int_op(n, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:481:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(buf), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:481:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(buf), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:481:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(buf), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:483:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(v[0].iov_len, >=, 1024);
 ^
mk_core/deps/libevent/test/regress_buffer.c:483:2: note: print_ is assigned
 tt_int_op(v[0].iov_len, >=, 1024);
 ^
mk_core/deps/libevent/test/regress_buffer.c:483:2: note: print_ is overwritten
 tt_int_op(v[0].iov_len, >=, 1024);
 ^
mk_core/deps/libevent/test/regress_buffer.c:489:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, evbuffer_commit_space(buf, v, 1));
 ^
mk_core/deps/libevent/test/regress_buffer.c:489:2: note: print_ is assigned
 tt_int_op(0, ==, evbuffer_commit_space(buf, v, 1));
 ^
mk_core/deps/libevent/test/regress_buffer.c:489:2: note: print_ is overwritten
 tt_int_op(0, ==, evbuffer_commit_space(buf, v, 1));
 ^
mk_core/deps/libevent/test/regress_buffer.c:490:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(buf), ==, 512);
 ^
mk_core/deps/libevent/test/regress_buffer.c:490:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(buf), ==, 512);
 ^
mk_core/deps/libevent/test/regress_buffer.c:490:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(buf), ==, 512);
 ^
mk_core/deps/libevent/test/regress_buffer.c:496:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:496:2: note: print_ is assigned
 tt_int_op(n, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:496:2: note: print_ is overwritten
 tt_int_op(n, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:498:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(remaining, ==, v[0].iov_len);
 ^
mk_core/deps/libevent/test/regress_buffer.c:498:2: note: print_ is assigned
 tt_int_op(remaining, ==, v[0].iov_len);
 ^
mk_core/deps/libevent/test/regress_buffer.c:498:2: note: print_ is overwritten
 tt_int_op(remaining, ==, v[0].iov_len);
 ^
mk_core/deps/libevent/test/regress_buffer.c:501:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, evbuffer_commit_space(buf, v, 1));
 ^
mk_core/deps/libevent/test/regress_buffer.c:501:2: note: print_ is assigned
 tt_int_op(0, ==, evbuffer_commit_space(buf, v, 1));
 ^
mk_core/deps/libevent/test/regress_buffer.c:501:2: note: print_ is overwritten
 tt_int_op(0, ==, evbuffer_commit_space(buf, v, 1));
 ^
mk_core/deps/libevent/test/regress_buffer.c:502:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(buf), ==, 520);
 ^
mk_core/deps/libevent/test/regress_buffer.c:502:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(buf), ==, 520);
 ^
mk_core/deps/libevent/test/regress_buffer.c:502:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(buf), ==, 520);
 ^
mk_core/deps/libevent/test/regress_buffer.c:509:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:509:2: note: print_ is assigned
 tt_int_op(n, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:509:2: note: print_ is overwritten
 tt_int_op(n, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:511:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(remaining, ==, v[0].iov_len);
 ^
mk_core/deps/libevent/test/regress_buffer.c:511:2: note: print_ is assigned
 tt_int_op(remaining, ==, v[0].iov_len);
 ^
mk_core/deps/libevent/test/regress_buffer.c:511:2: note: print_ is overwritten
 tt_int_op(remaining, ==, v[0].iov_len);
 ^
mk_core/deps/libevent/test/regress_buffer.c:517:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, evbuffer_commit_space(buf, v, 1));
 ^
mk_core/deps/libevent/test/regress_buffer.c:517:2: note: print_ is assigned
 tt_int_op(0, ==, evbuffer_commit_space(buf, v, 1));
 ^
mk_core/deps/libevent/test/regress_buffer.c:517:2: note: print_ is overwritten
 tt_int_op(0, ==, evbuffer_commit_space(buf, v, 1));
 ^
mk_core/deps/libevent/test/regress_buffer.c:518:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(buf), ==, 521);
 ^
mk_core/deps/libevent/test/regress_buffer.c:518:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(buf), ==, 521);
 ^
mk_core/deps/libevent/test/regress_buffer.c:518:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(buf), ==, 521);
 ^
mk_core/deps/libevent/test/regress_buffer.c:526:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:526:2: note: print_ is assigned
 tt_int_op(n, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:526:2: note: print_ is overwritten
 tt_int_op(n, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:528:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(remaining, ==, v[0].iov_len);
 ^
mk_core/deps/libevent/test/regress_buffer.c:528:2: note: print_ is assigned
 tt_int_op(remaining, ==, v[0].iov_len);
 ^
mk_core/deps/libevent/test/regress_buffer.c:528:2: note: print_ is overwritten
 tt_int_op(remaining, ==, v[0].iov_len);
 ^
mk_core/deps/libevent/test/regress_buffer.c:535:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, evbuffer_commit_space(buf, v, 2));
 ^
mk_core/deps/libevent/test/regress_buffer.c:535:2: note: print_ is assigned
 tt_int_op(0, ==, evbuffer_commit_space(buf, v, 2));
 ^
mk_core/deps/libevent/test/regress_buffer.c:535:2: note: print_ is overwritten
 tt_int_op(0, ==, evbuffer_commit_space(buf, v, 2));
 ^
mk_core/deps/libevent/test/regress_buffer.c:536:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(buf), ==, 981);
 ^
mk_core/deps/libevent/test/regress_buffer.c:536:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(buf), ==, 981);
 ^
mk_core/deps/libevent/test/regress_buffer.c:536:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(buf), ==, 981);
 ^
mk_core/deps/libevent/test/regress_buffer.c:542:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:542:2: note: print_ is assigned
 tt_int_op(n, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:542:2: note: print_ is overwritten
 tt_int_op(n, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:543:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(v[0].iov_len, ==, 921);
 ^
mk_core/deps/libevent/test/regress_buffer.c:543:2: note: print_ is assigned
 tt_int_op(v[0].iov_len, ==, 921);
 ^
mk_core/deps/libevent/test/regress_buffer.c:543:2: note: print_ is overwritten
 tt_int_op(v[0].iov_len, ==, 921);
 ^
mk_core/deps/libevent/test/regress_buffer.c:544:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(v[1].iov_len, ==, 60);
 ^
mk_core/deps/libevent/test/regress_buffer.c:544:2: note: print_ is assigned
 tt_int_op(v[1].iov_len, ==, 60);
 ^
mk_core/deps/libevent/test/regress_buffer.c:544:2: note: print_ is overwritten
 tt_int_op(v[1].iov_len, ==, 60);
 ^
mk_core/deps/libevent/test/regress_buffer.c:548:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(cp[i], ==, 'X');
  ^
mk_core/deps/libevent/test/regress_buffer.c:548:3: note: print_ is assigned
  tt_int_op(cp[i], ==, 'X');
  ^
mk_core/deps/libevent/test/regress_buffer.c:548:3: note: print_ is overwritten
  tt_int_op(cp[i], ==, 'X');
  ^
mk_core/deps/libevent/test/regress_buffer.c:550:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(cp[i], ==, 'Y');
  ^
mk_core/deps/libevent/test/regress_buffer.c:550:3: note: print_ is assigned
  tt_int_op(cp[i], ==, 'Y');
  ^
mk_core/deps/libevent/test/regress_buffer.c:550:3: note: print_ is overwritten
  tt_int_op(cp[i], ==, 'Y');
  ^
mk_core/deps/libevent/test/regress_buffer.c:552:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(cp[i], ==, 'Z');
  ^
mk_core/deps/libevent/test/regress_buffer.c:552:3: note: print_ is assigned
  tt_int_op(cp[i], ==, 'Z');
  ^
mk_core/deps/libevent/test/regress_buffer.c:552:3: note: print_ is overwritten
  tt_int_op(cp[i], ==, 'Z');
  ^
mk_core/deps/libevent/test/regress_buffer.c:554:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(cp[i], ==, 'W');
  ^
mk_core/deps/libevent/test/regress_buffer.c:554:3: note: print_ is assigned
  tt_int_op(cp[i], ==, 'W');
  ^
mk_core/deps/libevent/test/regress_buffer.c:554:3: note: print_ is overwritten
  tt_int_op(cp[i], ==, 'W');
  ^
mk_core/deps/libevent/test/regress_buffer.c:558:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(cp[i], ==, 'x');
  ^
mk_core/deps/libevent/test/regress_buffer.c:558:3: note: print_ is assigned
  tt_int_op(cp[i], ==, 'x');
  ^
mk_core/deps/libevent/test/regress_buffer.c:558:3: note: print_ is overwritten
  tt_int_op(cp[i], ==, 'x');
  ^
mk_core/deps/libevent/test/regress_buffer.c:580:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:580:2: note: print_ is assigned
 tt_int_op(n, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:580:2: note: print_ is overwritten
 tt_int_op(n, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:588:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(n, ==, 0);
  ^
mk_core/deps/libevent/test/regress_buffer.c:588:3: note: print_ is assigned
  tt_int_op(n, ==, 0);
  ^
mk_core/deps/libevent/test/regress_buffer.c:588:3: note: print_ is overwritten
  tt_int_op(n, ==, 0);
  ^
mk_core/deps/libevent/test/regress_buffer.c:592:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(n, ==, 0);
  ^
mk_core/deps/libevent/test/regress_buffer.c:592:3: note: print_ is assigned
  tt_int_op(n, ==, 0);
  ^
mk_core/deps/libevent/test/regress_buffer.c:592:3: note: print_ is overwritten
  tt_int_op(n, ==, 0);
  ^
mk_core/deps/libevent/test/regress_buffer.c:594:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(n, ==, 1);
  ^
mk_core/deps/libevent/test/regress_buffer.c:594:3: note: print_ is assigned
  tt_int_op(n, ==, 1);
  ^
mk_core/deps/libevent/test/regress_buffer.c:594:3: note: print_ is overwritten
  tt_int_op(n, ==, 1);
  ^
mk_core/deps/libevent/test/regress_buffer.c:603:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:603:2: note: print_ is assigned
 tt_int_op(n, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:603:2: note: print_ is overwritten
 tt_int_op(n, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:605:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(sz, >=, v[0].iov_len+128);
 ^
mk_core/deps/libevent/test/regress_buffer.c:605:2: note: print_ is assigned
 tt_int_op(sz, >=, v[0].iov_len+128);
 ^
mk_core/deps/libevent/test/regress_buffer.c:605:2: note: print_ is overwritten
 tt_int_op(sz, >=, v[0].iov_len+128);
 ^
mk_core/deps/libevent/test/regress_buffer.c:617:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n, ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:617:2: note: print_ is assigned
 tt_int_op(n, ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:617:2: note: print_ is overwritten
 tt_int_op(n, ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:627:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(n, ==, 2);
  ^
mk_core/deps/libevent/test/regress_buffer.c:627:3: note: print_ is assigned
  tt_int_op(n, ==, 2);
  ^
mk_core/deps/libevent/test/regress_buffer.c:627:3: note: print_ is overwritten
  tt_int_op(n, ==, 2);
  ^
mk_core/deps/libevent/test/regress_buffer.c:630:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(n, ==, 1);
  ^
mk_core/deps/libevent/test/regress_buffer.c:630:3: note: print_ is assigned
  tt_int_op(n, ==, 1);
  ^
mk_core/deps/libevent/test/regress_buffer.c:630:3: note: print_ is overwritten
  tt_int_op(n, ==, 1);
  ^
mk_core/deps/libevent/test/regress_buffer.c:649:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_expand(buf, 20000), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:649:2: note: print_ is assigned
 tt_int_op(evbuffer_expand(buf, 20000), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:649:2: note: print_ is overwritten
 tt_int_op(evbuffer_expand(buf, 20000), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:665:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_expand(buf, 1024), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:665:2: note: print_ is assigned
 tt_int_op(evbuffer_expand(buf, 1024), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:665:2: note: print_ is overwritten
 tt_int_op(evbuffer_expand(buf, 1024), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:787:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_str_op(data, ==, "this is what we add as read-only memory.");
 ^
mk_core/deps/libevent/test/regress_buffer.c:787:2: note: print_ is assigned
 tt_str_op(data, ==, "this is what we add as read-only memory.");
 ^
mk_core/deps/libevent/test/regress_buffer.c:787:2: note: print_ is overwritten
 tt_str_op(data, ==, "this is what we add as read-only memory.");
 ^
mk_core/deps/libevent/test/regress_buffer.c:788:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(len, ==, strlen(data));
 ^
mk_core/deps/libevent/test/regress_buffer.c:788:2: note: print_ is assigned
 tt_int_op(len, ==, strlen(data));
 ^
mk_core/deps/libevent/test/regress_buffer.c:788:2: note: print_ is overwritten
 tt_int_op(len, ==, strlen(data));
 ^
mk_core/deps/libevent/test/regress_buffer.c:827:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(reference_cb_called, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:827:2: note: print_ is assigned
 tt_int_op(reference_cb_called, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:827:2: note: print_ is overwritten
 tt_int_op(reference_cb_called, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1090:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(addfile_test_total_written, ==, expect_len);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1090:2: note: print_ is assigned
 tt_int_op(addfile_test_total_written, ==, expect_len);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1090:2: note: print_ is overwritten
 tt_int_op(addfile_test_total_written, ==, expect_len);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1091:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(addfile_test_total_read, ==, expect_len);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1091:2: note: print_ is assigned
 tt_int_op(addfile_test_total_read, ==, expect_len);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1091:2: note: print_ is overwritten
 tt_int_op(addfile_test_total_read, ==, expect_len);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1146:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1146:2: note: print_ is assigned
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1146:2: note: print_ is overwritten
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1163:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(file_segment_cleanup_cb_called_count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1163:2: note: print_ is assigned
 tt_int_op(file_segment_cleanup_cb_called_count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1163:2: note: print_ is overwritten
 tt_int_op(file_segment_cleanup_cb_called_count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1167:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(file_segment_cleanup_cb_called_count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1167:2: note: print_ is assigned
 tt_int_op(file_segment_cleanup_cb_called_count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1167:2: note: print_ is overwritten
 tt_int_op(file_segment_cleanup_cb_called_count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1171:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(file_segment_cleanup_cb_called_count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1171:2: note: print_ is assigned
 tt_int_op(file_segment_cleanup_cb_called_count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1171:2: note: print_ is overwritten
 tt_int_op(file_segment_cleanup_cb_called_count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1223:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_uint_op(evbuffer_get_length(evb), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1223:2: note: print_ is assigned
 tt_uint_op(evbuffer_get_length(evb), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1223:2: note: print_ is overwritten
 tt_uint_op(evbuffer_get_length(evb), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1341:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(evb), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1341:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(evb), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1341:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(evb), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1363:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_ptr_op(cp, ==, NULL);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1363:2: note: print_ is assigned
 tt_ptr_op(cp, ==, NULL);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1363:2: note: print_ is overwritten
 tt_ptr_op(cp, ==, NULL);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1450:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ptr1.pos, ==, 8);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1450:2: note: print_ is assigned
 tt_int_op(ptr1.pos, ==, 8);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1450:2: note: print_ is overwritten
 tt_int_op(ptr1.pos, ==, 8);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1451:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(eol_len, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1451:2: note: print_ is assigned
 tt_int_op(eol_len, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1451:2: note: print_ is overwritten
 tt_int_op(eol_len, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1455:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ptr2.pos, ==, 8);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1455:2: note: print_ is assigned
 tt_int_op(ptr2.pos, ==, 8);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1455:2: note: print_ is overwritten
 tt_int_op(ptr2.pos, ==, 8);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1456:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(eol_len, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1456:2: note: print_ is assigned
 tt_int_op(eol_len, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1456:2: note: print_ is overwritten
 tt_int_op(eol_len, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1461:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ptr2.pos, ==, 9);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1461:2: note: print_ is assigned
 tt_int_op(ptr2.pos, ==, 9);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1461:2: note: print_ is overwritten
 tt_int_op(ptr2.pos, ==, 9);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1462:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(eol_len, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1462:2: note: print_ is assigned
 tt_int_op(eol_len, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1462:2: note: print_ is overwritten
 tt_int_op(eol_len, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1466:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ptr2.pos, ==, 10);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1466:2: note: print_ is assigned
 tt_int_op(ptr2.pos, ==, 10);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1466:2: note: print_ is overwritten
 tt_int_op(ptr2.pos, ==, 10);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1467:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(eol_len, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1467:2: note: print_ is assigned
 tt_int_op(eol_len, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1467:2: note: print_ is overwritten
 tt_int_op(eol_len, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1471:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ptr1.pos, ==, 9);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1471:2: note: print_ is assigned
 tt_int_op(ptr1.pos, ==, 9);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1471:2: note: print_ is overwritten
 tt_int_op(ptr1.pos, ==, 9);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1472:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(eol_len, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1472:2: note: print_ is assigned
 tt_int_op(eol_len, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1472:2: note: print_ is overwritten
 tt_int_op(eol_len, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1476:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ptr2.pos, ==, 9);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1476:2: note: print_ is assigned
 tt_int_op(ptr2.pos, ==, 9);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1476:2: note: print_ is overwritten
 tt_int_op(ptr2.pos, ==, 9);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1477:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(eol_len, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1477:2: note: print_ is assigned
 tt_int_op(eol_len, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1477:2: note: print_ is overwritten
 tt_int_op(eol_len, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1482:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ptr2.pos, ==, 11);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1482:2: note: print_ is assigned
 tt_int_op(ptr2.pos, ==, 11);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1482:2: note: print_ is overwritten
 tt_int_op(ptr2.pos, ==, 11);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1483:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(eol_len, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1483:2: note: print_ is assigned
 tt_int_op(eol_len, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1483:2: note: print_ is overwritten
 tt_int_op(eol_len, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1488:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ptr2.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1488:2: note: print_ is assigned
 tt_int_op(ptr2.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1488:2: note: print_ is overwritten
 tt_int_op(ptr2.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1489:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(eol_len, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1489:2: note: print_ is assigned
 tt_int_op(eol_len, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1489:2: note: print_ is overwritten
 tt_int_op(eol_len, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1523:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_uint_op(sum, ==, evbuffer_get_length(buf));
 ^
mk_core/deps/libevent/test/regress_buffer.c:1523:2: note: print_ is assigned
 tt_uint_op(sum, ==, evbuffer_get_length(buf));
 ^
mk_core/deps/libevent/test/regress_buffer.c:1523:2: note: print_ is overwritten
 tt_uint_op(sum, ==, evbuffer_get_length(buf));
 ^
mk_core/deps/libevent/test/regress_buffer.c:1595:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(buf), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1595:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(buf), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1595:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(buf), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1622:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(buf), ==, 12000);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1622:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(buf), ==, 12000);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1622:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(buf), ==, 12000);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1657:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1657:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1657:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1660:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1660:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1660:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1663:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1663:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1663:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1666:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1666:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1666:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1679:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, 11);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1679:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, 11);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1679:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, 11);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1681:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1681:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1681:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1685:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, 7);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1685:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, 7);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1685:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, 7);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1687:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, 8);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1687:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, 8);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1687:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, 8);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1689:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1689:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1689:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1693:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1693:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1693:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1697:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, 10);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1697:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, 10);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1697:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, 10);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1703:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1703:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1703:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1705:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1705:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1705:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1707:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1707:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1707:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1709:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1709:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1709:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1715:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, 11);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1715:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, 11);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1715:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, 11);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1718:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, 11);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1718:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, 11);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1718:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, 11);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1721:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1721:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1721:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1724:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1724:2: note: print_ is assigned
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1724:2: note: print_ is overwritten
 tt_int_op(pos.pos, ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1788:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_str_op((const char *) evbuffer_pullup(buf_out1, -1), ==,
 ^
mk_core/deps/libevent/test/regress_buffer.c:1788:2: note: print_ is assigned
 tt_str_op((const char *) evbuffer_pullup(buf_out1, -1), ==,
 ^
mk_core/deps/libevent/test/regress_buffer.c:1788:2: note: print_ is overwritten
 tt_str_op((const char *) evbuffer_pullup(buf_out1, -1), ==,
 ^
mk_core/deps/libevent/test/regress_buffer.c:1790:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_str_op((const char *) evbuffer_pullup(buf_out2, -1), ==,
 ^
mk_core/deps/libevent/test/regress_buffer.c:1790:2: note: print_ is assigned
 tt_str_op((const char *) evbuffer_pullup(buf_out2, -1), ==,
 ^
mk_core/deps/libevent/test/regress_buffer.c:1790:2: note: print_ is overwritten
 tt_str_op((const char *) evbuffer_pullup(buf_out2, -1), ==,
 ^
mk_core/deps/libevent/test/regress_buffer.c:1801:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_uint_op(evbuffer_get_length(buf), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1801:2: note: print_ is assigned
 tt_uint_op(evbuffer_get_length(buf), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1801:2: note: print_ is overwritten
 tt_uint_op(evbuffer_get_length(buf), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1802:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_uint_op(evbuffer_get_length(buf_out1), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1802:2: note: print_ is assigned
 tt_uint_op(evbuffer_get_length(buf_out1), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1802:2: note: print_ is overwritten
 tt_uint_op(evbuffer_get_length(buf_out1), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1803:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_uint_op(evbuffer_get_length(buf_out2), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1803:2: note: print_ is assigned
 tt_uint_op(evbuffer_get_length(buf_out2), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1803:2: note: print_ is overwritten
 tt_uint_op(evbuffer_get_length(buf_out2), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1806:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_str_op((const char *) evbuffer_pullup(buf, -1), ==, "This will not.");
 ^
mk_core/deps/libevent/test/regress_buffer.c:1806:2: note: print_ is assigned
 tt_str_op((const char *) evbuffer_pullup(buf, -1), ==, "This will not.");
 ^
mk_core/deps/libevent/test/regress_buffer.c:1806:2: note: print_ is overwritten
 tt_str_op((const char *) evbuffer_pullup(buf, -1), ==, "This will not.");
 ^
mk_core/deps/libevent/test/regress_buffer.c:1868:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(buf1), ==, len1+len2+2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1868:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(buf1), ==, len1+len2+2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1868:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(buf1), ==, len1+len2+2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1871:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_remove(buf1, tmp, 6), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1871:2: note: print_ is assigned
 tt_int_op(evbuffer_remove(buf1, tmp, 6), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1871:2: note: print_ is overwritten
 tt_int_op(evbuffer_remove(buf1, tmp, 6), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1872:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(memcmp(tmp, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1872:2: note: print_ is assigned
 tt_int_op(memcmp(tmp, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1872:2: note: print_ is overwritten
 tt_int_op(memcmp(tmp, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1873:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_remove(buf1, tmp, 5), ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1873:2: note: print_ is assigned
 tt_int_op(evbuffer_remove(buf1, tmp, 5), ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1873:2: note: print_ is overwritten
 tt_int_op(evbuffer_remove(buf1, tmp, 5), ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1874:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(memcmp(tmp, " have", 5), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1874:2: note: print_ is assigned
 tt_int_op(memcmp(tmp, " have", 5), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1874:2: note: print_ is overwritten
 tt_int_op(memcmp(tmp, " have", 5), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1877:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_prepend(buf1, "I have ", 7), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1877:2: note: print_ is assigned
 tt_int_op(evbuffer_prepend(buf1, "I have ", 7), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1877:2: note: print_ is overwritten
 tt_int_op(evbuffer_prepend(buf1, "I have ", 7), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1878:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(memcmp(chunk1, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1878:2: note: print_ is assigned
 tt_int_op(memcmp(chunk1, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1878:2: note: print_ is overwritten
 tt_int_op(memcmp(chunk1, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1884:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ref_done_cb_called_count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1884:2: note: print_ is assigned
 tt_int_op(ref_done_cb_called_count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1884:2: note: print_ is overwritten
 tt_int_op(ref_done_cb_called_count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1886:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(tmp[0], ==, 'm');
 ^
mk_core/deps/libevent/test/regress_buffer.c:1886:2: note: print_ is assigned
 tt_int_op(tmp[0], ==, 'm');
 ^
mk_core/deps/libevent/test/regress_buffer.c:1886:2: note: print_ is overwritten
 tt_int_op(tmp[0], ==, 'm');
 ^
mk_core/deps/libevent/test/regress_buffer.c:1890:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ref_done_cb_called_count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1890:2: note: print_ is assigned
 tt_int_op(ref_done_cb_called_count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1890:2: note: print_ is overwritten
 tt_int_op(ref_done_cb_called_count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1897:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ref_done_cb_called_count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1897:2: note: print_ is assigned
 tt_int_op(ref_done_cb_called_count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1897:2: note: print_ is overwritten
 tt_int_op(ref_done_cb_called_count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1901:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ref_done_cb_called_count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1901:2: note: print_ is assigned
 tt_int_op(ref_done_cb_called_count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1901:2: note: print_ is overwritten
 tt_int_op(ref_done_cb_called_count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1903:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(memcmp("I ought to write", tmp, 16), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1903:2: note: print_ is assigned
 tt_int_op(memcmp("I ought to write", tmp, 16), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1903:2: note: print_ is overwritten
 tt_int_op(memcmp("I ought to write", tmp, 16), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1905:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ref_done_cb_called_count, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1905:2: note: print_ is assigned
 tt_int_op(ref_done_cb_called_count, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1905:2: note: print_ is overwritten
 tt_int_op(ref_done_cb_called_count, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1917:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ref_done_cb_called_count, ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1917:2: note: print_ is assigned
 tt_int_op(ref_done_cb_called_count, ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1917:2: note: print_ is overwritten
 tt_int_op(ref_done_cb_called_count, ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1944:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(buf1), ==, len1+len2+2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1944:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(buf1), ==, len1+len2+2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1944:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(buf1), ==, len1+len2+2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1949:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_add_buffer_reference(buf2, buf1), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1949:2: note: print_ is assigned
 tt_int_op(evbuffer_add_buffer_reference(buf2, buf1), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1949:2: note: print_ is overwritten
 tt_int_op(evbuffer_add_buffer_reference(buf2, buf1), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1951:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_add_buffer_reference(buf2, buf2), ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1951:2: note: print_ is assigned
 tt_int_op(evbuffer_add_buffer_reference(buf2, buf2), ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1951:2: note: print_ is overwritten
 tt_int_op(evbuffer_add_buffer_reference(buf2, buf2), ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1952:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_add_buffer_reference(buf1, buf2), ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1952:2: note: print_ is assigned
 tt_int_op(evbuffer_add_buffer_reference(buf1, buf2), ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1952:2: note: print_ is overwritten
 tt_int_op(evbuffer_add_buffer_reference(buf1, buf2), ==, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1955:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(buf1), ==, evbuffer_get_length(buf1));
 ^
mk_core/deps/libevent/test/regress_buffer.c:1955:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(buf1), ==, evbuffer_get_length(buf1));
 ^
mk_core/deps/libevent/test/regress_buffer.c:1955:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(buf1), ==, evbuffer_get_length(buf1));
 ^
mk_core/deps/libevent/test/regress_buffer.c:1958:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_remove(buf1, tmp, 6), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1958:2: note: print_ is assigned
 tt_int_op(evbuffer_remove(buf1, tmp, 6), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1958:2: note: print_ is overwritten
 tt_int_op(evbuffer_remove(buf1, tmp, 6), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1959:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(memcmp(tmp, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1959:2: note: print_ is assigned
 tt_int_op(memcmp(tmp, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1959:2: note: print_ is overwritten
 tt_int_op(memcmp(tmp, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1960:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_remove(buf1, tmp, 5), ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1960:2: note: print_ is assigned
 tt_int_op(evbuffer_remove(buf1, tmp, 5), ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1960:2: note: print_ is overwritten
 tt_int_op(evbuffer_remove(buf1, tmp, 5), ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1961:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(memcmp(tmp, " have", 5), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1961:2: note: print_ is assigned
 tt_int_op(memcmp(tmp, " have", 5), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1961:2: note: print_ is overwritten
 tt_int_op(memcmp(tmp, " have", 5), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1964:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_prepend(buf1, "I have ", 7), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1964:2: note: print_ is assigned
 tt_int_op(evbuffer_prepend(buf1, "I have ", 7), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1964:2: note: print_ is overwritten
 tt_int_op(evbuffer_prepend(buf1, "I have ", 7), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1965:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(memcmp(chunk1, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1965:2: note: print_ is assigned
 tt_int_op(memcmp(chunk1, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1965:2: note: print_ is overwritten
 tt_int_op(memcmp(chunk1, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1969:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_remove(buf2, tmp, 6), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1969:2: note: print_ is assigned
 tt_int_op(evbuffer_remove(buf2, tmp, 6), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1969:2: note: print_ is overwritten
 tt_int_op(evbuffer_remove(buf2, tmp, 6), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1970:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(memcmp(tmp, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1970:2: note: print_ is assigned
 tt_int_op(memcmp(tmp, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1970:2: note: print_ is overwritten
 tt_int_op(memcmp(tmp, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1971:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_remove(buf2, tmp, 5), ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1971:2: note: print_ is assigned
 tt_int_op(evbuffer_remove(buf2, tmp, 5), ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1971:2: note: print_ is overwritten
 tt_int_op(evbuffer_remove(buf2, tmp, 5), ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1972:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(memcmp(tmp, " have", 5), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1972:2: note: print_ is assigned
 tt_int_op(memcmp(tmp, " have", 5), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1972:2: note: print_ is overwritten
 tt_int_op(memcmp(tmp, " have", 5), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1975:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_prepend(buf2, "I have ", 7), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1975:2: note: print_ is assigned
 tt_int_op(evbuffer_prepend(buf2, "I have ", 7), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1975:2: note: print_ is overwritten
 tt_int_op(evbuffer_prepend(buf2, "I have ", 7), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1976:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(memcmp(chunk1, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1976:2: note: print_ is assigned
 tt_int_op(memcmp(chunk1, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1976:2: note: print_ is overwritten
 tt_int_op(memcmp(chunk1, "If you", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1983:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_remove(buf2, tmp, 6), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1983:2: note: print_ is assigned
 tt_int_op(evbuffer_remove(buf2, tmp, 6), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1983:2: note: print_ is overwritten
 tt_int_op(evbuffer_remove(buf2, tmp, 6), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1984:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(memcmp(tmp, "I have", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1984:2: note: print_ is assigned
 tt_int_op(memcmp(tmp, "I have", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1984:2: note: print_ is overwritten
 tt_int_op(memcmp(tmp, "I have", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1986:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_remove(buf2, tmp, 6), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1986:2: note: print_ is assigned
 tt_int_op(evbuffer_remove(buf2, tmp, 6), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1986:2: note: print_ is overwritten
 tt_int_op(evbuffer_remove(buf2, tmp, 6), ==, 6);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1987:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(memcmp(tmp, "  foun", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1987:2: note: print_ is assigned
 tt_int_op(memcmp(tmp, "  foun", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:1987:2: note: print_ is overwritten
 tt_int_op(memcmp(tmp, "  foun", 6), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2012:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(buf1), ==, len1+len2+2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2012:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(buf1), ==, len1+len2+2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2012:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(buf1), ==, len1+len2+2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2017:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_add_buffer_reference(buf2, buf1), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2017:2: note: print_ is assigned
 tt_int_op(evbuffer_add_buffer_reference(buf2, buf1), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2017:2: note: print_ is overwritten
 tt_int_op(evbuffer_add_buffer_reference(buf2, buf1), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2018:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(buf2), ==, len1+len2+2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2018:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(buf2), ==, len1+len2+2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2018:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(buf2), ==, len1+len2+2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2019:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_drain(buf1, evbuffer_get_length(buf1)), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2019:2: note: print_ is assigned
 tt_int_op(evbuffer_drain(buf1, evbuffer_get_length(buf1)), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2019:2: note: print_ is overwritten
 tt_int_op(evbuffer_drain(buf1, evbuffer_get_length(buf1)), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2020:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(buf2), ==, len1+len2+2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2020:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(buf2), ==, len1+len2+2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2020:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(buf2), ==, len1+len2+2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2021:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_drain(buf2, evbuffer_get_length(buf2)), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2021:2: note: print_ is assigned
 tt_int_op(evbuffer_drain(buf2, evbuffer_get_length(buf2)), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2021:2: note: print_ is overwritten
 tt_int_op(evbuffer_drain(buf2, evbuffer_get_length(buf2)), ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2037:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(cbinfo->orig_size, ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2037:2: note: print_ is assigned
 tt_int_op(cbinfo->orig_size, ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2037:2: note: print_ is overwritten
 tt_int_op(cbinfo->orig_size, ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2038:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(cbinfo->n_added, ==, 8096);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2038:2: note: print_ is assigned
 tt_int_op(cbinfo->n_added, ==, 8096);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2038:2: note: print_ is overwritten
 tt_int_op(cbinfo->n_added, ==, 8096);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2039:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(cbinfo->n_deleted, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2039:2: note: print_ is assigned
 tt_int_op(cbinfo->n_deleted, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2039:2: note: print_ is overwritten
 tt_int_op(cbinfo->n_deleted, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2073:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n, >=, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2073:2: note: print_ is assigned
 tt_int_op(n, >=, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2073:2: note: print_ is overwritten
 tt_int_op(n, >=, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2075:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_str_op(tmp,==,"It is no longer true to say it has 29 characters");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2075:2: note: print_ is assigned
 tt_str_op(tmp,==,"It is no longer true to say it has 29 characters");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2075:2: note: print_ is overwritten
 tt_str_op(tmp,==,"It is no longer true to say it has 29 characters");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2092:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n, >=, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2092:2: note: print_ is assigned
 tt_int_op(n, >=, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2092:2: note: print_ is overwritten
 tt_int_op(n, >=, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2094:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_str_op(tmp,==,"Here is string 1000. Here is string 999. ");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2094:2: note: print_ is assigned
 tt_str_op(tmp,==,"Here is string 1000. Here is string 999. ");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2094:2: note: print_ is overwritten
 tt_str_op(tmp,==,"Here is string 1000. Here is string 999. ");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2106:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_nstr_op(8096,(char *)evbuffer_pullup(buf2, 8096),==,buffer);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2106:2: note: print_ is assigned
 tt_nstr_op(8096,(char *)evbuffer_pullup(buf2, 8096),==,buffer);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2106:2: note: print_ is overwritten
 tt_nstr_op(8096,(char *)evbuffer_pullup(buf2, 8096),==,buffer);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2108:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_nstr_op(3,(char *)evbuffer_pullup(buf2, 3),==,"foo");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2108:2: note: print_ is assigned
 tt_nstr_op(3,(char *)evbuffer_pullup(buf2, 3),==,"foo");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2108:2: note: print_ is overwritten
 tt_nstr_op(3,(char *)evbuffer_pullup(buf2, 3),==,"foo");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2137:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_peek(buf, -1, &ptr, NULL, 0), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2137:2: note: print_ is assigned
 tt_int_op(evbuffer_peek(buf, -1, &ptr, NULL, 0), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2137:2: note: print_ is overwritten
 tt_int_op(evbuffer_peek(buf, -1, &ptr, NULL, 0), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2139:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_peek(buf, -1, &ptr, v, 2), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2139:2: note: print_ is assigned
 tt_int_op(evbuffer_peek(buf, -1, &ptr, v, 2), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2139:2: note: print_ is overwritten
 tt_int_op(evbuffer_peek(buf, -1, &ptr, v, 2), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2142:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_peek(buf, -1, &ptr, NULL, 0), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2142:2: note: print_ is assigned
 tt_int_op(evbuffer_peek(buf, -1, &ptr, NULL, 0), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2142:2: note: print_ is overwritten
 tt_int_op(evbuffer_peek(buf, -1, &ptr, NULL, 0), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2143:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_peek(buf, -1, &ptr, v, 2), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2143:2: note: print_ is assigned
 tt_int_op(evbuffer_peek(buf, -1, &ptr, v, 2), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2143:2: note: print_ is overwritten
 tt_int_op(evbuffer_peek(buf, -1, &ptr, v, 2), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2144:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_peek(buf, 2, &ptr, NULL, 0), ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2144:2: note: print_ is assigned
 tt_int_op(evbuffer_peek(buf, 2, &ptr, NULL, 0), ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2144:2: note: print_ is overwritten
 tt_int_op(evbuffer_peek(buf, 2, &ptr, NULL, 0), ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2145:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_peek(buf, 2, &ptr, v, 2), ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2145:2: note: print_ is assigned
 tt_int_op(evbuffer_peek(buf, 2, &ptr, v, 2), ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2145:2: note: print_ is overwritten
 tt_int_op(evbuffer_peek(buf, 2, &ptr, v, 2), ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2146:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_peek(buf, 3, &ptr, NULL, 0), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2146:2: note: print_ is assigned
 tt_int_op(evbuffer_peek(buf, 3, &ptr, NULL, 0), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2146:2: note: print_ is overwritten
 tt_int_op(evbuffer_peek(buf, 3, &ptr, NULL, 0), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2147:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_peek(buf, 3, &ptr, v, 2), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2147:2: note: print_ is assigned
 tt_int_op(evbuffer_peek(buf, 3, &ptr, v, 2), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2147:2: note: print_ is overwritten
 tt_int_op(evbuffer_peek(buf, 3, &ptr, v, 2), ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2178:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(i, ==, 16);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2178:2: note: print_ is assigned
 tt_int_op(i, ==, 16);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2178:2: note: print_ is overwritten
 tt_int_op(i, ==, 16);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2182:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(i, ==, 16); /* we used only 16 chunks. */
 ^
mk_core/deps/libevent/test/regress_buffer.c:2182:2: note: print_ is assigned
 tt_int_op(i, ==, 16); /* we used only 16 chunks. */
 ^
mk_core/deps/libevent/test/regress_buffer.c:2182:2: note: print_ is overwritten
 tt_int_op(i, ==, 16); /* we used only 16 chunks. */
 ^
mk_core/deps/libevent/test/regress_buffer.c:2183:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[0], "Contents of chunk [0]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2183:2: note: print_ is assigned
 tt_iov_eq(&v[0], "Contents of chunk [0]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2183:2: note: print_ is overwritten
 tt_iov_eq(&v[0], "Contents of chunk [0]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2184:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[3], "Contents of chunk [3]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2184:2: note: print_ is assigned
 tt_iov_eq(&v[3], "Contents of chunk [3]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2184:2: note: print_ is overwritten
 tt_iov_eq(&v[3], "Contents of chunk [3]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2185:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[12], "Contents of chunk [12]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2185:2: note: print_ is assigned
 tt_iov_eq(&v[12], "Contents of chunk [12]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2185:2: note: print_ is overwritten
 tt_iov_eq(&v[12], "Contents of chunk [12]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2186:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[15], "Contents of chunk [15]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2186:2: note: print_ is assigned
 tt_iov_eq(&v[15], "Contents of chunk [15]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2186:2: note: print_ is overwritten
 tt_iov_eq(&v[15], "Contents of chunk [15]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2191:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(i, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2191:2: note: print_ is assigned
 tt_int_op(i, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2191:2: note: print_ is overwritten
 tt_int_op(i, ==, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2192:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[0], "Contents of chunk [0]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2192:2: note: print_ is assigned
 tt_iov_eq(&v[0], "Contents of chunk [0]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2192:2: note: print_ is overwritten
 tt_iov_eq(&v[0], "Contents of chunk [0]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2198:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(i, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2198:2: note: print_ is assigned
 tt_int_op(i, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2198:2: note: print_ is overwritten
 tt_int_op(i, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2199:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[0], "Contents of chunk [0]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2199:2: note: print_ is assigned
 tt_iov_eq(&v[0], "Contents of chunk [0]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2199:2: note: print_ is overwritten
 tt_iov_eq(&v[0], "Contents of chunk [0]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2200:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[1], "Contents of chunk [1]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2200:2: note: print_ is assigned
 tt_iov_eq(&v[1], "Contents of chunk [1]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2200:2: note: print_ is overwritten
 tt_iov_eq(&v[1], "Contents of chunk [1]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2206:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(i, ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2206:2: note: print_ is assigned
 tt_int_op(i, ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2206:2: note: print_ is overwritten
 tt_int_op(i, ==, 5);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2212:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(i, ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2212:2: note: print_ is assigned
 tt_int_op(i, ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2212:2: note: print_ is overwritten
 tt_int_op(i, ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2213:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[0], "Contents of chunk [0]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2213:2: note: print_ is assigned
 tt_iov_eq(&v[0], "Contents of chunk [0]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2213:2: note: print_ is overwritten
 tt_iov_eq(&v[0], "Contents of chunk [0]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2219:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(i, ==, 16); /* we used only 16 chunks. */
 ^
mk_core/deps/libevent/test/regress_buffer.c:2219:2: note: print_ is assigned
 tt_int_op(i, ==, 16); /* we used only 16 chunks. */
 ^
mk_core/deps/libevent/test/regress_buffer.c:2219:2: note: print_ is overwritten
 tt_int_op(i, ==, 16); /* we used only 16 chunks. */
 ^
mk_core/deps/libevent/test/regress_buffer.c:2220:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[0], "Contents of chunk [0]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2220:2: note: print_ is assigned
 tt_iov_eq(&v[0], "Contents of chunk [0]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2220:2: note: print_ is overwritten
 tt_iov_eq(&v[0], "Contents of chunk [0]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2221:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[3], "Contents of chunk [3]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2221:2: note: print_ is assigned
 tt_iov_eq(&v[3], "Contents of chunk [3]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2221:2: note: print_ is overwritten
 tt_iov_eq(&v[3], "Contents of chunk [3]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2222:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[12], "Contents of chunk [12]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2222:2: note: print_ is assigned
 tt_iov_eq(&v[12], "Contents of chunk [12]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2222:2: note: print_ is overwritten
 tt_iov_eq(&v[12], "Contents of chunk [12]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2223:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[15], "Contents of chunk [15]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2223:2: note: print_ is assigned
 tt_iov_eq(&v[15], "Contents of chunk [15]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2223:2: note: print_ is overwritten
 tt_iov_eq(&v[15], "Contents of chunk [15]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2229:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(i, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2229:2: note: print_ is assigned
 tt_int_op(i, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2229:2: note: print_ is overwritten
 tt_int_op(i, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2233:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(i, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2233:2: note: print_ is assigned
 tt_int_op(i, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2233:2: note: print_ is overwritten
 tt_int_op(i, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2240:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(i, ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2240:2: note: print_ is assigned
 tt_int_op(i, ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2240:2: note: print_ is overwritten
 tt_int_op(i, ==, 3);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2241:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[0], " of chunk [1]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2241:2: note: print_ is assigned
 tt_iov_eq(&v[0], " of chunk [1]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2241:2: note: print_ is overwritten
 tt_iov_eq(&v[0], " of chunk [1]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2242:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[1], "Contents of chunk [2]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2242:2: note: print_ is assigned
 tt_iov_eq(&v[1], "Contents of chunk [2]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2242:2: note: print_ is overwritten
 tt_iov_eq(&v[1], "Contents of chunk [2]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2243:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[2], "Contents of chunk [3]\n"); /*more than we asked for*/
 ^
mk_core/deps/libevent/test/regress_buffer.c:2243:2: note: print_ is assigned
 tt_iov_eq(&v[2], "Contents of chunk [3]\n"); /*more than we asked for*/
 ^
mk_core/deps/libevent/test/regress_buffer.c:2243:2: note: print_ is overwritten
 tt_iov_eq(&v[2], "Contents of chunk [3]\n"); /*more than we asked for*/
 ^
mk_core/deps/libevent/test/regress_buffer.c:2249:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(i, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2249:2: note: print_ is assigned
 tt_int_op(i, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2249:2: note: print_ is overwritten
 tt_int_op(i, ==, 2);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2250:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[0], "Contents of chunk [2]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2250:2: note: print_ is assigned
 tt_iov_eq(&v[0], "Contents of chunk [2]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2250:2: note: print_ is overwritten
 tt_iov_eq(&v[0], "Contents of chunk [2]\n");
 ^
mk_core/deps/libevent/test/regress_buffer.c:2251:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_iov_eq(&v[1], "Contents of chunk [3]\n"); /*more than we asked for*/
 ^
mk_core/deps/libevent/test/regress_buffer.c:2251:2: note: print_ is assigned
 tt_iov_eq(&v[1], "Contents of chunk [3]\n"); /*more than we asked for*/
 ^
mk_core/deps/libevent/test/regress_buffer.c:2251:2: note: print_ is overwritten
 tt_iov_eq(&v[1], "Contents of chunk [3]\n"); /*more than we asked for*/
 ^
mk_core/deps/libevent/test/regress_buffer.c:2257:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(i, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2257:2: note: print_ is assigned
 tt_int_op(i, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2257:2: note: print_ is overwritten
 tt_int_op(i, ==, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2291:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_str_op(ptr, ==, "end");
  ^
mk_core/deps/libevent/test/regress_buffer.c:2291:3: note: print_ is assigned
  tt_str_op(ptr, ==, "end");
  ^
mk_core/deps/libevent/test/regress_buffer.c:2291:3: note: print_ is overwritten
  tt_str_op(ptr, ==, "end");
  ^
mk_core/deps/libevent/test/regress_buffer.c:2314:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 FREEZE_EQ(r, 0, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2314:2: note: print_ is assigned
 FREEZE_EQ(r, 0, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2314:2: note: print_ is overwritten
 FREEZE_EQ(r, 0, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2316:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 FREEZE_EQ(r, 1, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2316:2: note: print_ is assigned
 FREEZE_EQ(r, 1, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2316:2: note: print_ is overwritten
 FREEZE_EQ(r, 1, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2322:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 FREEZE_EQ(r, 0, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2322:2: note: print_ is assigned
 FREEZE_EQ(r, 0, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2322:2: note: print_ is overwritten
 FREEZE_EQ(r, 0, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2324:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 FREEZE_EQ(r, 0, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2324:2: note: print_ is assigned
 FREEZE_EQ(r, 0, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2324:2: note: print_ is overwritten
 FREEZE_EQ(r, 0, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2326:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 FREEZE_EQ(r, 11, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2326:2: note: print_ is assigned
 FREEZE_EQ(r, 11, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2326:2: note: print_ is overwritten
 FREEZE_EQ(r, 11, -1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2330:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(orig_length, ==, evbuffer_get_length(buf));
  ^
mk_core/deps/libevent/test/regress_buffer.c:2330:3: note: print_ is assigned
  tt_int_op(orig_length, ==, evbuffer_get_length(buf));
  ^
mk_core/deps/libevent/test/regress_buffer.c:2330:3: note: print_ is overwritten
  tt_int_op(orig_length, ==, evbuffer_get_length(buf));
  ^
mk_core/deps/libevent/test/regress_buffer.c:2336:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 FREEZE_EQ(r, -1, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2336:2: note: print_ is assigned
 FREEZE_EQ(r, -1, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2336:2: note: print_ is overwritten
 FREEZE_EQ(r, -1, 1);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2338:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 FREEZE_EQ(r, -1, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2338:2: note: print_ is assigned
 FREEZE_EQ(r, -1, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2338:2: note: print_ is overwritten
 FREEZE_EQ(r, -1, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2340:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 FREEZE_EQ(r, -1, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2340:2: note: print_ is assigned
 FREEZE_EQ(r, -1, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2340:2: note: print_ is overwritten
 FREEZE_EQ(r, -1, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2342:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 FREEZE_EQ(cp==NULL, 1, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2342:2: note: print_ is assigned
 FREEZE_EQ(cp==NULL, 1, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2342:2: note: print_ is overwritten
 FREEZE_EQ(cp==NULL, 1, 0);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2348:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(orig_length, ==, evbuffer_get_length(buf));
  ^
mk_core/deps/libevent/test/regress_buffer.c:2348:3: note: print_ is assigned
  tt_int_op(orig_length, ==, evbuffer_get_length(buf));
  ^
mk_core/deps/libevent/test/regress_buffer.c:2348:3: note: print_ is overwritten
  tt_int_op(orig_length, ==, evbuffer_get_length(buf));
  ^
mk_core/deps/libevent/test/regress_buffer.c:2386:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(returned_length, ==, evbuffer_get_length(buf));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2386:2: note: print_ is assigned
 tt_int_op(returned_length, ==, evbuffer_get_length(buf));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2386:2: note: print_ is overwritten
 tt_int_op(returned_length, ==, evbuffer_get_length(buf));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2387:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(buf), ==, expected_length);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2387:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(buf), ==, expected_length);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2387:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(buf), ==, expected_length);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2422:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(strlen(string), ==, 206);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2422:2: note: print_ is assigned
 tt_int_op(strlen(string), ==, 206);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2422:2: note: print_ is overwritten
 tt_int_op(strlen(string), ==, 206);
 ^
mk_core/deps/libevent/test/regress_buffer.c:2429:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(206, ==, evbuffer_get_length(buf));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2429:2: note: print_ is assigned
 tt_int_op(206, ==, evbuffer_get_length(buf));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2429:2: note: print_ is overwritten
 tt_int_op(206, ==, evbuffer_get_length(buf));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2434:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(10, ==, evbuffer_copyout(buf, tmp, 10));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2434:2: note: print_ is assigned
 tt_int_op(10, ==, evbuffer_copyout(buf, tmp, 10));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2434:2: note: print_ is overwritten
 tt_int_op(10, ==, evbuffer_copyout(buf, tmp, 10));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2435:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, memcmp(tmp, "Still they", 10));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2435:2: note: print_ is assigned
 tt_int_op(0, ==, memcmp(tmp, "Still they", 10));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2435:2: note: print_ is overwritten
 tt_int_op(0, ==, memcmp(tmp, "Still they", 10));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2439:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(100, ==, evbuffer_copyout(buf, tmp, 100));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2439:2: note: print_ is assigned
 tt_int_op(100, ==, evbuffer_copyout(buf, tmp, 100));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2439:2: note: print_ is overwritten
 tt_int_op(100, ==, evbuffer_copyout(buf, tmp, 100));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2440:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, memcmp(tmp, string, 100));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2440:2: note: print_ is assigned
 tt_int_op(0, ==, memcmp(tmp, string, 100));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2440:2: note: print_ is overwritten
 tt_int_op(0, ==, memcmp(tmp, string, 100));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2444:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(206, ==, evbuffer_copyout(buf, tmp, 230));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2444:2: note: print_ is assigned
 tt_int_op(206, ==, evbuffer_copyout(buf, tmp, 230));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2444:2: note: print_ is overwritten
 tt_int_op(206, ==, evbuffer_copyout(buf, tmp, 230));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2445:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, memcmp(tmp, string, 206));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2445:2: note: print_ is assigned
 tt_int_op(0, ==, memcmp(tmp, string, 206));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2445:2: note: print_ is overwritten
 tt_int_op(0, ==, memcmp(tmp, string, 206));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2448:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(206, ==, evbuffer_get_length(buf));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2448:2: note: print_ is assigned
 tt_int_op(206, ==, evbuffer_get_length(buf));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2448:2: note: print_ is overwritten
 tt_int_op(206, ==, evbuffer_get_length(buf));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2454:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(10, ==, evbuffer_copyout_from(buf, &ptr, tmp, 10));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2454:2: note: print_ is assigned
 tt_int_op(10, ==, evbuffer_copyout_from(buf, &ptr, tmp, 10));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2454:2: note: print_ is overwritten
 tt_int_op(10, ==, evbuffer_copyout_from(buf, &ptr, tmp, 10));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2455:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, memcmp(tmp, "mish to an", 10));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2455:2: note: print_ is assigned
 tt_int_op(0, ==, memcmp(tmp, "mish to an", 10));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2455:2: note: print_ is overwritten
 tt_int_op(0, ==, memcmp(tmp, "mish to an", 10));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2459:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(65, ==, evbuffer_copyout_from(buf, &ptr, tmp, 65));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2459:2: note: print_ is assigned
 tt_int_op(65, ==, evbuffer_copyout_from(buf, &ptr, tmp, 65));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2459:2: note: print_ is overwritten
 tt_int_op(65, ==, evbuffer_copyout_from(buf, &ptr, tmp, 65));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2460:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, memcmp(tmp, string+15, 65));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2460:2: note: print_ is assigned
 tt_int_op(0, ==, memcmp(tmp, string+15, 65));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2460:2: note: print_ is overwritten
 tt_int_op(0, ==, memcmp(tmp, string+15, 65));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2464:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(90, ==, evbuffer_copyout_from(buf, &ptr, tmp, 90));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2464:2: note: print_ is assigned
 tt_int_op(90, ==, evbuffer_copyout_from(buf, &ptr, tmp, 90));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2464:2: note: print_ is overwritten
 tt_int_op(90, ==, evbuffer_copyout_from(buf, &ptr, tmp, 90));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2465:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, memcmp(tmp, string+15, 90));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2465:2: note: print_ is assigned
 tt_int_op(0, ==, memcmp(tmp, string+15, 90));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2465:2: note: print_ is overwritten
 tt_int_op(0, ==, memcmp(tmp, string+15, 90));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2469:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(160, ==, evbuffer_copyout_from(buf, &ptr, tmp, 160));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2469:2: note: print_ is assigned
 tt_int_op(160, ==, evbuffer_copyout_from(buf, &ptr, tmp, 160));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2469:2: note: print_ is overwritten
 tt_int_op(160, ==, evbuffer_copyout_from(buf, &ptr, tmp, 160));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2470:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, memcmp(tmp, string+15, 160));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2470:2: note: print_ is assigned
 tt_int_op(0, ==, memcmp(tmp, string+15, 160));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2470:2: note: print_ is overwritten
 tt_int_op(0, ==, memcmp(tmp, string+15, 160));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2474:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(206-15, ==, evbuffer_copyout_from(buf, &ptr, tmp, 999));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2474:2: note: print_ is assigned
 tt_int_op(206-15, ==, evbuffer_copyout_from(buf, &ptr, tmp, 999));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2474:2: note: print_ is overwritten
 tt_int_op(206-15, ==, evbuffer_copyout_from(buf, &ptr, tmp, 999));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2475:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, memcmp(tmp, string+15, 206-15));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2475:2: note: print_ is assigned
 tt_int_op(0, ==, memcmp(tmp, string+15, 206-15));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2475:2: note: print_ is overwritten
 tt_int_op(0, ==, memcmp(tmp, string+15, 206-15));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2478:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(206, ==, evbuffer_get_length(buf));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2478:2: note: print_ is assigned
 tt_int_op(206, ==, evbuffer_get_length(buf));
 ^
mk_core/deps/libevent/test/regress_buffer.c:2478:2: note: print_ is overwritten
 tt_int_op(206, ==, evbuffer_get_length(buf));
 ^
mk_core/deps/libevent/test/regress_buffer.c:903:6: style: The scope of the variable 'e' can be reduced. [variableScope]
 int e, r = 0;
     ^
mk_core/deps/libevent/test/regress_buffer.c:259:7: style: Local variable 'i' shadows outer variable [shadowVariable]
  int i, j, r;
      ^
mk_core/deps/libevent/test/regress_buffer.c:177:6: note: Shadowed declaration
 int i;
     ^
mk_core/deps/libevent/test/regress_buffer.c:259:7: note: Shadow variable
  int i, j, r;
      ^
mk_core/deps/libevent/test/regress_buffer.c:945:18: style: Local variable 'pair' shadows outer variable [shadowVariable]
 evutil_socket_t pair[2] = {-1, -1};
                 ^
mk_core/deps/libevent/test/regress.h:64:24: note: Shadowed declaration
extern evutil_socket_t pair[2];
                       ^
mk_core/deps/libevent/test/regress_buffer.c:945:18: note: Shadow variable
 evutil_socket_t pair[2] = {-1, -1};
                 ^
mk_core/deps/libevent/test/regress_bufferevent.c:140:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(bufferevent_getfd(bev1), ==, -1);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:140:3: note: print_ is assigned
  tt_int_op(bufferevent_getfd(bev1), ==, -1);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:140:3: note: print_ is overwritten
  tt_int_op(bufferevent_getfd(bev1), ==, -1);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:141:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_ptr_op(bufferevent_get_underlying(bev1), ==, NULL);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:141:3: note: print_ is assigned
  tt_ptr_op(bufferevent_get_underlying(bev1), ==, NULL);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:141:3: note: print_ is overwritten
  tt_ptr_op(bufferevent_get_underlying(bev1), ==, NULL);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:142:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_ptr_op(bufferevent_pair_get_partner(bev1), ==, bev2);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:142:3: note: print_ is assigned
  tt_ptr_op(bufferevent_pair_get_partner(bev1), ==, bev2);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:142:3: note: print_ is overwritten
  tt_ptr_op(bufferevent_pair_get_partner(bev1), ==, bev2);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:143:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_ptr_op(bufferevent_pair_get_partner(bev2), ==, bev1);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:143:3: note: print_ is assigned
  tt_ptr_op(bufferevent_pair_get_partner(bev2), ==, bev1);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:143:3: note: print_ is overwritten
  tt_ptr_op(bufferevent_pair_get_partner(bev2), ==, bev1);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:147:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(bufferevent_getfd(bev1), ==, pair[0]);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:147:3: note: print_ is assigned
  tt_int_op(bufferevent_getfd(bev1), ==, pair[0]);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:147:3: note: print_ is overwritten
  tt_int_op(bufferevent_getfd(bev1), ==, pair[0]);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:148:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_ptr_op(bufferevent_get_underlying(bev1), ==, NULL);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:148:3: note: print_ is assigned
  tt_ptr_op(bufferevent_get_underlying(bev1), ==, NULL);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:148:3: note: print_ is overwritten
  tt_ptr_op(bufferevent_get_underlying(bev1), ==, NULL);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:149:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_ptr_op(bufferevent_pair_get_partner(bev1), ==, NULL);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:149:3: note: print_ is assigned
  tt_ptr_op(bufferevent_pair_get_partner(bev1), ==, NULL);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:149:3: note: print_ is overwritten
  tt_ptr_op(bufferevent_pair_get_partner(bev1), ==, NULL);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:150:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_ptr_op(bufferevent_pair_get_partner(bev2), ==, NULL);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:150:3: note: print_ is assigned
  tt_ptr_op(bufferevent_pair_get_partner(bev2), ==, NULL);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:150:3: note: print_ is overwritten
  tt_ptr_op(bufferevent_pair_get_partner(bev2), ==, NULL);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:159:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_ptr_op(r, ==, readcb);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:159:3: note: print_ is assigned
  tt_ptr_op(r, ==, readcb);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:159:3: note: print_ is overwritten
  tt_ptr_op(r, ==, readcb);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:160:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_ptr_op(w, ==, writecb);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:160:3: note: print_ is assigned
  tt_ptr_op(w, ==, writecb);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:160:3: note: print_ is overwritten
  tt_ptr_op(w, ==, writecb);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:161:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_ptr_op(e, ==, errorcb);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:161:3: note: print_ is assigned
  tt_ptr_op(e, ==, errorcb);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:161:3: note: print_ is overwritten
  tt_ptr_op(e, ==, errorcb);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:162:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_ptr_op(a, ==, use_pair ? bev1 : NULL);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:162:3: note: print_ is assigned
  tt_ptr_op(a, ==, use_pair ? bev1 : NULL);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:162:3: note: print_ is overwritten
  tt_ptr_op(a, ==, use_pair ? bev1 : NULL);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:168:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(bufferevent_get_enabled(bev1), ==, EV_WRITE);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:168:2: note: print_ is assigned
 tt_int_op(bufferevent_get_enabled(bev1), ==, EV_WRITE);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:168:2: note: print_ is overwritten
 tt_int_op(bufferevent_get_enabled(bev1), ==, EV_WRITE);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:169:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(bufferevent_get_enabled(bev2), ==, EV_WRITE|EV_READ);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:169:2: note: print_ is assigned
 tt_int_op(bufferevent_get_enabled(bev2), ==, EV_WRITE|EV_READ);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:169:2: note: print_ is overwritten
 tt_int_op(bufferevent_get_enabled(bev2), ==, EV_WRITE|EV_READ);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:176:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(bufferevent_flush(bev1, EV_WRITE, flush), >=, 0);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:176:3: note: print_ is assigned
  tt_int_op(bufferevent_flush(bev1, EV_WRITE, flush), >=, 0);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:176:3: note: print_ is overwritten
  tt_int_op(bufferevent_flush(bev1, EV_WRITE, flush), >=, 0);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:182:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_ptr_op(bufferevent_pair_get_partner(bev1), ==, NULL);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:182:2: note: print_ is assigned
 tt_ptr_op(bufferevent_pair_get_partner(bev1), ==, NULL);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:182:2: note: print_ is overwritten
 tt_ptr_op(bufferevent_pair_get_partner(bev1), ==, NULL);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:419:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(low, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:419:2: note: print_ is assigned
 tt_int_op(low, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:419:2: note: print_ is overwritten
 tt_int_op(low, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:421:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(low, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:421:2: note: print_ is assigned
 tt_int_op(low, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:421:2: note: print_ is overwritten
 tt_int_op(low, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:430:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(low, ==, 10);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:430:2: note: print_ is assigned
 tt_int_op(low, ==, 10);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:430:2: note: print_ is overwritten
 tt_int_op(low, ==, 10);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:431:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(high, ==, 20);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:431:2: note: print_ is assigned
 tt_int_op(high, ==, 20);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:431:2: note: print_ is overwritten
 tt_int_op(high, ==, 20);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:438:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(low, ==, 100);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:438:2: note: print_ is assigned
 tt_int_op(low, ==, 100);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:438:2: note: print_ is overwritten
 tt_int_op(low, ==, 100);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:439:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(high, ==, 2000);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:439:2: note: print_ is assigned
 tt_int_op(high, ==, 2000);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:439:2: note: print_ is overwritten
 tt_int_op(high, ==, 2000);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:443:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r, !=, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:443:2: note: print_ is assigned
 tt_int_op(r, !=, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:443:2: note: print_ is overwritten
 tt_int_op(r, !=, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:450:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:450:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:450:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:570:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_ptr_op(bufferevent_get_underlying(bev1), ==, bev1_base);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:570:2: note: print_ is assigned
 tt_ptr_op(bufferevent_get_underlying(bev1), ==, bev1_base);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:570:2: note: print_ is overwritten
 tt_ptr_op(bufferevent_get_underlying(bev1), ==, bev1_base);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:571:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_ptr_op(bufferevent_get_underlying(bev2), ==, bev2_base);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:571:2: note: print_ is assigned
 tt_ptr_op(bufferevent_get_underlying(bev2), ==, bev2_base);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:571:2: note: print_ is overwritten
 tt_ptr_op(bufferevent_get_underlying(bev2), ==, bev2_base);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:572:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(bufferevent_getfd(bev1), ==, -1);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:572:2: note: print_ is assigned
 tt_int_op(bufferevent_getfd(bev1), ==, -1);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:572:2: note: print_ is overwritten
 tt_int_op(bufferevent_getfd(bev1), ==, -1);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:573:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(bufferevent_getfd(bev2), ==, -1);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:573:2: note: print_ is assigned
 tt_int_op(bufferevent_getfd(bev2), ==, -1);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:573:2: note: print_ is overwritten
 tt_int_op(bufferevent_getfd(bev2), ==, -1);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:685:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(n, >=, 0);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:685:3: note: print_ is assigned
  tt_int_op(n, >=, 0);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:685:3: note: print_ is overwritten
  tt_int_op(n, >=, 0);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:687:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_str_op(buf, ==, TEST_STR);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:687:3: note: print_ is assigned
  tt_str_op(buf, ==, TEST_STR);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:687:3: note: print_ is overwritten
  tt_str_op(buf, ==, TEST_STR);
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:777:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_strings_read, ==, 2);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:777:2: note: print_ is assigned
 tt_int_op(n_strings_read, ==, 2);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:777:2: note: print_ is overwritten
 tt_int_op(n_strings_read, ==, 2);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:778:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_reads_invoked, >=, 2);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:778:2: note: print_ is assigned
 tt_int_op(n_reads_invoked, >=, 2);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:778:2: note: print_ is overwritten
 tt_int_op(n_reads_invoked, >=, 2);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:803:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_events_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:803:2: note: print_ is assigned
 tt_int_op(n_events_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:803:2: note: print_ is overwritten
 tt_int_op(n_events_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:810:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_events_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:810:2: note: print_ is assigned
 tt_int_op(n_events_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:810:2: note: print_ is overwritten
 tt_int_op(n_events_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:811:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_reads_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:811:2: note: print_ is assigned
 tt_int_op(n_reads_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:811:2: note: print_ is overwritten
 tt_int_op(n_reads_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:814:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_events_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:814:2: note: print_ is assigned
 tt_int_op(n_events_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:814:2: note: print_ is overwritten
 tt_int_op(n_events_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:815:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_reads_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:815:2: note: print_ is assigned
 tt_int_op(n_reads_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:815:2: note: print_ is overwritten
 tt_int_op(n_reads_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:817:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_events_invoked, ==, 1);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:817:2: note: print_ is assigned
 tt_int_op(n_events_invoked, ==, 1);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:817:2: note: print_ is overwritten
 tt_int_op(n_events_invoked, ==, 1);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:818:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_reads_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:818:2: note: print_ is assigned
 tt_int_op(n_reads_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:818:2: note: print_ is overwritten
 tt_int_op(n_reads_invoked, ==, 0);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:894:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:894:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:894:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:962:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(0, ==, bufferevent_pair_new(data->base, 0, p));
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:962:3: note: print_ is assigned
  tt_int_op(0, ==, bufferevent_pair_new(data->base, 0, p));
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:962:3: note: print_ is overwritten
  tt_int_op(0, ==, bufferevent_pair_new(data->base, 0, p));
  ^
mk_core/deps/libevent/test/regress_bufferevent.c:1039:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 test_timeval_diff_eq(&started_at, &res1.read_timeout_at, 150);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1039:2: note: print_ is assigned
 test_timeval_diff_eq(&started_at, &res1.read_timeout_at, 150);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1039:2: note: print_ is overwritten
 test_timeval_diff_eq(&started_at, &res1.read_timeout_at, 150);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1040:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 test_timeval_diff_eq(&started_at, &res1.write_timeout_at, 100);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1040:2: note: print_ is assigned
 test_timeval_diff_eq(&started_at, &res1.write_timeout_at, 100);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1040:2: note: print_ is overwritten
 test_timeval_diff_eq(&started_at, &res1.write_timeout_at, 100);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1094:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_reads_invoked, ==, expected_reads);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1094:2: note: print_ is assigned
 tt_int_op(n_reads_invoked, ==, expected_reads);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1094:2: note: print_ is overwritten
 tt_int_op(n_reads_invoked, ==, expected_reads);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1107:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_reads_invoked, ==, expected_reads);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1107:2: note: print_ is assigned
 tt_int_op(n_reads_invoked, ==, expected_reads);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1107:2: note: print_ is overwritten
 tt_int_op(n_reads_invoked, ==, expected_reads);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1166:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_reads_invoked, ==, 2);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1166:2: note: print_ is assigned
 tt_int_op(n_reads_invoked, ==, 2);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1166:2: note: print_ is overwritten
 tt_int_op(n_reads_invoked, ==, 2);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1271:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(payload_size, ==, evbuffer_remove_buffer(src, dst, payload_size));
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1271:2: note: print_ is assigned
 tt_int_op(payload_size, ==, evbuffer_remove_buffer(src, dst, payload_size));
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1271:2: note: print_ is overwritten
 tt_int_op(payload_size, ==, evbuffer_remove_buffer(src, dst, payload_size));
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1322:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(filter_data.total_read, ==, payload_size + filter_data.header_size);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1322:2: note: print_ is assigned
 tt_int_op(filter_data.total_read, ==, payload_size + filter_data.header_size);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:1322:2: note: print_ is overwritten
 tt_int_op(filter_data.total_read, ==, payload_size + filter_data.header_size);
 ^
mk_core/deps/libevent/test/regress_bufferevent.c:507:23: style: The scope of the variable 'buffer' can be reduced. [variableScope]
 const unsigned char *buffer;
                      ^
mk_core/deps/libevent/test/regress_bufferevent.c:508:11: style: The scope of the variable 'i' can be reduced. [variableScope]
 unsigned i;
          ^
mk_core/deps/libevent/test/regress_bufferevent.c:833:14: style: The scope of the variable 'err' can be reduced. [variableScope]
 const char *err;
             ^
mk_core/deps/libevent/test/regress_bufferevent.c:134:23: style: Local variable 'pair' shadows outer variable [shadowVariable]
  struct bufferevent *pair[2];
                      ^
mk_core/deps/libevent/test/regress.h:64:24: note: Shadowed declaration
extern evutil_socket_t pair[2];
                       ^
mk_core/deps/libevent/test/regress_bufferevent.c:134:23: note: Shadow variable
  struct bufferevent *pair[2];
                      ^
mk_core/deps/libevent/test/regress_bufferevent.c:402:23: style: Local variable 'pair' shadows outer variable [shadowVariable]
  struct bufferevent *pair[2];
                      ^
mk_core/deps/libevent/test/regress.h:64:24: note: Shadowed declaration
extern evutil_socket_t pair[2];
                       ^
mk_core/deps/libevent/test/regress_bufferevent.c:402:23: note: Shadow variable
  struct bufferevent *pair[2];
                      ^
mk_core/deps/libevent/test/regress_bufferevent.c:547:23: style: Local variable 'pair' shadows outer variable [shadowVariable]
  struct bufferevent *pair[2];
                      ^
mk_core/deps/libevent/test/regress.h:64:24: note: Shadowed declaration
extern evutil_socket_t pair[2];
                       ^
mk_core/deps/libevent/test/regress_bufferevent.c:547:23: note: Shadow variable
  struct bufferevent *pair[2];
                      ^
mk_core/deps/libevent/test/regress_bufferevent.c:1204:22: style: Local variable 'pair' shadows outer variable [shadowVariable]
 struct bufferevent *pair[2];
                     ^
mk_core/deps/libevent/test/regress.h:64:24: note: Shadowed declaration
extern evutil_socket_t pair[2];
                       ^
mk_core/deps/libevent/test/regress_bufferevent.c:1204:22: note: Shadow variable
 struct bufferevent *pair[2];
                     ^
mk_core/deps/libevent/test/regress_bufferevent.c:1283:22: style: Local variable 'pair' shadows outer variable [shadowVariable]
 struct bufferevent *pair[2];
                     ^
mk_core/deps/libevent/test/regress.h:64:24: note: Shadowed declaration
extern evutil_socket_t pair[2];
                       ^
mk_core/deps/libevent/test/regress_bufferevent.c:1283:22: note: Shadow variable
 struct bufferevent *pair[2];
                     ^
mk_core/deps/libevent/test/regress_bufferevent.c:336:23: style: Local variable 'pair' shadows outer variable [shadowVariable]
  struct bufferevent *pair[2];
                      ^
mk_core/deps/libevent/test/regress.h:64:24: note: Shadowed declaration
extern evutil_socket_t pair[2];
                       ^
mk_core/deps/libevent/test/regress_bufferevent.c:336:23: note: Shadow variable
  struct bufferevent *pair[2];
                      ^
mk_core/deps/libevent/test/regress_dns.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 28 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/test/regress_dns.c:157:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(dns_ok, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:157:2: note: print_ is assigned
 tt_int_op(dns_ok, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:157:2: note: print_ is overwritten
 tt_int_op(dns_ok, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:174:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(dns_ok, ==, DNS_IPv6_AAAA);
 ^
mk_core/deps/libevent/test/regress_dns.c:174:2: note: print_ is assigned
 tt_int_op(dns_ok, ==, DNS_IPv6_AAAA);
 ^
mk_core/deps/libevent/test/regress_dns.c:174:2: note: print_ is overwritten
 tt_int_op(dns_ok, ==, DNS_IPv6_AAAA);
 ^
mk_core/deps/libevent/test/regress_dns.c:189:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(dns_ok, ==, DNS_PTR);
 ^
mk_core/deps/libevent/test/regress_dns.c:189:2: note: print_ is assigned
 tt_int_op(dns_ok, ==, DNS_PTR);
 ^
mk_core/deps/libevent/test/regress_dns.c:189:2: note: print_ is overwritten
 tt_int_op(dns_ok, ==, DNS_PTR);
 ^
mk_core/deps/libevent/test/regress_dns.c:214:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(dns_ok, ==, DNS_PTR);
 ^
mk_core/deps/libevent/test/regress_dns.c:214:2: note: print_ is assigned
 tt_int_op(dns_ok, ==, DNS_PTR);
 ^
mk_core/deps/libevent/test/regress_dns.c:214:2: note: print_ is overwritten
 tt_int_op(dns_ok, ==, DNS_PTR);
 ^
mk_core/deps/libevent/test/regress_dns.c:410:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evdns_base_count_nameservers(base), ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:410:2: note: print_ is assigned
 tt_int_op(evdns_base_count_nameservers(base), ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:410:2: note: print_ is overwritten
 tt_int_op(evdns_base_count_nameservers(base), ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:418:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(slen2, ==, slen);
  ^
mk_core/deps/libevent/test/regress_dns.c:418:3: note: print_ is assigned
  tt_int_op(slen2, ==, slen);
  ^
mk_core/deps/libevent/test/regress_dns.c:418:3: note: print_ is overwritten
  tt_int_op(slen2, ==, slen);
  ^
mk_core/deps/libevent/test/regress_dns.c:419:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(ss2.ss_family, ==, 0);
  ^
mk_core/deps/libevent/test/regress_dns.c:419:3: note: print_ is assigned
  tt_int_op(ss2.ss_family, ==, 0);
  ^
mk_core/deps/libevent/test/regress_dns.c:419:3: note: print_ is overwritten
  tt_int_op(ss2.ss_family, ==, 0);
  ^
mk_core/deps/libevent/test/regress_dns.c:421:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(slen2, ==, slen);
  ^
mk_core/deps/libevent/test/regress_dns.c:421:3: note: print_ is assigned
  tt_int_op(slen2, ==, slen);
  ^
mk_core/deps/libevent/test/regress_dns.c:421:3: note: print_ is overwritten
  tt_int_op(slen2, ==, slen);
  ^
mk_core/deps/libevent/test/regress_dns.c:425:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(-1, ==, slen2);
  ^
mk_core/deps/libevent/test/regress_dns.c:425:3: note: print_ is assigned
  tt_int_op(-1, ==, slen2);
  ^
mk_core/deps/libevent/test/regress_dns.c:425:3: note: print_ is overwritten
  tt_int_op(-1, ==, slen2);
  ^
mk_core/deps/libevent/test/regress_dns.c:573:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r[0].type, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:573:2: note: print_ is assigned
 tt_int_op(r[0].type, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:573:2: note: print_ is overwritten
 tt_int_op(r[0].type, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:574:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r[0].count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:574:2: note: print_ is assigned
 tt_int_op(r[0].count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:574:2: note: print_ is overwritten
 tt_int_op(r[0].count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:575:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(((ev_uint32_t*)r[0].addrs)[0], ==, htonl(0x0b16212c));
 ^
mk_core/deps/libevent/test/regress_dns.c:575:2: note: print_ is assigned
 tt_int_op(((ev_uint32_t*)r[0].addrs)[0], ==, htonl(0x0b16212c));
 ^
mk_core/deps/libevent/test/regress_dns.c:575:2: note: print_ is overwritten
 tt_int_op(((ev_uint32_t*)r[0].addrs)[0], ==, htonl(0x0b16212c));
 ^
mk_core/deps/libevent/test/regress_dns.c:576:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r[1].type, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:576:2: note: print_ is assigned
 tt_int_op(r[1].type, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:576:2: note: print_ is overwritten
 tt_int_op(r[1].type, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:577:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r[1].count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:577:2: note: print_ is assigned
 tt_int_op(r[1].count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:577:2: note: print_ is overwritten
 tt_int_op(r[1].count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:578:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(((ev_uint32_t*)r[1].addrs)[0], ==, htonl(0xc8640064));
 ^
mk_core/deps/libevent/test/regress_dns.c:578:2: note: print_ is assigned
 tt_int_op(((ev_uint32_t*)r[1].addrs)[0], ==, htonl(0xc8640064));
 ^
mk_core/deps/libevent/test/regress_dns.c:578:2: note: print_ is overwritten
 tt_int_op(((ev_uint32_t*)r[1].addrs)[0], ==, htonl(0xc8640064));
 ^
mk_core/deps/libevent/test/regress_dns.c:579:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r[2].result, ==, DNS_ERR_NOTEXIST);
 ^
mk_core/deps/libevent/test/regress_dns.c:579:2: note: print_ is assigned
 tt_int_op(r[2].result, ==, DNS_ERR_NOTEXIST);
 ^
mk_core/deps/libevent/test/regress_dns.c:579:2: note: print_ is overwritten
 tt_int_op(r[2].result, ==, DNS_ERR_NOTEXIST);
 ^
mk_core/deps/libevent/test/regress_dns.c:580:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r[3].result, ==, DNS_ERR_NOTEXIST);
 ^
mk_core/deps/libevent/test/regress_dns.c:580:2: note: print_ is assigned
 tt_int_op(r[3].result, ==, DNS_ERR_NOTEXIST);
 ^
mk_core/deps/libevent/test/regress_dns.c:580:2: note: print_ is overwritten
 tt_int_op(r[3].result, ==, DNS_ERR_NOTEXIST);
 ^
mk_core/deps/libevent/test/regress_dns.c:581:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r[4].result, ==, DNS_ERR_NOTEXIST);
 ^
mk_core/deps/libevent/test/regress_dns.c:581:2: note: print_ is assigned
 tt_int_op(r[4].result, ==, DNS_ERR_NOTEXIST);
 ^
mk_core/deps/libevent/test/regress_dns.c:581:2: note: print_ is overwritten
 tt_int_op(r[4].result, ==, DNS_ERR_NOTEXIST);
 ^
mk_core/deps/libevent/test/regress_dns.c:582:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r[5].result, ==, DNS_ERR_NODATA);
 ^
mk_core/deps/libevent/test/regress_dns.c:582:2: note: print_ is assigned
 tt_int_op(r[5].result, ==, DNS_ERR_NODATA);
 ^
mk_core/deps/libevent/test/regress_dns.c:582:2: note: print_ is overwritten
 tt_int_op(r[5].result, ==, DNS_ERR_NODATA);
 ^
mk_core/deps/libevent/test/regress_dns.c:583:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r[5].ttl, ==, 42);
 ^
mk_core/deps/libevent/test/regress_dns.c:583:2: note: print_ is assigned
 tt_int_op(r[5].ttl, ==, 42);
 ^
mk_core/deps/libevent/test/regress_dns.c:583:2: note: print_ is overwritten
 tt_int_op(r[5].ttl, ==, 42);
 ^
mk_core/deps/libevent/test/regress_dns.c:584:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r[6].result, ==, DNS_ERR_NOTEXIST);
 ^
mk_core/deps/libevent/test/regress_dns.c:584:2: note: print_ is assigned
 tt_int_op(r[6].result, ==, DNS_ERR_NOTEXIST);
 ^
mk_core/deps/libevent/test/regress_dns.c:584:2: note: print_ is overwritten
 tt_int_op(r[6].result, ==, DNS_ERR_NOTEXIST);
 ^
mk_core/deps/libevent/test/regress_dns.c:585:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r[6].ttl, ==, 42);
 ^
mk_core/deps/libevent/test/regress_dns.c:585:2: note: print_ is assigned
 tt_int_op(r[6].ttl, ==, 42);
 ^
mk_core/deps/libevent/test/regress_dns.c:585:2: note: print_ is overwritten
 tt_int_op(r[6].ttl, ==, 42);
 ^
mk_core/deps/libevent/test/regress_dns.c:586:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r[7].result, ==, DNS_ERR_NODATA);
 ^
mk_core/deps/libevent/test/regress_dns.c:586:2: note: print_ is assigned
 tt_int_op(r[7].result, ==, DNS_ERR_NODATA);
 ^
mk_core/deps/libevent/test/regress_dns.c:586:2: note: print_ is overwritten
 tt_int_op(r[7].result, ==, DNS_ERR_NODATA);
 ^
mk_core/deps/libevent/test/regress_dns.c:587:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r[7].ttl, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:587:2: note: print_ is assigned
 tt_int_op(r[7].ttl, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:587:2: note: print_ is overwritten
 tt_int_op(r[7].ttl, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:609:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_ptr_op(evdns_base_resolve_ipv4(dns, "", 0, generic_dns_callback, NULL), ==, NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:609:2: note: print_ is assigned
 tt_ptr_op(evdns_base_resolve_ipv4(dns, "", 0, generic_dns_callback, NULL), ==, NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:609:2: note: print_ is overwritten
 tt_ptr_op(evdns_base_resolve_ipv4(dns, "", 0, generic_dns_callback, NULL), ==, NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:684:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r1.result, ==, DNS_ERR_CANCEL);
 ^
mk_core/deps/libevent/test/regress_dns.c:684:2: note: print_ is assigned
 tt_int_op(r1.result, ==, DNS_ERR_CANCEL);
 ^
mk_core/deps/libevent/test/regress_dns.c:684:2: note: print_ is overwritten
 tt_int_op(r1.result, ==, DNS_ERR_CANCEL);
 ^
mk_core/deps/libevent/test/regress_dns.c:759:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(drop_count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:759:2: note: print_ is assigned
 tt_int_op(drop_count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:759:2: note: print_ is overwritten
 tt_int_op(drop_count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:761:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r1.type, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:761:2: note: print_ is assigned
 tt_int_op(r1.type, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:761:2: note: print_ is overwritten
 tt_int_op(r1.type, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:762:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r1.count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:762:2: note: print_ is assigned
 tt_int_op(r1.count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:762:2: note: print_ is overwritten
 tt_int_op(r1.count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:763:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(((ev_uint32_t*)r1.addrs)[0], ==, htonl(0x10204080));
 ^
mk_core/deps/libevent/test/regress_dns.c:763:2: note: print_ is assigned
 tt_int_op(((ev_uint32_t*)r1.addrs)[0], ==, htonl(0x10204080));
 ^
mk_core/deps/libevent/test/regress_dns.c:763:2: note: print_ is overwritten
 tt_int_op(((ev_uint32_t*)r1.addrs)[0], ==, htonl(0x10204080));
 ^
mk_core/deps/libevent/test/regress_dns.c:781:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r1.result, ==, DNS_ERR_TIMEOUT);
 ^
mk_core/deps/libevent/test/regress_dns.c:781:2: note: print_ is assigned
 tt_int_op(r1.result, ==, DNS_ERR_TIMEOUT);
 ^
mk_core/deps/libevent/test/regress_dns.c:781:2: note: print_ is overwritten
 tt_int_op(r1.result, ==, DNS_ERR_TIMEOUT);
 ^
mk_core/deps/libevent/test/regress_dns.c:784:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(drop_count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:784:2: note: print_ is assigned
 tt_int_op(drop_count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:784:2: note: print_ is overwritten
 tt_int_op(drop_count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:789:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r1.result, ==, DNS_ERR_NONE);
 ^
mk_core/deps/libevent/test/regress_dns.c:789:2: note: print_ is assigned
 tt_int_op(r1.result, ==, DNS_ERR_NONE);
 ^
mk_core/deps/libevent/test/regress_dns.c:789:2: note: print_ is overwritten
 tt_int_op(r1.result, ==, DNS_ERR_NONE);
 ^
mk_core/deps/libevent/test/regress_dns.c:790:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r1.type, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:790:2: note: print_ is assigned
 tt_int_op(r1.type, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:790:2: note: print_ is overwritten
 tt_int_op(r1.type, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:791:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r1.count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:791:2: note: print_ is assigned
 tt_int_op(r1.count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:791:2: note: print_ is overwritten
 tt_int_op(r1.count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:792:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(((ev_uint32_t*)r1.addrs)[0], ==, htonl(0x10204080));
 ^
mk_core/deps/libevent/test/regress_dns.c:792:2: note: print_ is assigned
 tt_int_op(((ev_uint32_t*)r1.addrs)[0], ==, htonl(0x10204080));
 ^
mk_core/deps/libevent/test/regress_dns.c:792:2: note: print_ is overwritten
 tt_int_op(((ev_uint32_t*)r1.addrs)[0], ==, htonl(0x10204080));
 ^
mk_core/deps/libevent/test/regress_dns.c:863:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r1.result, ==, DNS_ERR_NONE);
 ^
mk_core/deps/libevent/test/regress_dns.c:863:2: note: print_ is assigned
 tt_int_op(r1.result, ==, DNS_ERR_NONE);
 ^
mk_core/deps/libevent/test/regress_dns.c:863:2: note: print_ is overwritten
 tt_int_op(r1.result, ==, DNS_ERR_NONE);
 ^
mk_core/deps/libevent/test/regress_dns.c:864:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r1.type, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:864:2: note: print_ is assigned
 tt_int_op(r1.type, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:864:2: note: print_ is overwritten
 tt_int_op(r1.type, ==, DNS_IPv4_A);
 ^
mk_core/deps/libevent/test/regress_dns.c:865:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r1.count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:865:2: note: print_ is assigned
 tt_int_op(r1.count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:865:2: note: print_ is overwritten
 tt_int_op(r1.count, ==, 1);
 ^
mk_core/deps/libevent/test/regress_dns.c:866:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(((ev_uint32_t*)r1.addrs)[0], ==, htonl(0xf00ff00f));
 ^
mk_core/deps/libevent/test/regress_dns.c:866:2: note: print_ is assigned
 tt_int_op(((ev_uint32_t*)r1.addrs)[0], ==, htonl(0xf00ff00f));
 ^
mk_core/deps/libevent/test/regress_dns.c:866:2: note: print_ is overwritten
 tt_int_op(((ev_uint32_t*)r1.addrs)[0], ==, htonl(0xf00ff00f));
 ^
mk_core/deps/libevent/test/regress_dns.c:869:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(internal_error_table[0].seen, >, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:869:2: note: print_ is assigned
 tt_int_op(internal_error_table[0].seen, >, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:869:2: note: print_ is overwritten
 tt_int_op(internal_error_table[0].seen, >, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:939:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(r[i].type, ==, DNS_IPv4_A);
  ^
mk_core/deps/libevent/test/regress_dns.c:939:3: note: print_ is assigned
  tt_int_op(r[i].type, ==, DNS_IPv4_A);
  ^
mk_core/deps/libevent/test/regress_dns.c:939:3: note: print_ is overwritten
  tt_int_op(r[i].type, ==, DNS_IPv4_A);
  ^
mk_core/deps/libevent/test/regress_dns.c:940:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(r[i].count, ==, 1);
  ^
mk_core/deps/libevent/test/regress_dns.c:940:3: note: print_ is assigned
  tt_int_op(r[i].count, ==, 1);
  ^
mk_core/deps/libevent/test/regress_dns.c:940:3: note: print_ is overwritten
  tt_int_op(r[i].count, ==, 1);
  ^
mk_core/deps/libevent/test/regress_dns.c:941:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(((ev_uint32_t*)r[i].addrs)[0], ==, htonl(0xf00ff00f));
  ^
mk_core/deps/libevent/test/regress_dns.c:941:3: note: print_ is assigned
  tt_int_op(((ev_uint32_t*)r[i].addrs)[0], ==, htonl(0xf00ff00f));
  ^
mk_core/deps/libevent/test/regress_dns.c:941:3: note: print_ is overwritten
  tt_int_op(((ev_uint32_t*)r[i].addrs)[0], ==, htonl(0xf00ff00f));
  ^
mk_core/deps/libevent/test/regress_dns.c:994:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_replies_left, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:994:2: note: print_ is assigned
 tt_int_op(n_replies_left, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:994:2: note: print_ is overwritten
 tt_int_op(n_replies_left, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:996:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r.result, ==, DNS_ERR_TIMEOUT);
 ^
mk_core/deps/libevent/test/regress_dns.c:996:2: note: print_ is assigned
 tt_int_op(r.result, ==, DNS_ERR_TIMEOUT);
 ^
mk_core/deps/libevent/test/regress_dns.c:996:2: note: print_ is overwritten
 tt_int_op(r.result, ==, DNS_ERR_TIMEOUT);
 ^
mk_core/deps/libevent/test/regress_dns.c:997:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r.count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:997:2: note: print_ is assigned
 tt_int_op(r.count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:997:2: note: print_ is overwritten
 tt_int_op(r.count, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:998:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_ptr_op(r.addrs, ==, NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:998:2: note: print_ is assigned
 tt_ptr_op(r.addrs, ==, NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:998:2: note: print_ is overwritten
 tt_ptr_op(r.addrs, ==, NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:1226:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(dns_port, >=, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1226:2: note: print_ is assigned
 tt_int_op(dns_port, >=, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1226:2: note: print_ is overwritten
 tt_int_op(dns_port, >=, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1284:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(be1_outcome.what, ==, BEV_EVENT_ERROR);
 ^
mk_core/deps/libevent/test/regress_dns.c:1284:2: note: print_ is assigned
 tt_int_op(be1_outcome.what, ==, BEV_EVENT_ERROR);
 ^
mk_core/deps/libevent/test/regress_dns.c:1284:2: note: print_ is overwritten
 tt_int_op(be1_outcome.what, ==, BEV_EVENT_ERROR);
 ^
mk_core/deps/libevent/test/regress_dns.c:1285:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(be1_outcome.dnserr, ==, EVUTIL_EAI_NONAME);
 ^
mk_core/deps/libevent/test/regress_dns.c:1285:2: note: print_ is assigned
 tt_int_op(be1_outcome.dnserr, ==, EVUTIL_EAI_NONAME);
 ^
mk_core/deps/libevent/test/regress_dns.c:1285:2: note: print_ is overwritten
 tt_int_op(be1_outcome.dnserr, ==, EVUTIL_EAI_NONAME);
 ^
mk_core/deps/libevent/test/regress_dns.c:1286:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(be2_outcome.what, ==, BEV_EVENT_CONNECTED);
 ^
mk_core/deps/libevent/test/regress_dns.c:1286:2: note: print_ is assigned
 tt_int_op(be2_outcome.what, ==, BEV_EVENT_CONNECTED);
 ^
mk_core/deps/libevent/test/regress_dns.c:1286:2: note: print_ is overwritten
 tt_int_op(be2_outcome.what, ==, BEV_EVENT_CONNECTED);
 ^
mk_core/deps/libevent/test/regress_dns.c:1287:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(be2_outcome.dnserr, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1287:2: note: print_ is assigned
 tt_int_op(be2_outcome.dnserr, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1287:2: note: print_ is overwritten
 tt_int_op(be2_outcome.dnserr, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1288:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(be3_outcome.what, ==, BEV_EVENT_CONNECTED);
 ^
mk_core/deps/libevent/test/regress_dns.c:1288:2: note: print_ is assigned
 tt_int_op(be3_outcome.what, ==, BEV_EVENT_CONNECTED);
 ^
mk_core/deps/libevent/test/regress_dns.c:1288:2: note: print_ is overwritten
 tt_int_op(be3_outcome.what, ==, BEV_EVENT_CONNECTED);
 ^
mk_core/deps/libevent/test/regress_dns.c:1289:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(be3_outcome.dnserr, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1289:2: note: print_ is assigned
 tt_int_op(be3_outcome.dnserr, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1289:2: note: print_ is overwritten
 tt_int_op(be3_outcome.dnserr, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1290:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(be4_outcome.what, ==, BEV_EVENT_CONNECTED);
 ^
mk_core/deps/libevent/test/regress_dns.c:1290:2: note: print_ is assigned
 tt_int_op(be4_outcome.what, ==, BEV_EVENT_CONNECTED);
 ^
mk_core/deps/libevent/test/regress_dns.c:1290:2: note: print_ is overwritten
 tt_int_op(be4_outcome.what, ==, BEV_EVENT_CONNECTED);
 ^
mk_core/deps/libevent/test/regress_dns.c:1291:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(be4_outcome.dnserr, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1291:2: note: print_ is assigned
 tt_int_op(be4_outcome.dnserr, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1291:2: note: print_ is overwritten
 tt_int_op(be4_outcome.dnserr, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1293:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(be5_outcome.what, ==, BEV_EVENT_ERROR);
  ^
mk_core/deps/libevent/test/regress_dns.c:1293:3: note: print_ is assigned
  tt_int_op(be5_outcome.what, ==, BEV_EVENT_ERROR);
  ^
mk_core/deps/libevent/test/regress_dns.c:1293:3: note: print_ is overwritten
  tt_int_op(be5_outcome.what, ==, BEV_EVENT_ERROR);
  ^
mk_core/deps/libevent/test/regress_dns.c:1294:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(be5_outcome.dnserr, ==, expect_err5);
  ^
mk_core/deps/libevent/test/regress_dns.c:1294:3: note: print_ is assigned
  tt_int_op(be5_outcome.dnserr, ==, expect_err5);
  ^
mk_core/deps/libevent/test/regress_dns.c:1294:3: note: print_ is overwritten
  tt_int_op(be5_outcome.dnserr, ==, expect_err5);
  ^
mk_core/deps/libevent/test/regress_dns.c:1297:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_accept, ==, 3);
 ^
mk_core/deps/libevent/test/regress_dns.c:1297:2: note: print_ is assigned
 tt_int_op(n_accept, ==, 3);
 ^
mk_core/deps/libevent/test/regress_dns.c:1297:2: note: print_ is overwritten
 tt_int_op(n_accept, ==, 3);
 ^
mk_core/deps/libevent/test/regress_dns.c:1298:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_dns, ==, 2);
 ^
mk_core/deps/libevent/test/regress_dns.c:1298:2: note: print_ is assigned
 tt_int_op(n_dns, ==, 2);
 ^
mk_core/deps/libevent/test/regress_dns.c:1298:2: note: print_ is overwritten
 tt_int_op(n_dns, ==, 2);
 ^
mk_core/deps/libevent/test/regress_dns.c:1387:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_ptr_op(local_outcome.ai,!=,NULL);
  ^
mk_core/deps/libevent/test/regress_dns.c:1387:3: note: print_ is assigned
  tt_ptr_op(local_outcome.ai,!=,NULL);
  ^
mk_core/deps/libevent/test/regress_dns.c:1387:3: note: print_ is overwritten
  tt_ptr_op(local_outcome.ai,!=,NULL);
  ^
mk_core/deps/libevent/test/regress_dns.c:1402:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_ptr_op(r,==,NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:1402:2: note: print_ is assigned
 tt_ptr_op(r,==,NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:1402:2: note: print_ is overwritten
 tt_ptr_op(r,==,NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:1403:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(local_outcome.err,==,EVUTIL_EAI_NONAME);
 ^
mk_core/deps/libevent/test/regress_dns.c:1403:2: note: print_ is assigned
 tt_int_op(local_outcome.err,==,EVUTIL_EAI_NONAME);
 ^
mk_core/deps/libevent/test/regress_dns.c:1403:2: note: print_ is overwritten
 tt_int_op(local_outcome.err,==,EVUTIL_EAI_NONAME);
 ^
mk_core/deps/libevent/test/regress_dns.c:1404:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_ptr_op(local_outcome.ai,==,NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:1404:2: note: print_ is assigned
 tt_ptr_op(local_outcome.ai,==,NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:1404:2: note: print_ is overwritten
 tt_ptr_op(local_outcome.ai,==,NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:1414:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1414:2: note: print_ is assigned
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1414:2: note: print_ is overwritten
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1416:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_ptr_op(local_outcome.ai->ai_next,==,NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:1416:2: note: print_ is assigned
 tt_ptr_op(local_outcome.ai->ai_next,==,NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:1416:2: note: print_ is overwritten
 tt_ptr_op(local_outcome.ai->ai_next,==,NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:1428:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1428:2: note: print_ is assigned
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1428:2: note: print_ is overwritten
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1448:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1448:2: note: print_ is assigned
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1448:2: note: print_ is overwritten
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1469:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1469:2: note: print_ is assigned
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1469:2: note: print_ is overwritten
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1490:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1490:2: note: print_ is assigned
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1490:2: note: print_ is overwritten
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1511:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1511:2: note: print_ is assigned
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1511:2: note: print_ is overwritten
 tt_int_op(local_outcome.err,==,0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1515:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_ptr_op(a->ai_next, ==, NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:1515:2: note: print_ is assigned
 tt_ptr_op(a->ai_next, ==, NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:1515:2: note: print_ is overwritten
 tt_ptr_op(a->ai_next, ==, NULL);
 ^
mk_core/deps/libevent/test/regress_dns.c:1524:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(dns_port, >=, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1524:2: note: print_ is assigned
 tt_int_op(dns_port, >=, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1524:2: note: print_ is overwritten
 tt_int_op(dns_port, >=, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1629:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(a_out[0].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1629:2: note: print_ is assigned
 tt_int_op(a_out[0].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1629:2: note: print_ is overwritten
 tt_int_op(a_out[0].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1640:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_str_op(a_out[0].ai->ai_canonname, ==, "both-canonical.example.com");
 ^
mk_core/deps/libevent/test/regress_dns.c:1640:2: note: print_ is assigned
 tt_str_op(a_out[0].ai->ai_canonname, ==, "both-canonical.example.com");
 ^
mk_core/deps/libevent/test/regress_dns.c:1640:2: note: print_ is overwritten
 tt_str_op(a_out[0].ai->ai_canonname, ==, "both-canonical.example.com");
 ^
mk_core/deps/libevent/test/regress_dns.c:1643:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(a_out[1].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1643:2: note: print_ is assigned
 tt_int_op(a_out[1].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1643:2: note: print_ is overwritten
 tt_int_op(a_out[1].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1651:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(a_out[2].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1651:2: note: print_ is assigned
 tt_int_op(a_out[2].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1651:2: note: print_ is overwritten
 tt_int_op(a_out[2].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1657:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(a_out[3].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1657:2: note: print_ is assigned
 tt_int_op(a_out[3].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1657:2: note: print_ is overwritten
 tt_int_op(a_out[3].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1663:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(a_out[4].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1663:2: note: print_ is assigned
 tt_int_op(a_out[4].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1663:2: note: print_ is overwritten
 tt_int_op(a_out[4].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1669:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(a_out[5].err, ==, EVUTIL_EAI_NONAME);
 ^
mk_core/deps/libevent/test/regress_dns.c:1669:2: note: print_ is assigned
 tt_int_op(a_out[5].err, ==, EVUTIL_EAI_NONAME);
 ^
mk_core/deps/libevent/test/regress_dns.c:1669:2: note: print_ is overwritten
 tt_int_op(a_out[5].err, ==, EVUTIL_EAI_NONAME);
 ^
mk_core/deps/libevent/test/regress_dns.c:1673:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(a_out[6].err, ==, EVUTIL_EAI_NONAME);
 ^
mk_core/deps/libevent/test/regress_dns.c:1673:2: note: print_ is assigned
 tt_int_op(a_out[6].err, ==, EVUTIL_EAI_NONAME);
 ^
mk_core/deps/libevent/test/regress_dns.c:1673:2: note: print_ is overwritten
 tt_int_op(a_out[6].err, ==, EVUTIL_EAI_NONAME);
 ^
mk_core/deps/libevent/test/regress_dns.c:1677:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(a_out[7].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1677:2: note: print_ is assigned
 tt_int_op(a_out[7].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1677:2: note: print_ is overwritten
 tt_int_op(a_out[7].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1683:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(a_out[8].err, ==, EVUTIL_EAI_NONAME);
 ^
mk_core/deps/libevent/test/regress_dns.c:1683:2: note: print_ is assigned
 tt_int_op(a_out[8].err, ==, EVUTIL_EAI_NONAME);
 ^
mk_core/deps/libevent/test/regress_dns.c:1683:2: note: print_ is overwritten
 tt_int_op(a_out[8].err, ==, EVUTIL_EAI_NONAME);
 ^
mk_core/deps/libevent/test/regress_dns.c:1687:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(a_out[9].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1687:2: note: print_ is assigned
 tt_int_op(a_out[9].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1687:2: note: print_ is overwritten
 tt_int_op(a_out[9].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1701:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(a_out[10].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1701:2: note: print_ is assigned
 tt_int_op(a_out[10].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1701:2: note: print_ is overwritten
 tt_int_op(a_out[10].err, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1707:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(a_out[11].err, ==, EVUTIL_EAI_CANCEL);
 ^
mk_core/deps/libevent/test/regress_dns.c:1707:2: note: print_ is assigned
 tt_int_op(a_out[11].err, ==, EVUTIL_EAI_CANCEL);
 ^
mk_core/deps/libevent/test/regress_dns.c:1707:2: note: print_ is overwritten
 tt_int_op(a_out[11].err, ==, EVUTIL_EAI_CANCEL);
 ^
mk_core/deps/libevent/test/regress_dns.c:2063:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_replies_left, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:2063:2: note: print_ is assigned
 tt_int_op(n_replies_left, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:2063:2: note: print_ is overwritten
 tt_int_op(n_replies_left, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:2065:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(r[i].result, ==, DNS_ERR_SHUTDOWN);
  ^
mk_core/deps/libevent/test/regress_dns.c:2065:3: note: print_ is assigned
  tt_int_op(r[i].result, ==, DNS_ERR_SHUTDOWN);
  ^
mk_core/deps/libevent/test/regress_dns.c:2065:3: note: print_ is overwritten
  tt_int_op(r[i].result, ==, DNS_ERR_SHUTDOWN);
  ^
mk_core/deps/libevent/test/regress_dns.c:2108:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_replies_left, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:2108:2: note: print_ is assigned
 tt_int_op(n_replies_left, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:2108:2: note: print_ is overwritten
 tt_int_op(n_replies_left, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:2110:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(r[i].result, ==, EVUTIL_EAI_FAIL);
  ^
mk_core/deps/libevent/test/regress_dns.c:2110:3: note: print_ is assigned
  tt_int_op(r[i].result, ==, EVUTIL_EAI_FAIL);
  ^
mk_core/deps/libevent/test/regress_dns.c:2110:3: note: print_ is overwritten
  tt_int_op(r[i].result, ==, EVUTIL_EAI_FAIL);
  ^
mk_core/deps/libevent/test/regress_dns.c:1874:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(allocated_chunks, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1874:2: note: print_ is assigned
 tt_int_op(allocated_chunks, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1874:2: note: print_ is overwritten
 tt_int_op(allocated_chunks, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1871:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(allocated_chunks, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1871:2: note: print_ is assigned
 tt_int_op(allocated_chunks, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:1871:2: note: print_ is overwritten
 tt_int_op(allocated_chunks, ==, 0);
 ^
mk_core/deps/libevent/test/regress_dns.c:105:0: information: Skipping configuration 'EVENT__HAVE_INET_NTOP;EVENT__HAVE_STRUCT_IN6_ADDR;INET6_ADDRSTRLEN' since the value of 'INET6_ADDRSTRLEN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char buf[INET6_ADDRSTRLEN+1];
^
mk_core/deps/libevent/test/regress_dns.c:326:0: information: Skipping configuration 'EVENT__HAVE_INET_NTOP;EVENT__HAVE_STRUCT_IN6_ADDR;INET6_ADDRSTRLEN' since the value of 'INET6_ADDRSTRLEN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char buf[INET6_ADDRSTRLEN+1];
^
mk_core/deps/libevent/test/regress_et.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/test/regress_et.c:103:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(send(pair[0], test, (int)strlen(test)+1, 0), >, 0);
 ^
mk_core/deps/libevent/test/regress_et.c:103:2: note: print_ is assigned
 tt_int_op(send(pair[0], test, (int)strlen(test)+1, 0), >, 0);
 ^
mk_core/deps/libevent/test/regress_et.c:103:2: note: print_ is overwritten
 tt_int_op(send(pair[0], test, (int)strlen(test)+1, 0), >, 0);
 ^
mk_core/deps/libevent/test/regress_et.c:136:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(called, ==, 1);
  ^
mk_core/deps/libevent/test/regress_et.c:136:3: note: print_ is assigned
  tt_int_op(called, ==, 1);
  ^
mk_core/deps/libevent/test/regress_et.c:136:3: note: print_ is overwritten
  tt_int_op(called, ==, 1);
  ^
mk_core/deps/libevent/test/regress_et.c:139:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(called, ==, 2);
  ^
mk_core/deps/libevent/test/regress_et.c:139:3: note: print_ is assigned
  tt_int_op(called, ==, 2);
  ^
mk_core/deps/libevent/test/regress_et.c:139:3: note: print_ is overwritten
  tt_int_op(called, ==, 2);
  ^
mk_core/deps/libevent/test/regress_et.c:178:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, event_add(ev_et, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:178:2: note: print_ is assigned
 tt_int_op(0, ==, event_add(ev_et, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:178:2: note: print_ is overwritten
 tt_int_op(0, ==, event_add(ev_et, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:179:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(-1, ==, event_add(ev_lt, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:179:2: note: print_ is assigned
 tt_int_op(-1, ==, event_add(ev_lt, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:179:2: note: print_ is overwritten
 tt_int_op(-1, ==, event_add(ev_lt, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:180:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(EV_READ, ==, event_pending(ev_et, EV_READ, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:180:2: note: print_ is assigned
 tt_int_op(EV_READ, ==, event_pending(ev_et, EV_READ, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:180:2: note: print_ is overwritten
 tt_int_op(EV_READ, ==, event_pending(ev_et, EV_READ, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:181:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, event_pending(ev_lt, EV_READ, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:181:2: note: print_ is assigned
 tt_int_op(0, ==, event_pending(ev_lt, EV_READ, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:181:2: note: print_ is overwritten
 tt_int_op(0, ==, event_pending(ev_lt, EV_READ, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:183:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, event_del(ev_et));
 ^
mk_core/deps/libevent/test/regress_et.c:183:2: note: print_ is assigned
 tt_int_op(0, ==, event_del(ev_et));
 ^
mk_core/deps/libevent/test/regress_et.c:183:2: note: print_ is overwritten
 tt_int_op(0, ==, event_del(ev_et));
 ^
mk_core/deps/libevent/test/regress_et.c:185:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, event_add(ev_lt, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:185:2: note: print_ is assigned
 tt_int_op(0, ==, event_add(ev_lt, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:185:2: note: print_ is overwritten
 tt_int_op(0, ==, event_add(ev_lt, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:186:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(-1, ==, event_add(ev_et, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:186:2: note: print_ is assigned
 tt_int_op(-1, ==, event_add(ev_et, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:186:2: note: print_ is overwritten
 tt_int_op(-1, ==, event_add(ev_et, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:187:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(EV_READ, ==, event_pending(ev_lt, EV_READ, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:187:2: note: print_ is assigned
 tt_int_op(EV_READ, ==, event_pending(ev_lt, EV_READ, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:187:2: note: print_ is overwritten
 tt_int_op(EV_READ, ==, event_pending(ev_lt, EV_READ, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:188:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(0, ==, event_pending(ev_et, EV_READ, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:188:2: note: print_ is assigned
 tt_int_op(0, ==, event_pending(ev_et, EV_READ, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:188:2: note: print_ is overwritten
 tt_int_op(0, ==, event_pending(ev_et, EV_READ, NULL));
 ^
mk_core/deps/libevent/test/regress_et.c:82:18: style: Local variable 'pair' shadows outer variable [shadowVariable]
 evutil_socket_t pair[2] = {-1,-1};
                 ^
mk_core/deps/libevent/test/regress.h:64:24: note: Shadowed declaration
extern evutil_socket_t pair[2];
                       ^
mk_core/deps/libevent/test/regress_et.c:82:18: note: Shadow variable
 evutil_socket_t pair[2] = {-1,-1};
                 ^
mk_core/deps/libevent/test/regress_finalize.c:94:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(cb_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:94:2: note: print_ is assigned
 tt_int_op(cb_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:94:2: note: print_ is overwritten
 tt_int_op(cb_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:95:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ev_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:95:2: note: print_ is assigned
 tt_int_op(ev_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:95:2: note: print_ is overwritten
 tt_int_op(ev_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:109:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(cb_called, ==, 1);
 ^
mk_core/deps/libevent/test/regress_finalize.c:109:2: note: print_ is assigned
 tt_int_op(cb_called, ==, 1);
 ^
mk_core/deps/libevent/test/regress_finalize.c:109:2: note: print_ is overwritten
 tt_int_op(cb_called, ==, 1);
 ^
mk_core/deps/libevent/test/regress_finalize.c:110:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ev_called, ==, 1);
 ^
mk_core/deps/libevent/test/regress_finalize.c:110:2: note: print_ is assigned
 tt_int_op(ev_called, ==, 1);
 ^
mk_core/deps/libevent/test/regress_finalize.c:110:2: note: print_ is overwritten
 tt_int_op(ev_called, ==, 1);
 ^
mk_core/deps/libevent/test/regress_finalize.c:123:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(cb_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:123:2: note: print_ is assigned
 tt_int_op(cb_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:123:2: note: print_ is overwritten
 tt_int_op(cb_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:124:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ev_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:124:2: note: print_ is assigned
 tt_int_op(ev_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:124:2: note: print_ is overwritten
 tt_int_op(ev_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:137:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ev_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:137:2: note: print_ is assigned
 tt_int_op(ev_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:137:2: note: print_ is overwritten
 tt_int_op(ev_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:154:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ev_called, ==, 200);
 ^
mk_core/deps/libevent/test/regress_finalize.c:154:2: note: print_ is assigned
 tt_int_op(ev_called, ==, 200);
 ^
mk_core/deps/libevent/test/regress_finalize.c:154:2: note: print_ is overwritten
 tt_int_op(ev_called, ==, 200);
 ^
mk_core/deps/libevent/test/regress_finalize.c:215:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ev_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:215:2: note: print_ is assigned
 tt_int_op(ev_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:215:2: note: print_ is overwritten
 tt_int_op(ev_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:216:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ev2_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:216:2: note: print_ is assigned
 tt_int_op(ev2_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:216:2: note: print_ is overwritten
 tt_int_op(ev2_called, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:219:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(tfff_p1_freed, ==, 1);
 ^
mk_core/deps/libevent/test/regress_finalize.c:219:2: note: print_ is assigned
 tt_int_op(tfff_p1_freed, ==, 1);
 ^
mk_core/deps/libevent/test/regress_finalize.c:219:2: note: print_ is overwritten
 tt_int_op(tfff_p1_freed, ==, 1);
 ^
mk_core/deps/libevent/test/regress_finalize.c:220:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(tfff_p2_freed, ==, 0);
 ^
mk_core/deps/libevent/test/regress_finalize.c:220:2: note: print_ is assigned
 tt_int_op(tfff_p2_freed, ==, 0);
 ^
mk_core/deps/libevent/test/regress_finalize.c:220:2: note: print_ is overwritten
 tt_int_op(tfff_p2_freed, ==, 0);
 ^
mk_core/deps/libevent/test/regress_finalize.c:272:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evc1.count, ==, 101);
 ^
mk_core/deps/libevent/test/regress_finalize.c:272:2: note: print_ is assigned
 tt_int_op(evc1.count, ==, 101);
 ^
mk_core/deps/libevent/test/regress_finalize.c:272:2: note: print_ is overwritten
 tt_int_op(evc1.count, ==, 101);
 ^
mk_core/deps/libevent/test/regress_finalize.c:273:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evc2.count, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:273:2: note: print_ is assigned
 tt_int_op(evc2.count, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:273:2: note: print_ is overwritten
 tt_int_op(evc2.count, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:285:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evc1.count, ==, 101);
 ^
mk_core/deps/libevent/test/regress_finalize.c:285:2: note: print_ is assigned
 tt_int_op(evc1.count, ==, 101);
 ^
mk_core/deps/libevent/test/regress_finalize.c:285:2: note: print_ is overwritten
 tt_int_op(evc1.count, ==, 101);
 ^
mk_core/deps/libevent/test/regress_finalize.c:286:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evc2.count, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:286:2: note: print_ is assigned
 tt_int_op(evc2.count, ==, 100);
 ^
mk_core/deps/libevent/test/regress_finalize.c:286:2: note: print_ is overwritten
 tt_int_op(evc2.count, ==, 100);
 ^
mk_core/deps/libevent/test/regress_http.c:650:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:650:2: note: print_ is assigned
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:650:2: note: print_ is overwritten
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:703:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:703:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:703:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:767:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:767:2: note: print_ is assigned
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:767:2: note: print_ is overwritten
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:790:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:790:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:790:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:850:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:850:2: note: print_ is assigned
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:850:2: note: print_ is overwritten
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:871:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 4);
 ^
mk_core/deps/libevent/test/regress_http.c:871:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 4);
 ^
mk_core/deps/libevent/test/regress_http.c:871:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 4);
 ^
mk_core/deps/libevent/test/regress_http.c:911:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(fd1, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:911:2: note: print_ is assigned
 tt_int_op(fd1, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:911:2: note: print_ is overwritten
 tt_int_op(fd1, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:933:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(fd2, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:933:2: note: print_ is assigned
 tt_int_op(fd2, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:933:2: note: print_ is overwritten
 tt_int_op(fd2, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:951:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(fd3, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:951:2: note: print_ is assigned
 tt_int_op(fd3, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:951:2: note: print_ is overwritten
 tt_int_op(fd3, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:1301:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evhttp_request_get_response_code(req), !=, HTTP_OK);
 ^
mk_core/deps/libevent/test/regress_http.c:1301:2: note: print_ is assigned
 tt_int_op(evhttp_request_get_response_code(req), !=, HTTP_OK);
 ^
mk_core/deps/libevent/test/regress_http.c:1301:2: note: print_ is overwritten
 tt_int_op(evhttp_request_get_response_code(req), !=, HTTP_OK);
 ^
mk_core/deps/libevent/test/regress_http.c:1367:4: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
   tt_int_op(evhttp_make_request(evcon[i], req, EVHTTP_REQ_GET, "/delay"), !=, -1);
   ^
mk_core/deps/libevent/test/regress_http.c:1367:4: note: print_ is assigned
   tt_int_op(evhttp_make_request(evcon[i], req, EVHTTP_REQ_GET, "/delay"), !=, -1);
   ^
mk_core/deps/libevent/test/regress_http.c:1367:4: note: print_ is overwritten
   tt_int_op(evhttp_make_request(evcon[i], req, EVHTTP_REQ_GET, "/delay"), !=, -1);
   ^
mk_core/deps/libevent/test/regress_http.c:1481:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evhttp_make_request(evcon, req, EVHTTP_REQ_GET, "/delay"),
 ^
mk_core/deps/libevent/test/regress_http.c:1481:2: note: print_ is assigned
 tt_int_op(evhttp_make_request(evcon, req, EVHTTP_REQ_GET, "/delay"),
 ^
mk_core/deps/libevent/test/regress_http.c:1481:2: note: print_ is overwritten
 tt_int_op(evhttp_make_request(evcon, req, EVHTTP_REQ_GET, "/delay"),
 ^
mk_core/deps/libevent/test/regress_http.c:1493:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(test_ok, ==, 2); /** no servers responses */
  ^
mk_core/deps/libevent/test/regress_http.c:1493:3: note: print_ is assigned
  tt_int_op(test_ok, ==, 2); /** no servers responses */
  ^
mk_core/deps/libevent/test/regress_http.c:1493:3: note: print_ is overwritten
  tt_int_op(test_ok, ==, 2); /** no servers responses */
  ^
mk_core/deps/libevent/test/regress_http.c:1495:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(test_ok, ==, 3);
  ^
mk_core/deps/libevent/test/regress_http.c:1495:3: note: print_ is assigned
  tt_int_op(test_ok, ==, 3);
  ^
mk_core/deps/libevent/test/regress_http.c:1495:3: note: print_ is overwritten
  tt_int_op(test_ok, ==, 3);
  ^
mk_core/deps/libevent/test/regress_http.c:1512:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evhttp_make_request(evcon, req, EVHTTP_REQ_GET, "/test"),
 ^
mk_core/deps/libevent/test/regress_http.c:1512:2: note: print_ is assigned
 tt_int_op(evhttp_make_request(evcon, req, EVHTTP_REQ_GET, "/test"),
 ^
mk_core/deps/libevent/test/regress_http.c:1512:2: note: print_ is overwritten
 tt_int_op(evhttp_make_request(evcon, req, EVHTTP_REQ_GET, "/test"),
 ^
mk_core/deps/libevent/test/regress_http.c:1532:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evhttp_make_request(evcon, req, EVHTTP_REQ_GET, "/test"),
 ^
mk_core/deps/libevent/test/regress_http.c:1532:2: note: print_ is assigned
 tt_int_op(evhttp_make_request(evcon, req, EVHTTP_REQ_GET, "/test"),
 ^
mk_core/deps/libevent/test/regress_http.c:1532:2: note: print_ is overwritten
 tt_int_op(evhttp_make_request(evcon, req, EVHTTP_REQ_GET, "/test"),
 ^
mk_core/deps/libevent/test/regress_http.c:1756:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:1756:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:1756:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:1945:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:1945:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:1945:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:1965:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:1965:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:1965:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:2086:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:2086:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:2086:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:2189:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2189:2: note: print_ is assigned
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2189:2: note: print_ is overwritten
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2206:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:2206:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:2206:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:2387:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2387:2: note: print_ is assigned
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2387:2: note: print_ is overwritten
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2393:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2393:2: note: print_ is assigned
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2393:2: note: print_ is overwritten
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2398:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2398:2: note: print_ is assigned
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2398:2: note: print_ is overwritten
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2403:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2403:2: note: print_ is assigned
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2403:2: note: print_ is overwritten
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2408:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2408:2: note: print_ is assigned
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2408:2: note: print_ is overwritten
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2412:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r, ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:2412:2: note: print_ is assigned
 tt_int_op(r, ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:2412:2: note: print_ is overwritten
 tt_int_op(r, ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:2417:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2417:2: note: print_ is assigned
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2417:2: note: print_ is overwritten
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2421:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2421:2: note: print_ is assigned
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2421:2: note: print_ is overwritten
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2427:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r, ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:2427:2: note: print_ is assigned
 tt_int_op(r, ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:2427:2: note: print_ is overwritten
 tt_int_op(r, ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:2431:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r, ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:2431:2: note: print_ is assigned
 tt_int_op(r, ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:2431:2: note: print_ is overwritten
 tt_int_op(r, ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:2435:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r, ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:2435:2: note: print_ is assigned
 tt_int_op(r, ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:2435:2: note: print_ is overwritten
 tt_int_op(r, ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:2439:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2439:2: note: print_ is assigned
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2439:2: note: print_ is overwritten
 tt_int_op(r, ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2632:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_want_str_op(evhttp_uri_get_fragment(uri), ==, "fragment");
 ^
mk_core/deps/libevent/test/regress_http.c:2632:2: note: print_ is assigned
 tt_want_str_op(evhttp_uri_get_fragment(uri), ==, "fragment");
 ^
mk_core/deps/libevent/test/regress_http.c:2632:2: note: print_ is overwritten
 tt_want_str_op(evhttp_uri_get_fragment(uri), ==, "fragment");
 ^
mk_core/deps/libevent/test/regress_http.c:2661:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_want_str_op(evhttp_uri_get_path(uri), ==, "/");
 ^
mk_core/deps/libevent/test/regress_http.c:2661:2: note: print_ is assigned
 tt_want_str_op(evhttp_uri_get_path(uri), ==, "/");
 ^
mk_core/deps/libevent/test/regress_http.c:2661:2: note: print_ is overwritten
 tt_want_str_op(evhttp_uri_get_path(uri), ==, "/");
 ^
mk_core/deps/libevent/test/regress_http.c:2871:8: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
       ENC("Hello", "Hello",0);
       ^
mk_core/deps/libevent/test/regress_http.c:2871:8: note: print_ is assigned
       ENC("Hello", "Hello",0);
       ^
mk_core/deps/libevent/test/regress_http.c:2871:8: note: print_ is overwritten
       ENC("Hello", "Hello",0);
       ^
mk_core/deps/libevent/test/regress_http.c:2872:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 ENC("99", "99",0);
 ^
mk_core/deps/libevent/test/regress_http.c:2872:2: note: print_ is assigned
 ENC("99", "99",0);
 ^
mk_core/deps/libevent/test/regress_http.c:2872:2: note: print_ is overwritten
 ENC("99", "99",0);
 ^
mk_core/deps/libevent/test/regress_http.c:2873:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 ENC("", "",0);
 ^
mk_core/deps/libevent/test/regress_http.c:2873:2: note: print_ is assigned
 ENC("", "",0);
 ^
mk_core/deps/libevent/test/regress_http.c:2873:2: note: print_ is overwritten
 ENC("", "",0);
 ^
mk_core/deps/libevent/test/regress_http.c:2874:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 ENC(
 ^
mk_core/deps/libevent/test/regress_http.c:2874:2: note: print_ is assigned
 ENC(
 ^
mk_core/deps/libevent/test/regress_http.c:2874:2: note: print_ is overwritten
 ENC(
 ^
mk_core/deps/libevent/test/regress_http.c:2877:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 ENC(" ", "%20",0);
 ^
mk_core/deps/libevent/test/regress_http.c:2877:2: note: print_ is assigned
 ENC(" ", "%20",0);
 ^
mk_core/deps/libevent/test/regress_http.c:2877:2: note: print_ is overwritten
 ENC(" ", "%20",0);
 ^
mk_core/deps/libevent/test/regress_http.c:2878:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 ENC(" ", "+",1);
 ^
mk_core/deps/libevent/test/regress_http.c:2878:2: note: print_ is assigned
 ENC(" ", "+",1);
 ^
mk_core/deps/libevent/test/regress_http.c:2878:2: note: print_ is overwritten
 ENC(" ", "+",1);
 ^
mk_core/deps/libevent/test/regress_http.c:2879:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 ENC("\xff\xf0\xe0", "%FF%F0%E0",0);
 ^
mk_core/deps/libevent/test/regress_http.c:2879:2: note: print_ is assigned
 ENC("\xff\xf0\xe0", "%FF%F0%E0",0);
 ^
mk_core/deps/libevent/test/regress_http.c:2879:2: note: print_ is overwritten
 ENC("\xff\xf0\xe0", "%FF%F0%E0",0);
 ^
mk_core/deps/libevent/test/regress_http.c:2880:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 ENC("\x01\x19", "%01%19",1);
 ^
mk_core/deps/libevent/test/regress_http.c:2880:2: note: print_ is assigned
 ENC("\x01\x19", "%01%19",1);
 ^
mk_core/deps/libevent/test/regress_http.c:2880:2: note: print_ is overwritten
 ENC("\x01\x19", "%01%19",1);
 ^
mk_core/deps/libevent/test/regress_http.c:2881:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 ENC("http://www.ietf.org/rfc/rfc3986.txt",
 ^
mk_core/deps/libevent/test/regress_http.c:2881:2: note: print_ is assigned
 ENC("http://www.ietf.org/rfc/rfc3986.txt",
 ^
mk_core/deps/libevent/test/regress_http.c:2881:2: note: print_ is overwritten
 ENC("http://www.ietf.org/rfc/rfc3986.txt",
 ^
mk_core/deps/libevent/test/regress_http.c:2884:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 ENC("1+2=3", "1%2B2%3D3",1);
 ^
mk_core/deps/libevent/test/regress_http.c:2884:2: note: print_ is assigned
 ENC("1+2=3", "1%2B2%3D3",1);
 ^
mk_core/deps/libevent/test/regress_http.c:2884:2: note: print_ is overwritten
 ENC("1+2=3", "1%2B2%3D3",1);
 ^
mk_core/deps/libevent/test/regress_http.c:2885:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 ENC("1+2=3", "1%2B2%3D3",0);
 ^
mk_core/deps/libevent/test/regress_http.c:2885:2: note: print_ is assigned
 ENC("1+2=3", "1%2B2%3D3",0);
 ^
mk_core/deps/libevent/test/regress_http.c:2885:2: note: print_ is overwritten
 ENC("1+2=3", "1%2B2%3D3",0);
 ^
mk_core/deps/libevent/test/regress_http.c:2890:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_str_op(s,==,"hello%00world");
 ^
mk_core/deps/libevent/test/regress_http.c:2890:2: note: print_ is assigned
 tt_str_op(s,==,"hello%00world");
 ^
mk_core/deps/libevent/test/regress_http.c:2890:2: note: print_ is overwritten
 tt_str_op(s,==,"hello%00world");
 ^
mk_core/deps/libevent/test/regress_http.c:2898:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(bytes_decoded,==,6);
 ^
mk_core/deps/libevent/test/regress_http.c:2898:2: note: print_ is assigned
 tt_int_op(bytes_decoded,==,6);
 ^
mk_core/deps/libevent/test/regress_http.c:2898:2: note: print_ is overwritten
 tt_int_op(bytes_decoded,==,6);
 ^
mk_core/deps/libevent/test/regress_http.c:2899:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_str_op(s,==,"hello%");
 ^
mk_core/deps/libevent/test/regress_http.c:2899:2: note: print_ is assigned
 tt_str_op(s,==,"hello%");
 ^
mk_core/deps/libevent/test/regress_http.c:2899:2: note: print_ is overwritten
 tt_str_op(s,==,"hello%");
 ^
mk_core/deps/libevent/test/regress_http.c:2905:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 DEC("%%xhello th+ere \xff",
 ^
mk_core/deps/libevent/test/regress_http.c:2905:2: note: print_ is assigned
 DEC("%%xhello th+ere \xff",
 ^
mk_core/deps/libevent/test/regress_http.c:2905:2: note: print_ is overwritten
 DEC("%%xhello th+ere \xff",
 ^
mk_core/deps/libevent/test/regress_http.c:2908:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 DEC("plus+should%20work+", "plus should work ",1);
 ^
mk_core/deps/libevent/test/regress_http.c:2908:2: note: print_ is assigned
 DEC("plus+should%20work+", "plus should work ",1);
 ^
mk_core/deps/libevent/test/regress_http.c:2908:2: note: print_ is overwritten
 DEC("plus+should%20work+", "plus should work ",1);
 ^
mk_core/deps/libevent/test/regress_http.c:2910:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 DEC("%f0%a0%b0", "\xf0\xa0\xb0",1);
 ^
mk_core/deps/libevent/test/regress_http.c:2910:2: note: print_ is assigned
 DEC("%f0%a0%b0", "\xf0\xa0\xb0",1);
 ^
mk_core/deps/libevent/test/regress_http.c:2910:2: note: print_ is overwritten
 DEC("%f0%a0%b0", "\xf0\xa0\xb0",1);
 ^
mk_core/deps/libevent/test/regress_http.c:2915:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(sz,==,5);
 ^
mk_core/deps/libevent/test/regress_http.c:2915:2: note: print_ is assigned
 tt_int_op(sz,==,5);
 ^
mk_core/deps/libevent/test/regress_http.c:2915:2: note: print_ is overwritten
 tt_int_op(sz,==,5);
 ^
mk_core/deps/libevent/test/regress_http.c:2929:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 OLD_DEC("http://example.com/normal+path/?key=val+with+spaces",
 ^
mk_core/deps/libevent/test/regress_http.c:2929:2: note: print_ is assigned
 OLD_DEC("http://example.com/normal+path/?key=val+with+spaces",
 ^
mk_core/deps/libevent/test/regress_http.c:2929:2: note: print_ is overwritten
 OLD_DEC("http://example.com/normal+path/?key=val+with+spaces",
 ^
mk_core/deps/libevent/test/regress_http.c:2958:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2958:2: note: print_ is assigned
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2958:2: note: print_ is overwritten
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:2981:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:2981:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:2981:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:3045:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:3045:2: note: print_ is assigned
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:3045:2: note: print_ is overwritten
 tt_int_op(fd, >=, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:3081:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:3081:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:3081:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:3286:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(tv_end.tv_sec, <, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3286:2: note: print_ is assigned
 tt_int_op(tv_end.tv_sec, <, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3286:2: note: print_ is overwritten
 tt_int_op(tv_end.tv_sec, <, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3288:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:3288:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:3288:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 2);
 ^
mk_core/deps/libevent/test/regress_http.c:3456:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evhttp_request_get_response_code(req), ==, HTTP_OK);
 ^
mk_core/deps/libevent/test/regress_http.c:3456:2: note: print_ is assigned
 tt_int_op(evhttp_request_get_response_code(req), ==, HTTP_OK);
 ^
mk_core/deps/libevent/test/regress_http.c:3456:2: note: print_ is overwritten
 tt_int_op(evhttp_request_get_response_code(req), ==, HTTP_OK);
 ^
mk_core/deps/libevent/test/regress_http.c:3558:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3558:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3558:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3570:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evhttp_request_get_response_code(req), !=, HTTP_OK);
 ^
mk_core/deps/libevent/test/regress_http.c:3570:2: note: print_ is assigned
 tt_int_op(evhttp_request_get_response_code(req), !=, HTTP_OK);
 ^
mk_core/deps/libevent/test/regress_http.c:3570:2: note: print_ is overwritten
 tt_int_op(evhttp_request_get_response_code(req), !=, HTTP_OK);
 ^
mk_core/deps/libevent/test/regress_http.c:3575:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_uint_op(evbuffer_get_length(evhttp_request_get_input_buffer(req)), ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:3575:2: note: print_ is assigned
 tt_uint_op(evbuffer_get_length(evhttp_request_get_input_buffer(req)), ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:3575:2: note: print_ is overwritten
 tt_uint_op(evbuffer_get_length(evhttp_request_get_input_buffer(req)), ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:3627:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3627:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3627:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3685:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(tv_end.tv_sec, <, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3685:2: note: print_ is assigned
 tt_int_op(tv_end.tv_sec, <, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3685:2: note: print_ is overwritten
 tt_int_op(tv_end.tv_sec, <, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3687:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3687:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3687:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3721:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 test_timeval_diff_leq(&tv_start, &tv_end, 500, 200);
 ^
mk_core/deps/libevent/test/regress_http.c:3721:2: note: print_ is assigned
 test_timeval_diff_leq(&tv_start, &tv_end, 500, 200);
 ^
mk_core/deps/libevent/test/regress_http.c:3721:2: note: print_ is overwritten
 test_timeval_diff_leq(&tv_start, &tv_end, 500, 200);
 ^
mk_core/deps/libevent/test/regress_http.c:3757:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 test_timeval_diff_leq(&tv_start, &tv_end, 1000, 400);
 ^
mk_core/deps/libevent/test/regress_http.c:3757:2: note: print_ is assigned
 test_timeval_diff_leq(&tv_start, &tv_end, 1000, 400);
 ^
mk_core/deps/libevent/test/regress_http.c:3757:2: note: print_ is overwritten
 test_timeval_diff_leq(&tv_start, &tv_end, 1000, 400);
 ^
mk_core/deps/libevent/test/regress_http.c:3759:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3759:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3759:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3812:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_str_op(escaped, ==, "&lt;script&gt;");
 ^
mk_core/deps/libevent/test/regress_http.c:3812:2: note: print_ is assigned
 tt_str_op(escaped, ==, "&lt;script&gt;");
 ^
mk_core/deps/libevent/test/regress_http.c:3812:2: note: print_ is overwritten
 tt_str_op(escaped, ==, "&lt;script&gt;");
 ^
mk_core/deps/libevent/test/regress_http.c:3817:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_str_op(escaped, ==, "&quot;&#039;&amp;");
 ^
mk_core/deps/libevent/test/regress_http.c:3817:2: note: print_ is assigned
 tt_str_op(escaped, ==, "&quot;&#039;&amp;");
 ^
mk_core/deps/libevent/test/regress_http.c:3817:2: note: print_ is overwritten
 tt_str_op(escaped, ==, "&quot;&#039;&amp;");
 ^
mk_core/deps/libevent/test/regress_http.c:3821:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evhttp_set_cb(http, "/test", http_basic_cb, http), ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:3821:2: note: print_ is assigned
 tt_int_op(evhttp_set_cb(http, "/test", http_basic_cb, http), ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:3821:2: note: print_ is overwritten
 tt_int_op(evhttp_set_cb(http, "/test", http_basic_cb, http), ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:3822:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evhttp_set_cb(http, "/test", http_basic_cb, http), ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:3822:2: note: print_ is assigned
 tt_int_op(evhttp_set_cb(http, "/test", http_basic_cb, http), ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:3822:2: note: print_ is overwritten
 tt_int_op(evhttp_set_cb(http, "/test", http_basic_cb, http), ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:3823:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evhttp_del_cb(http, "/test"), ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:3823:2: note: print_ is assigned
 tt_int_op(evhttp_del_cb(http, "/test"), ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:3823:2: note: print_ is overwritten
 tt_int_op(evhttp_del_cb(http, "/test"), ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:3824:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evhttp_del_cb(http, "/test"), ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:3824:2: note: print_ is assigned
 tt_int_op(evhttp_del_cb(http, "/test"), ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:3824:2: note: print_ is overwritten
 tt_int_op(evhttp_del_cb(http, "/test"), ==, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:3825:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evhttp_set_cb(http, "/test", http_basic_cb, http), ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:3825:2: note: print_ is assigned
 tt_int_op(evhttp_set_cb(http, "/test", http_basic_cb, http), ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:3825:2: note: print_ is overwritten
 tt_int_op(evhttp_set_cb(http, "/test", http_basic_cb, http), ==, 0);
 ^
mk_core/deps/libevent/test/regress_http.c:3847:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_ptr_op(http, !=, NULL);
 ^
mk_core/deps/libevent/test/regress_http.c:3847:2: note: print_ is assigned
 tt_ptr_op(http, !=, NULL);
 ^
mk_core/deps/libevent/test/regress_http.c:3847:2: note: print_ is overwritten
 tt_ptr_op(http, !=, NULL);
 ^
mk_core/deps/libevent/test/regress_http.c:3851:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(fd, !=, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:3851:2: note: print_ is assigned
 tt_int_op(fd, !=, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:3851:2: note: print_ is overwritten
 tt_int_op(fd, !=, -1);
 ^
mk_core/deps/libevent/test/regress_http.c:3855:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_ptr_op(bev, !=, NULL);
 ^
mk_core/deps/libevent/test/regress_http.c:3855:2: note: print_ is assigned
 tt_ptr_op(bev, !=, NULL);
 ^
mk_core/deps/libevent/test/regress_http.c:3855:2: note: print_ is overwritten
 tt_ptr_op(bev, !=, NULL);
 ^
mk_core/deps/libevent/test/regress_http.c:3876:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(found_multi, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3876:2: note: print_ is assigned
 tt_int_op(found_multi, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3876:2: note: print_ is overwritten
 tt_int_op(found_multi, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3877:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(found_multi2, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3877:2: note: print_ is assigned
 tt_int_op(found_multi2, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3877:2: note: print_ is overwritten
 tt_int_op(found_multi2, ==, 1);
 ^
mk_core/deps/libevent/test/regress_http.c:3878:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(test_ok, ==, 4);
 ^
mk_core/deps/libevent/test/regress_http.c:3878:2: note: print_ is assigned
 tt_int_op(test_ok, ==, 4);
 ^
mk_core/deps/libevent/test/regress_http.c:3878:2: note: print_ is overwritten
 tt_int_op(test_ok, ==, 4);
 ^
mk_core/deps/libevent/test/regress_http.c:3943:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evhttp_request_get_response_code(req), ==, HTTP_BADREQUEST);
 ^
mk_core/deps/libevent/test/regress_http.c:3943:2: note: print_ is assigned
 tt_int_op(evhttp_request_get_response_code(req), ==, HTTP_BADREQUEST);
 ^
mk_core/deps/libevent/test/regress_http.c:3943:2: note: print_ is overwritten
 tt_int_op(evhttp_request_get_response_code(req), ==, HTTP_BADREQUEST);
 ^
mk_core/deps/libevent/test/regress_http.c:3951:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evhttp_request_get_response_code(req), ==, HTTP_ENTITYTOOLARGE);
 ^
mk_core/deps/libevent/test/regress_http.c:3951:2: note: print_ is assigned
 tt_int_op(evhttp_request_get_response_code(req), ==, HTTP_ENTITYTOOLARGE);
 ^
mk_core/deps/libevent/test/regress_http.c:3951:2: note: print_ is overwritten
 tt_int_op(evhttp_request_get_response_code(req), ==, HTTP_ENTITYTOOLARGE);
 ^
mk_core/deps/libevent/test/regress_http.c:3960:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evhttp_request_get_response_code(req), ==, HTTP_EXPECTATIONFAILED);
 ^
mk_core/deps/libevent/test/regress_http.c:3960:2: note: print_ is assigned
 tt_int_op(evhttp_request_get_response_code(req), ==, HTTP_EXPECTATIONFAILED);
 ^
mk_core/deps/libevent/test/regress_http.c:3960:2: note: print_ is overwritten
 tt_int_op(evhttp_request_get_response_code(req), ==, HTTP_EXPECTATIONFAILED);
 ^
mk_core/deps/libevent/test/regress_http.c:436:8: style: Local variable 'ssl' shadows outer argument [shadowArgument]
  SSL *ssl = SSL_new(get_ssl_ctx());
       ^
mk_core/deps/libevent/test/regress_http.c:427:49: note: Shadowed declaration
create_bev(struct event_base *base, int fd, int ssl)
                                                ^
mk_core/deps/libevent/test/regress_http.c:436:8: note: Shadow variable
  SSL *ssl = SSL_new(get_ssl_ctx());
       ^
mk_core/deps/libevent/test/regress_http.c:1031:8: style: Local variable 'ssl' shadows outer argument [shadowArgument]
  SSL *ssl = SSL_new(get_ssl_ctx());
       ^
mk_core/deps/libevent/test/regress_http.c:1008:6: note: Shadowed declaration
 int ssl)
     ^
mk_core/deps/libevent/test/regress_http.c:1031:8: note: Shadow variable
  SSL *ssl = SSL_new(get_ssl_ctx());
       ^
mk_core/deps/libevent/test/regress_iocp.c:188:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(count_wait_for(8, 2000), ==, 0);
 ^
mk_core/deps/libevent/test/regress_iocp.c:188:2: note: print_ is assigned
 tt_int_op(count_wait_for(8, 2000), ==, 0);
 ^
mk_core/deps/libevent/test/regress_iocp.c:188:2: note: print_ is overwritten
 tt_int_op(count_wait_for(8, 2000), ==, 0);
 ^
mk_core/deps/libevent/test/regress_iocp.c:192:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(o1.call_count, ==, 4);
 ^
mk_core/deps/libevent/test/regress_iocp.c:192:2: note: print_ is assigned
 tt_int_op(o1.call_count, ==, 4);
 ^
mk_core/deps/libevent/test/regress_iocp.c:192:2: note: print_ is overwritten
 tt_int_op(o1.call_count, ==, 4);
 ^
mk_core/deps/libevent/test/regress_iocp.c:193:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(o2.call_count, ==, 4);
 ^
mk_core/deps/libevent/test/regress_iocp.c:193:2: note: print_ is assigned
 tt_int_op(o2.call_count, ==, 4);
 ^
mk_core/deps/libevent/test/regress_iocp.c:193:2: note: print_ is overwritten
 tt_int_op(o2.call_count, ==, 4);
 ^
mk_core/deps/libevent/test/regress_iocp.c:274:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(buf), ==, sizeof(junk));
 ^
mk_core/deps/libevent/test/regress_iocp.c:274:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(buf), ==, sizeof(junk));
 ^
mk_core/deps/libevent/test/regress_iocp.c:274:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(buf), ==, sizeof(junk));
 ^
mk_core/deps/libevent/test/regress_iocp.c:276:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(chain->flags & EVBUFFER_MEM_PINNED_ANY, ==, 0);
  ^
mk_core/deps/libevent/test/regress_iocp.c:276:3: note: print_ is assigned
  tt_int_op(chain->flags & EVBUFFER_MEM_PINNED_ANY, ==, 0);
  ^
mk_core/deps/libevent/test/regress_iocp.c:276:3: note: print_ is overwritten
  tt_int_op(chain->flags & EVBUFFER_MEM_PINNED_ANY, ==, 0);
  ^
mk_core/deps/libevent/test/regress_iocp.c:280:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(count_wait_for(2, 2000), ==, 0);
 ^
mk_core/deps/libevent/test/regress_iocp.c:280:2: note: print_ is assigned
 tt_int_op(count_wait_for(2, 2000), ==, 0);
 ^
mk_core/deps/libevent/test/regress_iocp.c:280:2: note: print_ is overwritten
 tt_int_op(count_wait_for(2, 2000), ==, 0);
 ^
mk_core/deps/libevent/test/regress_iocp.c:282:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evbuffer_get_length(rbuf),==,512);
 ^
mk_core/deps/libevent/test/regress_iocp.c:282:2: note: print_ is assigned
 tt_int_op(evbuffer_get_length(rbuf),==,512);
 ^
mk_core/deps/libevent/test/regress_iocp.c:282:2: note: print_ is overwritten
 tt_int_op(evbuffer_get_length(rbuf),==,512);
 ^
mk_core/deps/libevent/test/regress_iocp.c:332:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(got_readcb, ==, 1);
 ^
mk_core/deps/libevent/test/regress_iocp.c:332:2: note: print_ is assigned
 tt_int_op(got_readcb, ==, 1);
 ^
mk_core/deps/libevent/test/regress_iocp.c:332:2: note: print_ is overwritten
 tt_int_op(got_readcb, ==, 1);
 ^
mk_core/deps/libevent/test/regress_iocp.c:335:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_str_op(buf, ==, "Hello world");
 ^
mk_core/deps/libevent/test/regress_iocp.c:335:2: note: print_ is assigned
 tt_str_op(buf, ==, "Hello world");
 ^
mk_core/deps/libevent/test/regress_iocp.c:335:2: note: print_ is overwritten
 tt_str_op(buf, ==, "Hello world");
 ^
mk_core/deps/libevent/test/regress_listener.c:102:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evconnlistener_get_fd(listener1), >=, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:102:2: note: print_ is assigned
 tt_int_op(evconnlistener_get_fd(listener1), >=, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:102:2: note: print_ is overwritten
 tt_int_op(evconnlistener_get_fd(listener1), >=, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:103:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(evconnlistener_get_fd(listener2), >=, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:103:2: note: print_ is assigned
 tt_int_op(evconnlistener_get_fd(listener2), >=, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:103:2: note: print_ is overwritten
 tt_int_op(evconnlistener_get_fd(listener2), >=, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:108:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ss1.ss_family, ==, AF_INET);
 ^
mk_core/deps/libevent/test/regress_listener.c:108:2: note: print_ is assigned
 tt_int_op(ss1.ss_family, ==, AF_INET);
 ^
mk_core/deps/libevent/test/regress_listener.c:108:2: note: print_ is overwritten
 tt_int_op(ss1.ss_family, ==, AF_INET);
 ^
mk_core/deps/libevent/test/regress_listener.c:109:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ss2.ss_family, ==, AF_INET);
 ^
mk_core/deps/libevent/test/regress_listener.c:109:2: note: print_ is assigned
 tt_int_op(ss2.ss_family, ==, AF_INET);
 ^
mk_core/deps/libevent/test/regress_listener.c:109:2: note: print_ is overwritten
 tt_int_op(ss2.ss_family, ==, AF_INET);
 ^
mk_core/deps/libevent/test/regress_listener.c:113:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ntohl(sin1->sin_addr.s_addr), ==, 0x7f000001);
 ^
mk_core/deps/libevent/test/regress_listener.c:113:2: note: print_ is assigned
 tt_int_op(ntohl(sin1->sin_addr.s_addr), ==, 0x7f000001);
 ^
mk_core/deps/libevent/test/regress_listener.c:113:2: note: print_ is overwritten
 tt_int_op(ntohl(sin1->sin_addr.s_addr), ==, 0x7f000001);
 ^
mk_core/deps/libevent/test/regress_listener.c:114:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(ntohl(sin2->sin_addr.s_addr), ==, 0x7f000001);
 ^
mk_core/deps/libevent/test/regress_listener.c:114:2: note: print_ is assigned
 tt_int_op(ntohl(sin2->sin_addr.s_addr), ==, 0x7f000001);
 ^
mk_core/deps/libevent/test/regress_listener.c:114:2: note: print_ is overwritten
 tt_int_op(ntohl(sin2->sin_addr.s_addr), ==, 0x7f000001);
 ^
mk_core/deps/libevent/test/regress_listener.c:115:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(sin1->sin_port, !=, sin2->sin_port);
 ^
mk_core/deps/libevent/test/regress_listener.c:115:2: note: print_ is assigned
 tt_int_op(sin1->sin_port, !=, sin2->sin_port);
 ^
mk_core/deps/libevent/test/regress_listener.c:115:2: note: print_ is overwritten
 tt_int_op(sin1->sin_port, !=, sin2->sin_port);
 ^
mk_core/deps/libevent/test/regress_listener.c:117:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_ptr_op(evconnlistener_get_base(listener1), ==, base);
 ^
mk_core/deps/libevent/test/regress_listener.c:117:2: note: print_ is assigned
 tt_ptr_op(evconnlistener_get_base(listener1), ==, base);
 ^
mk_core/deps/libevent/test/regress_listener.c:117:2: note: print_ is overwritten
 tt_ptr_op(evconnlistener_get_base(listener1), ==, base);
 ^
mk_core/deps/libevent/test/regress_listener.c:118:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_ptr_op(evconnlistener_get_base(listener2), ==, base);
 ^
mk_core/deps/libevent/test/regress_listener.c:118:2: note: print_ is assigned
 tt_ptr_op(evconnlistener_get_base(listener2), ==, base);
 ^
mk_core/deps/libevent/test/regress_listener.c:118:2: note: print_ is overwritten
 tt_ptr_op(evconnlistener_get_base(listener2), ==, base);
 ^
mk_core/deps/libevent/test/regress_listener.c:130:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(count1, ==, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:130:2: note: print_ is assigned
 tt_int_op(count1, ==, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:130:2: note: print_ is overwritten
 tt_int_op(count1, ==, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:131:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(count2, ==, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:131:2: note: print_ is assigned
 tt_int_op(count2, ==, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:131:2: note: print_ is overwritten
 tt_int_op(count2, ==, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:168:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(send(data->pair[1], "hello", 5, 0), >, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:168:2: note: print_ is assigned
 tt_int_op(send(data->pair[1], "hello", 5, 0), >, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:168:2: note: print_ is overwritten
 tt_int_op(send(data->pair[1], "hello", 5, 0), >, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:181:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(count,==,1000); /* set by error cb */
 ^
mk_core/deps/libevent/test/regress_listener.c:181:2: note: print_ is assigned
 tt_int_op(count,==,1000); /* set by error cb */
 ^
mk_core/deps/libevent/test/regress_listener.c:181:2: note: print_ is overwritten
 tt_int_op(count,==,1000); /* set by error cb */
 ^
mk_core/deps/libevent/test/regress_listener.c:198:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(send(data->pair[1], "hello", 5, 0), >, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:198:2: note: print_ is assigned
 tt_int_op(send(data->pair[1], "hello", 5, 0), >, 0);
 ^
mk_core/deps/libevent/test/regress_listener.c:198:2: note: print_ is overwritten
 tt_int_op(send(data->pair[1], "hello", 5, 0), >, 0);
 ^
mk_core/deps/libevent/test/regress_main.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/test/regress_minheap.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/test/regress_rpc.c:98:1: error: There is an unknown macro here somewhere. Configuration is required. If EVRPC_HEADER is a macro then please configure it. [unknownMacro]
EVRPC_HEADER(Message, msg, kill)
^
mk_core/deps/libevent/test/regress_ssl.c:236:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(bufferevent_getfd(bev), ==, -1);
  ^
mk_core/deps/libevent/test/regress_ssl.c:236:3: note: print_ is assigned
  tt_int_op(bufferevent_getfd(bev), ==, -1);
  ^
mk_core/deps/libevent/test/regress_ssl.c:236:3: note: print_ is overwritten
  tt_int_op(bufferevent_getfd(bev), ==, -1);
  ^
mk_core/deps/libevent/test/regress_ssl.c:237:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(bufferevent_setfd(bev, -1), ==, -1);
  ^
mk_core/deps/libevent/test/regress_ssl.c:237:3: note: print_ is assigned
  tt_int_op(bufferevent_setfd(bev, -1), ==, -1);
  ^
mk_core/deps/libevent/test/regress_ssl.c:237:3: note: print_ is overwritten
  tt_int_op(bufferevent_setfd(bev, -1), ==, -1);
  ^
mk_core/deps/libevent/test/regress_ssl.c:239:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(bufferevent_getfd(bev), !=, -1);
  ^
mk_core/deps/libevent/test/regress_ssl.c:239:3: note: print_ is assigned
  tt_int_op(bufferevent_getfd(bev), !=, -1);
  ^
mk_core/deps/libevent/test/regress_ssl.c:239:3: note: print_ is overwritten
  tt_int_op(bufferevent_getfd(bev), !=, -1);
  ^
mk_core/deps/libevent/test/regress_ssl.c:240:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(bufferevent_setfd(bev, -1), ==, 0);
  ^
mk_core/deps/libevent/test/regress_ssl.c:240:3: note: print_ is assigned
  tt_int_op(bufferevent_setfd(bev, -1), ==, 0);
  ^
mk_core/deps/libevent/test/regress_ssl.c:240:3: note: print_ is overwritten
  tt_int_op(bufferevent_setfd(bev, -1), ==, 0);
  ^
mk_core/deps/libevent/test/regress_ssl.c:242:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(bufferevent_getfd(bev), ==, -1);
 ^
mk_core/deps/libevent/test/regress_ssl.c:242:2: note: print_ is assigned
 tt_int_op(bufferevent_getfd(bev), ==, -1);
 ^
mk_core/deps/libevent/test/regress_ssl.c:242:2: note: print_ is overwritten
 tt_int_op(bufferevent_getfd(bev), ==, -1);
 ^
mk_core/deps/libevent/test/regress_ssl.c:250:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(event_pending(&bev->ev_read, EVLIST_ALL, NULL), ==, 0);
 ^
mk_core/deps/libevent/test/regress_ssl.c:250:2: note: print_ is assigned
 tt_int_op(event_pending(&bev->ev_read, EVLIST_ALL, NULL), ==, 0);
 ^
mk_core/deps/libevent/test/regress_ssl.c:250:2: note: print_ is overwritten
 tt_int_op(event_pending(&bev->ev_read, EVLIST_ALL, NULL), ==, 0);
 ^
mk_core/deps/libevent/test/regress_ssl.c:251:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(event_pending(&bev->ev_write, EVLIST_ALL, NULL), ==, 0);
 ^
mk_core/deps/libevent/test/regress_ssl.c:251:2: note: print_ is assigned
 tt_int_op(event_pending(&bev->ev_write, EVLIST_ALL, NULL), ==, 0);
 ^
mk_core/deps/libevent/test/regress_ssl.c:251:2: note: print_ is overwritten
 tt_int_op(event_pending(&bev->ev_write, EVLIST_ALL, NULL), ==, 0);
 ^
mk_core/deps/libevent/test/regress_ssl.c:444:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(bufferevent_getfd(bev1), ==, data->pair[0]);
  ^
mk_core/deps/libevent/test/regress_ssl.c:444:3: note: print_ is assigned
  tt_int_op(bufferevent_getfd(bev1), ==, data->pair[0]);
  ^
mk_core/deps/libevent/test/regress_ssl.c:444:3: note: print_ is overwritten
  tt_int_op(bufferevent_getfd(bev1), ==, data->pair[0]);
  ^
mk_core/deps/libevent/test/regress_ssl.c:446:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_ptr_op(bufferevent_get_underlying(bev1), ==, bev_ll[0]);
  ^
mk_core/deps/libevent/test/regress_ssl.c:446:3: note: print_ is assigned
  tt_ptr_op(bufferevent_get_underlying(bev1), ==, bev_ll[0]);
  ^
mk_core/deps/libevent/test/regress_ssl.c:446:3: note: print_ is overwritten
  tt_ptr_op(bufferevent_get_underlying(bev1), ==, bev_ll[0]);
  ^
mk_core/deps/libevent/test/regress_ssl.c:477:4: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
   tt_int_op(got_close, ==, 1);
   ^
mk_core/deps/libevent/test/regress_ssl.c:477:4: note: print_ is assigned
   tt_int_op(got_close, ==, 1);
   ^
mk_core/deps/libevent/test/regress_ssl.c:477:4: note: print_ is overwritten
   tt_int_op(got_close, ==, 1);
   ^
mk_core/deps/libevent/test/regress_ssl.c:478:4: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
   tt_int_op(got_error, ==, 0);
   ^
mk_core/deps/libevent/test/regress_ssl.c:478:4: note: print_ is assigned
   tt_int_op(got_error, ==, 0);
   ^
mk_core/deps/libevent/test/regress_ssl.c:478:4: note: print_ is overwritten
   tt_int_op(got_error, ==, 0);
   ^
mk_core/deps/libevent/test/regress_ssl.c:480:4: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
   tt_int_op(got_error, ==, 1);
   ^
mk_core/deps/libevent/test/regress_ssl.c:480:4: note: print_ is assigned
   tt_int_op(got_error, ==, 1);
   ^
mk_core/deps/libevent/test/regress_ssl.c:480:4: note: print_ is overwritten
   tt_int_op(got_error, ==, 1);
   ^
mk_core/deps/libevent/test/regress_ssl.c:482:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(got_timeout, ==, 0);
  ^
mk_core/deps/libevent/test/regress_ssl.c:482:3: note: print_ is assigned
  tt_int_op(got_timeout, ==, 0);
  ^
mk_core/deps/libevent/test/regress_ssl.c:482:3: note: print_ is overwritten
  tt_int_op(got_timeout, ==, 0);
  ^
mk_core/deps/libevent/test/regress_ssl.c:498:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(got_close, ==, 0);
  ^
mk_core/deps/libevent/test/regress_ssl.c:498:3: note: print_ is assigned
  tt_int_op(got_close, ==, 0);
  ^
mk_core/deps/libevent/test/regress_ssl.c:498:3: note: print_ is overwritten
  tt_int_op(got_close, ==, 0);
  ^
mk_core/deps/libevent/test/regress_ssl.c:499:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(got_error, ==, 0);
  ^
mk_core/deps/libevent/test/regress_ssl.c:499:3: note: print_ is assigned
  tt_int_op(got_error, ==, 0);
  ^
mk_core/deps/libevent/test/regress_ssl.c:499:3: note: print_ is overwritten
  tt_int_op(got_error, ==, 0);
  ^
mk_core/deps/libevent/test/regress_ssl.c:500:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(got_timeout, ==, 1);
  ^
mk_core/deps/libevent/test/regress_ssl.c:500:3: note: print_ is assigned
  tt_int_op(got_timeout, ==, 1);
  ^
mk_core/deps/libevent/test/regress_ssl.c:500:3: note: print_ is overwritten
  tt_int_op(got_timeout, ==, 1);
  ^
mk_core/deps/libevent/test/regress_ssl.c:706:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(((struct sockaddr*)&ss)->sa_family, ==, AF_INET);
 ^
mk_core/deps/libevent/test/regress_ssl.c:706:2: note: print_ is assigned
 tt_int_op(((struct sockaddr*)&ss)->sa_family, ==, AF_INET);
 ^
mk_core/deps/libevent/test/regress_ssl.c:706:2: note: print_ is overwritten
 tt_int_op(((struct sockaddr*)&ss)->sa_family, ==, AF_INET);
 ^
mk_core/deps/libevent/test/regress_ssl.c:724:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(rw.read, <=, 100);
 ^
mk_core/deps/libevent/test/regress_ssl.c:724:2: note: print_ is assigned
 tt_int_op(rw.read, <=, 100);
 ^
mk_core/deps/libevent/test/regress_ssl.c:724:2: note: print_ is overwritten
 tt_int_op(rw.read, <=, 100);
 ^
mk_core/deps/libevent/test/regress_ssl.c:725:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(rw.write, <=, 100);
 ^
mk_core/deps/libevent/test/regress_ssl.c:725:2: note: print_ is assigned
 tt_int_op(rw.write, <=, 100);
 ^
mk_core/deps/libevent/test/regress_ssl.c:725:2: note: print_ is overwritten
 tt_int_op(rw.write, <=, 100);
 ^
mk_core/deps/libevent/test/regress_ssl.c:180:0: information: Skipping configuration 'SSL_OP_NO_TLSv1_1' since the value of 'SSL_OP_NO_TLSv1_1' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  SSL_CTX_set_options(the_ssl_ctx, SSL_OP_NO_TLSv1_1);
^
mk_core/deps/libevent/test/regress_ssl.c:177:0: information: Skipping configuration 'SSL_OP_NO_TLSv1_2' since the value of 'SSL_OP_NO_TLSv1_2' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  SSL_CTX_set_options(the_ssl_ctx, SSL_OP_NO_TLSv1_2);
^
mk_core/deps/libevent/test/regress_testutils.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/test/regress_testutils.c:218:38: style:inconclusive: Function 'regress_dnsserver' argument 3 names different: declaration 'seach_table' definition 'search_table'. [funcArgNamesDifferent]
    struct regress_dns_server_table *search_table)
                                     ^
mk_core/deps/libevent/test/regress_testutils.h:56:38: note: Function 'regress_dnsserver' argument 3 names different: declaration 'seach_table' definition 'search_table'.
    struct regress_dns_server_table *seach_table);
                                     ^
mk_core/deps/libevent/test/regress_testutils.c:218:38: note: Function 'regress_dnsserver' argument 3 names different: declaration 'seach_table' definition 'search_table'.
    struct regress_dns_server_table *search_table)
                                     ^
mk_core/deps/libevent/test/regress_thread.c:483:2: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
 TT_BLATHER(("elapsed time, %u usec", elapsed_usec));
 ^
mk_core/deps/libevent/test/regress_thread.c:221:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  tt_int_op(notification_fd_used, ==, 0);
  ^
mk_core/deps/libevent/test/regress_thread.c:221:3: note: print_ is assigned
  tt_int_op(notification_fd_used, ==, 0);
  ^
mk_core/deps/libevent/test/regress_thread.c:221:3: note: print_ is overwritten
  tt_int_op(notification_fd_used, ==, 0);
  ^
mk_core/deps/libevent/test/regress_thread.c:243:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(count, ==, NUM_THREADS * NUM_ITERATIONS);
 ^
mk_core/deps/libevent/test/regress_thread.c:243:2: note: print_ is assigned
 tt_int_op(count, ==, NUM_THREADS * NUM_ITERATIONS);
 ^
mk_core/deps/libevent/test/regress_thread.c:243:2: note: print_ is overwritten
 tt_int_op(count, ==, NUM_THREADS * NUM_ITERATIONS);
 ^
mk_core/deps/libevent/test/regress_thread.c:333:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(event_add(&wake_one, &tv_signal), ==, 0);
 ^
mk_core/deps/libevent/test/regress_thread.c:333:2: note: print_ is assigned
 tt_int_op(event_add(&wake_one, &tv_signal), ==, 0);
 ^
mk_core/deps/libevent/test/regress_thread.c:333:2: note: print_ is overwritten
 tt_int_op(event_add(&wake_one, &tv_signal), ==, 0);
 ^
mk_core/deps/libevent/test/regress_thread.c:334:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(event_add(&wake_all, &tv_broadcast), ==, 0);
 ^
mk_core/deps/libevent/test/regress_thread.c:334:2: note: print_ is assigned
 tt_int_op(event_add(&wake_all, &tv_broadcast), ==, 0);
 ^
mk_core/deps/libevent/test/regress_thread.c:334:2: note: print_ is overwritten
 tt_int_op(event_add(&wake_all, &tv_broadcast), ==, 0);
 ^
mk_core/deps/libevent/test/regress_thread.c:346:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_timed_out, >=, 1);
 ^
mk_core/deps/libevent/test/regress_thread.c:346:2: note: print_ is assigned
 tt_int_op(n_timed_out, >=, 1);
 ^
mk_core/deps/libevent/test/regress_thread.c:346:2: note: print_ is overwritten
 tt_int_op(n_timed_out, >=, 1);
 ^
mk_core/deps/libevent/test/regress_thread.c:347:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_timed_out, <=, 2);
 ^
mk_core/deps/libevent/test/regress_thread.c:347:2: note: print_ is assigned
 tt_int_op(n_timed_out, <=, 2);
 ^
mk_core/deps/libevent/test/regress_thread.c:347:2: note: print_ is overwritten
 tt_int_op(n_timed_out, <=, 2);
 ^
mk_core/deps/libevent/test/regress_thread.c:378:3: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
  test_timeval_diff_leq(&target_time, &alerted[i].alerted_at,
  ^
mk_core/deps/libevent/test/regress_thread.c:378:3: note: print_ is assigned
  test_timeval_diff_leq(&target_time, &alerted[i].alerted_at,
  ^
mk_core/deps/libevent/test/regress_thread.c:378:3: note: print_ is overwritten
  test_timeval_diff_leq(&target_time, &alerted[i].alerted_at,
  ^
mk_core/deps/libevent/test/regress_thread.c:381:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_broadcast + n_signal + n_timed_out, ==, NUM_THREADS);
 ^
mk_core/deps/libevent/test/regress_thread.c:381:2: note: print_ is assigned
 tt_int_op(n_broadcast + n_signal + n_timed_out, ==, NUM_THREADS);
 ^
mk_core/deps/libevent/test/regress_thread.c:381:2: note: print_ is overwritten
 tt_int_op(n_broadcast + n_signal + n_timed_out, ==, NUM_THREADS);
 ^
mk_core/deps/libevent/test/regress_thread.c:382:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(n_signal, ==, 1);
 ^
mk_core/deps/libevent/test/regress_thread.c:382:2: note: print_ is assigned
 tt_int_op(n_signal, ==, 1);
 ^
mk_core/deps/libevent/test/regress_thread.c:382:2: note: print_ is overwritten
 tt_int_op(n_signal, ==, 1);
 ^
mk_core/deps/libevent/test/regress_thread.c:556:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 test_timeval_diff_eq(&starttime, &times[0], 100);
 ^
mk_core/deps/libevent/test/regress_thread.c:556:2: note: print_ is assigned
 test_timeval_diff_eq(&starttime, &times[0], 100);
 ^
mk_core/deps/libevent/test/regress_thread.c:556:2: note: print_ is overwritten
 test_timeval_diff_eq(&starttime, &times[0], 100);
 ^
mk_core/deps/libevent/test/regress_thread.c:557:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 test_timeval_diff_eq(&starttime, &times[1], 200);
 ^
mk_core/deps/libevent/test/regress_thread.c:557:2: note: print_ is assigned
 test_timeval_diff_eq(&starttime, &times[1], 200);
 ^
mk_core/deps/libevent/test/regress_thread.c:557:2: note: print_ is overwritten
 test_timeval_diff_eq(&starttime, &times[1], 200);
 ^
mk_core/deps/libevent/test/regress_thread.c:558:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 test_timeval_diff_eq(&starttime, &times[2], 400);
 ^
mk_core/deps/libevent/test/regress_thread.c:558:2: note: print_ is assigned
 test_timeval_diff_eq(&starttime, &times[2], 400);
 ^
mk_core/deps/libevent/test/regress_thread.c:558:2: note: print_ is overwritten
 test_timeval_diff_eq(&starttime, &times[2], 400);
 ^
mk_core/deps/libevent/test/regress_thread.c:559:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 test_timeval_diff_eq(&starttime, &times[3], 450);
 ^
mk_core/deps/libevent/test/regress_thread.c:559:2: note: print_ is assigned
 test_timeval_diff_eq(&starttime, &times[3], 450);
 ^
mk_core/deps/libevent/test/regress_thread.c:559:2: note: print_ is overwritten
 test_timeval_diff_eq(&starttime, &times[3], 450);
 ^
mk_core/deps/libevent/test/regress_thread.c:560:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 test_timeval_diff_eq(&starttime, &times[4], 500);
 ^
mk_core/deps/libevent/test/regress_thread.c:560:2: note: print_ is assigned
 test_timeval_diff_eq(&starttime, &times[4], 500);
 ^
mk_core/deps/libevent/test/regress_thread.c:560:2: note: print_ is overwritten
 test_timeval_diff_eq(&starttime, &times[4], 500);
 ^
mk_core/deps/libevent/test/regress_thread.c:561:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 test_timeval_diff_eq(&starttime, &endtime,  500);
 ^
mk_core/deps/libevent/test/regress_thread.c:561:2: note: print_ is assigned
 test_timeval_diff_eq(&starttime, &endtime,  500);
 ^
mk_core/deps/libevent/test/regress_thread.c:561:2: note: print_ is overwritten
 test_timeval_diff_eq(&starttime, &endtime,  500);
 ^
mk_core/deps/libevent/test/regress_util.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 29 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/test/regress_util.c:1326:3: error: syntax error: <) [syntaxError]
  tt_assert(evutil_timercmp(&tv[i], &tv[i+1], <));
  ^
mk_core/deps/libevent/test/regress_util.c:168:0: information: Skipping configuration 'AF_INET6' since the value of 'AF_INET6' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  r = evutil_inet_pton(AF_INET6, ent->addr, &in6);
^
mk_core/deps/libevent/test/regress_util.c:192:0: information: Skipping configuration 'AF_INET6' since the value of 'AF_INET6' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   const char *w = evutil_inet_ntop(AF_INET6, &in6, written,
^
mk_core/deps/libevent/test/regress_util.c:216:0: information: Skipping configuration 'AF_INET6' since the value of 'AF_INET6' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 { "[ffff::1]:1000", AF_INET6, "ffff::1", 1000 },
^
mk_core/deps/libevent/test/regress_util.c:217:0: information: Skipping configuration 'AF_INET6' since the value of 'AF_INET6' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 { "[ffff::1]", AF_INET6, "ffff::1", 0 },
^
mk_core/deps/libevent/test/regress_util.c:222:0: information: Skipping configuration 'AF_INET6' since the value of 'AF_INET6' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 { "::1", AF_INET6, "::1", 0 },
^
mk_core/deps/libevent/test/regress_util.c:223:0: information: Skipping configuration 'AF_INET6' since the value of 'AF_INET6' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 { "1:2::1", AF_INET6, "1:2::1", 0 },
^
mk_core/deps/libevent/test/regress_util.c:270:0: information: Skipping configuration 'AF_INET6' since the value of 'AF_INET6' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   sin6.sin6_family = AF_INET6;
^
mk_core/deps/libevent/test/regress_util.c:272:0: information: Skipping configuration 'AF_INET6' since the value of 'AF_INET6' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   r = evutil_inet_pton(AF_INET6, ent->addr, &sin6.sin6_addr);
^
mk_core/deps/libevent/test/regress_util.c:844:0: information: Skipping configuration 'AF_INET6' since the value of 'AF_INET6' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  evutil_inet_ntop(AF_INET6, &sin6->sin6_addr, buf, sizeof(buf));
^
mk_core/deps/libevent/test/regress_util.c:976:0: information: Skipping configuration 'AF_INET6' since the value of 'AF_INET6' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 hints.ai_family = PF_INET6;
^
mk_core/deps/libevent/test/regress_util.c:986:0: information: Skipping configuration 'AF_INET6' since the value of 'AF_INET6' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 hints.ai_family = PF_INET6;
^
mk_core/deps/libevent/test/regress_util.c:1000:0: information: Skipping configuration 'AF_INET6' since the value of 'AF_INET6' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 a = ai_find_by_family(ai, PF_INET6);
^
mk_core/deps/libevent/test/regress_util.c:1098:0: information: Skipping configuration 'AF_INET6' since the value of 'AF_INET6' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 hints.ai_family = PF_INET6;
^
mk_core/deps/libevent/test/regress_util.c:1104:0: information: Skipping configuration 'AF_INET6' since the value of 'AF_INET6' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tt_int_op(ai->ai_family, ==, PF_INET6);
^
mk_core/deps/libevent/test/regress_util.c:1109:0: information: Skipping configuration 'AF_INET6' since the value of 'AF_INET6' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  cp = evutil_inet_ntop(AF_INET6, &sin6->sin6_addr, buf,
^
mk_core/deps/libevent/test/regress_zlib.c:301:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r, ==, Z_OK);
 ^
mk_core/deps/libevent/test/regress_zlib.c:301:2: note: print_ is assigned
 tt_int_op(r, ==, Z_OK);
 ^
mk_core/deps/libevent/test/regress_zlib.c:301:2: note: print_ is overwritten
 tt_int_op(r, ==, Z_OK);
 ^
mk_core/deps/libevent/test/regress_zlib.c:304:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(r, ==, Z_OK);
 ^
mk_core/deps/libevent/test/regress_zlib.c:304:2: note: print_ is assigned
 tt_int_op(r, ==, Z_OK);
 ^
mk_core/deps/libevent/test/regress_zlib.c:304:2: note: print_ is overwritten
 tt_int_op(r, ==, Z_OK);
 ^
mk_core/deps/libevent/test/regress_zlib.c:136:6: style: The scope of the variable 'nread' can be reduced. [variableScope]
 int nread, nwrite;
     ^
mk_core/deps/libevent/test/regress_zlib.c:136:13: style: The scope of the variable 'nwrite' can be reduced. [variableScope]
 int nread, nwrite;
            ^
mk_core/deps/libevent/test/regress_zlib.c:137:6: style: The scope of the variable 'res' can be reduced. [variableScope]
 int res, n;
     ^
mk_core/deps/libevent/test/regress_zlib.c:137:11: style: The scope of the variable 'n' can be reduced. [variableScope]
 int res, n;
          ^
mk_core/deps/libevent/test/regress_zlib.c:190:6: style: The scope of the variable 'nread' can be reduced. [variableScope]
 int nread, nwrite;
     ^
mk_core/deps/libevent/test/regress_zlib.c:190:13: style: The scope of the variable 'nwrite' can be reduced. [variableScope]
 int nread, nwrite;
            ^
mk_core/deps/libevent/test/regress_zlib.c:191:6: style: The scope of the variable 'res' can be reduced. [variableScope]
 int res, n;
     ^
mk_core/deps/libevent/test/regress_zlib.c:191:11: style: The scope of the variable 'n' can be reduced. [variableScope]
 int res, n;
          ^
mk_core/deps/libevent/test/regress_zlib.c:283:18: style: Local variable 'pair' shadows outer variable [shadowVariable]
 evutil_socket_t pair[2] = {-1, -1};
                 ^
mk_core/deps/libevent/test/regress.h:64:24: note: Shadowed declaration
extern evutil_socket_t pair[2];
                       ^
mk_core/deps/libevent/test/regress_zlib.c:283:18: note: Shadow variable
 evutil_socket_t pair[2] = {-1, -1};
                 ^
mk_core/deps/libevent/test/test-closed.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/test/test-closed.c:58:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  printf("%s: Timeout!\n", __func__);
^
mk_core/deps/libevent/test/test-closed.c:63:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  printf("%s: detected socket close with success\n", __func__);
^
mk_core/deps/libevent/test/test-closed.c:67:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 printf("%s: unable to detect socket close\n", __func__);
^
mk_core/deps/libevent/test/test-eof.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/test/test-eof.c:63:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  printf("%s: Timeout!\n", __func__);
^
mk_core/deps/libevent/test/test-eof.c:69:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 printf("%s: read %d%s\n", __func__,
^
mk_core/deps/libevent/test/test-ratelim.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/test/test-time.c:64:6: style: The scope of the variable 'i' can be reduced. [variableScope]
 int i, j;
     ^
mk_core/deps/libevent/test/test-time.c:64:9: style: The scope of the variable 'j' can be reduced. [variableScope]
 int i, j;
        ^
mk_core/deps/libevent/test/test-weof.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/deps/libevent/test/test-weof.c:67:0: information: Skipping configuration 'EVENT____func__;__func__' since the value of '__func__' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 printf("%s: write %d%s\n", __func__,
^
mk_core/deps/libevent/test/tinytest.c:100:16: style: Expression is always true because 'else if' condition is opposite to previous condition at line 98. [multiCondition]
  else if (env == (void*)TT_SKIP)
               ^
mk_core/deps/libevent/test/tinytest.c:98:7: note: first condition
  if (!env)
      ^
mk_core/deps/libevent/test/tinytest.c:100:16: note: else if condition is opposite to first condition
  else if (env == (void*)TT_SKIP)
               ^
mk_core/deps/libevent/test/tinytest.c:381:19: style:inconclusive: Function 'tinytest_main' argument 1 names different: declaration 'argc' definition 'c'. [funcArgNamesDifferent]
tinytest_main(int c, const char **v, struct testgroup_t *groups)
                  ^
mk_core/deps/libevent/test/tinytest.h:98:23: note: Function 'tinytest_main' argument 1 names different: declaration 'argc' definition 'c'.
int tinytest_main(int argc, const char **argv, struct testgroup_t *groups);
                      ^
mk_core/deps/libevent/test/tinytest.c:381:19: note: Function 'tinytest_main' argument 1 names different: declaration 'argc' definition 'c'.
tinytest_main(int c, const char **v, struct testgroup_t *groups)
                  ^
mk_core/deps/libevent/test/tinytest.c:381:35: style:inconclusive: Function 'tinytest_main' argument 2 names different: declaration 'argv' definition 'v'. [funcArgNamesDifferent]
tinytest_main(int c, const char **v, struct testgroup_t *groups)
                                  ^
mk_core/deps/libevent/test/tinytest.h:98:42: note: Function 'tinytest_main' argument 2 names different: declaration 'argv' definition 'v'.
int tinytest_main(int argc, const char **argv, struct testgroup_t *groups);
                                         ^
mk_core/deps/libevent/test/tinytest.c:381:35: note: Function 'tinytest_main' argument 2 names different: declaration 'argv' definition 'v'.
tinytest_main(int c, const char **v, struct testgroup_t *groups)
                                  ^
mk_core/deps/libevent/test/tinytest.c:427:0: information: Skipping configuration '_IONBF' since the value of '_IONBF' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 setvbuf(stdout, NULL, _IONBF, 0);
^
mk_core/deps/libevent/test/tinytest.c:289:0: information: Skipping configuration 'snprintf' since the value of 'snprintf' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   snprintf(fullname, sizeof(fullname), "%s%s",
^
mk_core/deps/libevent/test/tinytest_demo.c:76:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(strcmp("abc", "abc"), ==, 0);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:76:2: note: print_ is assigned
 tt_int_op(strcmp("abc", "abc"), ==, 0);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:76:2: note: print_ is overwritten
 tt_int_op(strcmp("abc", "abc"), ==, 0);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:79:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(strcmp("abc", "abcd"), < , 0);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:79:2: note: print_ is assigned
 tt_int_op(strcmp("abc", "abcd"), < , 0);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:79:2: note: print_ is overwritten
 tt_int_op(strcmp("abc", "abcd"), < , 0);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:82:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_str_op("abc", <, "abcd");
 ^
mk_core/deps/libevent/test/tinytest_demo.c:82:2: note: print_ is assigned
 tt_str_op("abc", <, "abcd");
 ^
mk_core/deps/libevent/test/tinytest_demo.c:82:2: note: print_ is overwritten
 tt_str_op("abc", <, "abcd");
 ^
mk_core/deps/libevent/test/tinytest_demo.c:155:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_str_op(db->buffer1, ==, db->buffer2);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:155:2: note: print_ is assigned
 tt_str_op(db->buffer1, ==, db->buffer2);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:155:2: note: print_ is overwritten
 tt_str_op(db->buffer1, ==, db->buffer2);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:166:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_str_op(db->buffer1, !=, mem);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:166:2: note: print_ is assigned
 tt_str_op(db->buffer1, !=, mem);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:166:2: note: print_ is overwritten
 tt_str_op(db->buffer1, !=, mem);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:187:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(t2-t1, >=, 4);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:187:2: note: print_ is assigned
 tt_int_op(t2-t1, >=, 4);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:187:2: note: print_ is overwritten
 tt_int_op(t2-t1, >=, 4);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:189:2: style: Variable 'print_' is reassigned a value before the old one has been used. [redundantAssignment]
 tt_int_op(t2-t1, <=, 6);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:189:2: note: print_ is assigned
 tt_int_op(t2-t1, <=, 6);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:189:2: note: print_ is overwritten
 tt_int_op(t2-t1, <=, 6);
 ^
mk_core/deps/libevent/test/tinytest_demo.c:55:6: warning: Unnecessary comparison of static strings. [staticStringCompare]
 if (strcmp("","")) {
     ^
mk_core/deps/libevent/win32select.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations. [toomanyconfigs]

^
mk_core/external/winpthreads.c:359:3: error: Returning/dereferencing 't' after it is deallocated / released [deallocret]
  return t;
  ^
mk_core/external/winpthreads.c:352:18: note: Returning/dereferencing 't' after it is deallocated / released
      if (!t->h) free(t);
                 ^
mk_core/external/winpthreads.c:359:3: note: Returning/dereferencing 't' after it is deallocated / released
  return t;
  ^
mk_core/external/winpthreads.c:391:25: style: Variable 'ct' is assigned a value that is never used. [unreadVariable]
  unsigned long long ct = _pthread_time_in_ms();
                        ^
mk_core/external/winpthreads.c:412:25: style: Variable 'ct' is assigned a value that is never used. [unreadVariable]
  unsigned long long ct = _pthread_time_in_ms();
                        ^
mk_core/mk_event_kqueue.c:334:26: style: The scope of the variable 'index' can be reduced. [variableScope]
    size_t               index;
                         ^
mk_core/mk_event_select.c:144:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
mk_core/mk_event_select.c:146:22: style: The scope of the variable 's_event' can be reduced. [variableScope]
    struct mk_event *s_event;
                     ^
mk_core/mk_event_select.c:198:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
mk_core/mk_event_select.c:363:26: style: The scope of the variable 'index' can be reduced. [variableScope]
    size_t               index;
                         ^
mk_core/mk_event_libevent.c:422:26: style: The scope of the variable 'index' can be reduced. [variableScope]
    size_t               index;
                         ^
mk_core/mk_event_libevent.c:294:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
mk_core/mk_event_epoll.c:448:21: style: Condition 'ret<0' is always true [knownConditionTrueFalse]
        else if(ret < 0 && errno != EINTR) {
                    ^
mk_core/mk_event_epoll.c:445:17: note: Assuming that condition 'ret>=0' is not redundant
        if (ret >= 0) {
                ^
mk_core/mk_event_epoll.c:448:21: note: Condition 'ret<0' is always true
        else if(ret < 0 && errno != EINTR) {
                    ^
mk_core/mk_event_epoll.c:261:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
mk_core/mk_event_epoll.c:416:26: style: The scope of the variable 'index' can be reduced. [variableScope]
    int                  index;
                         ^
mk_core/mk_event_epoll.c:61:0: information: Skipping configuration 'EPOLL_CLOEXEC' since the value of 'EPOLL_CLOEXEC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    efd = epoll_create1(EPOLL_CLOEXEC);
^
mk_core/mk_iov.c:129:5: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
    mk_io = NULL;
    ^
mk_core/mk_iov.c:168:9: warning: %i in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
        printf("'[end=%i]\n", j);
        ^
mk_core/mk_iov.c:176:12: style: The scope of the variable 'len' can be reduced. [variableScope]
    size_t len;
           ^
mk_core/mk_rconf.c:62:30: style: The scope of the variable 'section' can be reduced. [variableScope]
    struct mk_rconf_section *section;
                             ^
mk_core/mk_rconf.c:119:27: style: The scope of the variable 'file' can be reduced. [variableScope]
    struct mk_rconf_file *file;
                          ^
mk_core/mk_rconf.c:134:28: style: The scope of the variable 'meta' can be reduced. [variableScope]
    struct mk_rconf_entry *meta;
                           ^
mk_core/mk_rconf.c:206:9: style: The scope of the variable 'len' can be reduced. [variableScope]
    int len;
        ^
mk_core/mk_rconf.c:748:28: style: The scope of the variable 'entry' can be reduced. [variableScope]
    struct mk_rconf_entry *entry;
                           ^
mk_core/mk_string.c:39:26: style: The scope of the variable 'cp' can be reduced. [variableScope]
    const unsigned char *cp;
                         ^
mk_core/mk_string.c:57:11: style: The scope of the variable 'null_terminated_needle_buffer' can be reduced. [variableScope]
    char *null_terminated_needle_buffer;
          ^
mk_core/mk_string.c:342:9: style: The scope of the variable 'end' can be reduced. [variableScope]
    int end;
        ^
mk_core/mk_thread.c:86:31: style: The scope of the variable 'chan' can be reduced. [variableScope]
    struct mk_thread_channel *chan;
                              ^
mk_core/mk_thread.c:125:23: style: The scope of the variable 'dt' can be reduced. [variableScope]
    struct mk_thread *dt;
                      ^
mk_core/mk_utils.c:331:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
mk_core/mk_utils.c:64:26: style: Variable 'temp.LowPart' is assigned a value that is never used. [unreadVariable]
            temp.LowPart = result.dwLowDateTime;
                         ^
mk_core/mk_utils.c:65:27: style: Variable 'temp.HighPart' is assigned a value that is never used. [unreadVariable]
            temp.HighPart = result.dwHighDateTime;
                          ^
mk_server/mk_clock.c:108:12: style: The scope of the variable 'cur_time' can be reduced. [variableScope]
    time_t cur_time;
           ^
mk_server/mk_config.c:43:28: style: The scope of the variable 'entry' can be reduced. [variableScope]
    struct mk_string_line *entry;
                           ^
mk_server/mk_config.c:124:9: style: The scope of the variable 'fd' can be reduced. [variableScope]
    int fd;
        ^
mk_server/mk_config.c:127:32: style: The scope of the variable 'listen' can be reduced. [variableScope]
    struct mk_config_listener *listen;
                               ^
mk_server/mk_config.c:257:28: style: The scope of the variable 'entry' can be reduced. [variableScope]
    struct mk_rconf_entry *entry;
                           ^
mk_server/mk_config.c:525:32: style: The scope of the variable 'check' can be reduced. [variableScope]
    struct mk_config_listener *check;
                               ^
mk_server/mk_fifo.c:230:27: style: The scope of the variable 'q' can be reduced. [variableScope]
    struct mk_fifo_queue *q;
                          ^
mk_server/mk_fifo.c:312:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
mk_server/mk_fifo.c:316:28: style: The scope of the variable 'fw' can be reduced. [variableScope]
    struct mk_fifo_worker *fw;
                           ^
mk_server/mk_http.c:572:12: style: The scope of the variable 'len' can be reduced. [variableScope]
    size_t len;
           ^
mk_server/mk_http.c:573:28: style: The scope of the variable 'entry' can be reduced. [variableScope]
    struct mk_string_line *entry;
                           ^
mk_server/mk_http.c:1207:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret, fd;
        ^
mk_server/mk_http.c:1207:14: style: The scope of the variable 'fd' can be reduced. [variableScope]
    int ret, fd;
             ^
mk_server/mk_http.c:1211:33: style: The scope of the variable 'entry' can be reduced. [variableScope]
    struct mk_vhost_error_page *entry;
                                ^
mk_server/mk_http.c:1212:21: style: The scope of the variable 'head' can be reduced. [variableScope]
    struct mk_list *head;
                    ^
mk_server/mk_http.c:1214:20: style: The scope of the variable 'iov' can be reduced. [variableScope]
    struct mk_iov *iov;
                   ^
mk_server/mk_http.c:1499:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
mk_server/mk_http.c:1501:28: style: The scope of the variable 'header' can be reduced. [variableScope]
    struct mk_http_header *header;
                           ^
mk_server/mk_http.c:435:18: style: Variable 'buffer' is assigned a value that is never used. [unreadVariable]
    char *buffer = 0;
                 ^
mk_server/mk_http2.c:140:14: style: The scope of the variable 'setting_id' can be reduced. [variableScope]
    uint16_t setting_id;
             ^
mk_server/mk_http2.c:141:14: style: The scope of the variable 'setting_value' can be reduced. [variableScope]
    uint32_t setting_value;
             ^
mk_server/mk_http2.c:252:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
mk_server/mk_http2.c:283:9: style: The scope of the variable 'new_size' can be reduced. [variableScope]
    int new_size;
        ^
mk_server/mk_http_parser.c:623:35: style: Variable 'p->header_key' is reassigned a value before the old one has been used. [redundantAssignment]
                    p->header_key = p->i;
                                  ^
mk_server/mk_http_parser.c:618:39: note: p->header_key is assigned
                        p->header_key = -1;
                                      ^
mk_server/mk_http_parser.c:623:35: note: p->header_key is overwritten
                    p->header_key = p->i;
                                  ^
mk_server/mk_http_parser.c:208:23: style: The scope of the variable 'h' can be reduced. [variableScope]
    struct row_entry *h;
                      ^
mk_server/mk_http_thread.c:90:34: style: The scope of the variable 'close' can be reduced. [variableScope]
    int                          close;
                                 ^
mk_server/mk_http_thread.c:92:34: style: The scope of the variable 'mth' can be reduced. [variableScope]
    struct mk_http_thread       *mth;
                                 ^
mk_server/mk_lib.c:739:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mk_http_flush(req);
        ^
mk_server/mk_lib.c:731:13: note: ret is assigned
        ret = mk_stream_in_raw(&req->stream, NULL,
            ^
mk_server/mk_lib.c:739:9: note: ret is overwritten
    ret = mk_http_flush(req);
        ^
mk_server/mk_lib.c:759:5: style:inconclusive: Found duplicate branches for 'if' and 'else'. [duplicateBranch]
    if (req->headers.transfer_encoding == MK_HEADER_TE_TYPE_CHUNKED) {
    ^
mk_server/mk_lib.c:763:5: note: Found duplicate branches for 'if' and 'else'.
    else {
    ^
mk_server/mk_lib.c:759:5: note: Found duplicate branches for 'if' and 'else'.
    if (req->headers.transfer_encoding == MK_HEADER_TE_TYPE_CHUNKED) {
    ^
mk_server/mk_lib.c:306:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
mk_server/mk_lib.c:406:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
mk_server/mk_lib.c:408:11: style: The scope of the variable 'value' can be reduced. [variableScope]
    char *value;
          ^
mk_server/mk_lib.c:435:22: style: The scope of the variable 'host' can be reduced. [variableScope]
    struct mk_vhost *host;
                     ^
mk_server/mk_lib.c:509:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
mk_server/mk_lib.c:511:11: style: The scope of the variable 'value' can be reduced. [variableScope]
    char *value;
          ^
mk_server/mk_lib.c:625:9: style: The scope of the variable 'remainder' can be reduced. [variableScope]
    int remainder;
        ^
mk_server/mk_lib.c:690:9: style: The scope of the variable 'chunk_len' can be reduced. [variableScope]
    int chunk_len;
        ^
mk_server/mk_lib.c:692:11: style: The scope of the variable 'tmp' can be reduced. [variableScope]
    char *tmp;
          ^
mk_server/mk_lib.c:693:10: style: The scope of the variable 'chunk_pre' can be reduced. [variableScope]
    char chunk_pre[32];
         ^
mk_server/mk_lib.c:126:13: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
        ret = mk_event_del(sched->loop, channel->event);
            ^
mk_server/mk_mimetype.c:47:9: style: The scope of the variable 'cmp' can be reduced. [variableScope]
    int cmp;
        ^
mk_server/mk_mimetype.c:148:28: style: The scope of the variable 'entry' can be reduced. [variableScope]
    struct mk_rconf_entry *entry;
                           ^
mk_server/mk_net.c:203:10: style: Variable 'send' is reassigned a value before the old one has been used. [redundantAssignment]
    send = len - total;
         ^
mk_server/mk_net.c:197:14: note: send is assigned
        send = 524288;
             ^
mk_server/mk_net.c:203:10: note: send is overwritten
    send = len - total;
         ^
mk_server/mk_net.c:203:10: style: Variable 'send' is reassigned a value before the old one has been used. [redundantAssignment]
    send = len - total;
         ^
mk_server/mk_net.c:200:14: note: send is assigned
        send = (len - total);
             ^
mk_server/mk_net.c:203:10: note: send is overwritten
    send = len - total;
         ^
mk_server/mk_net.c:96:29: style: The scope of the variable 'sched' can be reduced. [variableScope]
    struct mk_sched_worker *sched;
                            ^
mk_server/mk_net.c:144:13: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
        ret = mk_event_del(sched->loop, &conn->event);
            ^
mk_server/mk_net.c:179:13: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    int ret = 0;
            ^
mk_server/mk_net.c:280:13: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
        ret = mk_event_del(sched->loop, channel->event);
            ^
mk_server/mk_plugin.c:423:28: style: The scope of the variable 'entry' can be reduced. [variableScope]
    struct mk_rconf_entry *entry;
                           ^
mk_server/mk_plugin.c:590:23: style: The scope of the variable 'node' can be reduced. [variableScope]
    struct mk_plugin *node;
                      ^
mk_server/mk_plugin.c:610:23: style: The scope of the variable 'node' can be reduced. [variableScope]
    struct mk_plugin *node;
                      ^
mk_server/mk_plugin.c:630:23: style: The scope of the variable 'node' can be reduced. [variableScope]
    struct mk_plugin *node;
                      ^
mk_server/mk_plugin.c:661:9: style: The scope of the variable 'con' can be reduced. [variableScope]
    int con;
        ^
mk_server/mk_plugin.c:778:23: style: The scope of the variable 'plugin' can be reduced. [variableScope]
    struct mk_plugin *plugin;
                      ^
mk_server/mk_scheduler.c:59:24: style: The scope of the variable 'tmp' can be reduced. [variableScope]
    unsigned long long tmp = 0, cur = 0;
                       ^
mk_server/mk_scheduler.c:181:9: style: The scope of the variable 'size' can be reduced. [variableScope]
    int size;
        ^
mk_server/mk_scheduler.c:324:32: style: The scope of the variable 'wcb' can be reduced. [variableScope]
    struct mk_sched_worker_cb *wcb;
                               ^
mk_server/mk_scheduler.c:616:28: style: The scope of the variable 'mth' can be reduced. [variableScope]
    struct mk_http_thread *mth;
                           ^
mk_server/mk_scheduler.c:659:28: style: The scope of the variable 'mth' can be reduced. [variableScope]
    struct mk_http_thread *mth;
                           ^
mk_server/mk_scheduler.c:835:29: style: The scope of the variable 'worker' can be reduced. [variableScope]
    struct mk_sched_worker *worker;
                            ^
mk_server/mk_scheduler.c:856:29: style: The scope of the variable 'worker' can be reduced. [variableScope]
    struct mk_sched_worker *worker;
                            ^
mk_server/mk_scheduler.c:59:28: style: Variable 'tmp' is assigned a value that is never used. [unreadVariable]
    unsigned long long tmp = 0, cur = 0;
                           ^
mk_server/mk_server.c:377:31: style: Checking if unsigned expression 'bytes' is less than zero. [unsignedLessThanZero]
                    if (bytes <= 0) {
                              ^
mk_server/mk_server.c:79:9: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    ret = 0;
        ^
mk_server/mk_socket.c:224:17: style: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
                close(socket_fd);
                ^
mk_server/mk_socket.c:125:0: information: Skipping configuration 'SOCK_CLOEXEC' since the value of 'SOCK_CLOEXEC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    fd = socket(domain, type | SOCK_CLOEXEC, protocol);
^
mk_server/mk_socket.c:46:0: information: Skipping configuration 'TCP_CORK' since the value of 'TCP_CORK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    return setsockopt(fd, SOL_TCP, TCP_CORK, &state, sizeof(state));
^
mk_server/mk_socket.c:48:0: information: Skipping configuration 'TCP_NOPUSH' since the value of 'TCP_NOPUSH' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    return setsockopt(fd, SOL_SOCKET, TCP_NOPUSH, &state, sizeof(state));
^
mk_server/mk_socket.c:92:5: style:inconclusive: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
    return -1;
    ^
mk_server/mk_stream.c:212:13: style: The scope of the variable 'bytes' can be reduced. [variableScope]
    ssize_t bytes = -1;
            ^
mk_server/mk_stream.c:213:20: style: The scope of the variable 'iov' can be reduced. [variableScope]
    struct mk_iov *iov;
                   ^
mk_server/mk_user.c:41:11: style: The scope of the variable 'user_uri' can be reduced. [variableScope]
    char *user_uri;
          ^
mk_server/mk_utils.c:506:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
mk_server/mk_utils.c:80:18: style: The scope of the variable 'result_entry_count' can be reduced. [variableScope]
    unsigned int result_entry_count;
                 ^
mk_server/mk_utils.c:81:18: style: The scope of the variable 'entry_index' can be reduced. [variableScope]
    unsigned int entry_index;
                 ^
mk_server/mk_utils.c:90:17: style: Variable 'result_code' is assigned a value that is never used. [unreadVariable]
    result_code = GetLogicalProcessorInformation(proc_info_buffer, &result_length);
                ^
mk_server/mk_vhost.c:755:30: style: The scope of the variable 'hhandler' can be reduced. [variableScope]
    struct mk_vhost_handler *hhandler;
                             ^
mk_server/mk_vhost.c:757:21: style: The scope of the variable 'head' can be reduced. [variableScope]
    struct mk_list *head;
                    ^
mk_server/mk_vhost.c:758:21: style: The scope of the variable 'tmp' can be reduced. [variableScope]
    struct mk_list *tmp;
                    ^
mk_server/mk_vhost.c:813:22: style: The scope of the variable 'host' can be reduced. [variableScope]
    struct mk_vhost *host;
                     ^
plugins/auth/auth.c:143:9: style: The scope of the variable 'val' can be reduced. [variableScope]
    int val;
        ^
plugins/auth/base64.c:116:51: style: The scope of the variable 'tmp' can be reduced. [variableScope]
 unsigned char dtable[256], *out, *pos, block[4], tmp;
                                                  ^
plugins/auth/sha1.c:243:52: style:inconclusive: Function 'blk_SHA1_Update' argument 2 names different: declaration 'dataIn' definition 'data'. [funcArgNamesDifferent]
void blk_SHA1_Update(blk_SHA_CTX *ctx, const void *data, unsigned long len)
                                                   ^
plugins/auth/sha1.h:16:52: note: Function 'blk_SHA1_Update' argument 2 names different: declaration 'dataIn' definition 'data'.
void blk_SHA1_Update(blk_SHA_CTX *ctx, const void *dataIn, unsigned long len);
                                                   ^
plugins/auth/sha1.c:243:52: note: Function 'blk_SHA1_Update' argument 2 names different: declaration 'dataIn' definition 'data'.
void blk_SHA1_Update(blk_SHA_CTX *ctx, const void *data, unsigned long len)
                                                   ^
plugins/cgi/cgi.h:116:25: style: The scope of the variable 'r' can be reduced. [variableScope]
    struct cgi_request *r;
                        ^
plugins/cgi/cgi.c:112:9: style: The scope of the variable 'devnull' can be reduced. [variableScope]
    int devnull;
        ^
plugins/cgi/cgi.c:68:13: portability: 'buf' is of type 'const void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
        buf += ret;
            ^
plugins/cgi/event.c:64:9: style: The scope of the variable 'status' can be reduced. [variableScope]
    int status;
        ^
plugins/cheetah/cmd.c:166:23: style: The scope of the variable 'p' can be reduced. [variableScope]
    struct mk_plugin *p;
                      ^
plugins/cheetah/cmd.c:249:28: style: The scope of the variable 'entry_alias' can be reduced. [variableScope]
    struct mk_vhost_alias *entry_alias;
                           ^
plugins/cheetah/cmd.c:253:21: style: The scope of the variable 'aliases' can be reduced. [variableScope]
    struct mk_list *aliases;
                    ^
plugins/cheetah/cmd.c:300:24: style: The scope of the variable 'active_connections' can be reduced. [variableScope]
    unsigned long long active_connections;
                       ^
plugins/cheetah/cmd.c:349:32: style: The scope of the variable 'listener' can be reduced. [variableScope]
    struct mk_config_listener *listener;
                               ^
plugins/cheetah/cmd.c:361:28: style: The scope of the variable 'entry' can be reduced. [variableScope]
    struct mk_string_line *entry;
                           ^
plugins/cheetah/cmd.c:362:21: style: The scope of the variable 'head' can be reduced. [variableScope]
    struct mk_list *head;
                    ^
plugins/cheetah/cmd.c:45:26: style:inconclusive: Function 'mk_cheetah_cmd' argument 1 names different: declaration 'cmd' definition 'raw_cmd'. [funcArgNamesDifferent]
int mk_cheetah_cmd(char *raw_cmd, struct mk_server *server)
                         ^
plugins/cheetah/cmd.h:23:26: note: Function 'mk_cheetah_cmd' argument 1 names different: declaration 'cmd' definition 'raw_cmd'.
int mk_cheetah_cmd(char *cmd, struct mk_server *server);
                         ^
plugins/cheetah/cmd.c:45:26: note: Function 'mk_cheetah_cmd' argument 1 names different: declaration 'cmd' definition 'raw_cmd'.
int mk_cheetah_cmd(char *raw_cmd, struct mk_server *server)
                         ^
plugins/cheetah/loop.c:56:12: warning: Either the condition 'len==0' is redundant or the array 'cmd[200]' is accessed at index -1, which is out of bounds. [negativeIndex]
        cmd[len - 1] = '\0';
           ^
plugins/cheetah/loop.c:50:17: note: Assuming that condition 'len==0' is not redundant
        if (len == 0){
                ^
plugins/cheetah/loop.c:56:12: note: Negative array index
        cmd[len - 1] = '\0';
           ^
plugins/cheetah/loop.c:55:32: warning: Either the condition 'len==0' is redundant or strncpy() argument nr 3 can have invalid value. The value is -1 but the valid values are '0:'. [invalidFunctionArg]
        strncpy(cmd, line, len - 1);
                               ^
plugins/cheetah/loop.c:50:17: note: Assuming that condition 'len==0' is not redundant
        if (len == 0){
                ^
plugins/cheetah/loop.c:55:32: note: Invalid argument
        strncpy(cmd, line, len - 1);
                               ^
plugins/cheetah/loop.c:36:11: style: The scope of the variable 'rcmd' can be reduced. [variableScope]
    char *rcmd;
          ^
plugins/cheetah/loop.c:66:9: style: The scope of the variable 'buf_len' can be reduced. [variableScope]
    int buf_len;
        ^
plugins/cheetah/loop.c:71:9: style: The scope of the variable 'remote_fd' can be reduced. [variableScope]
    int remote_fd;
        ^
plugins/dirlisting/dirlisting.c:615:5: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
    req = NULL;
    ^
plugins/dirlisting/dirlisting.c:357:14: style: Condition 'last<cont_len' is always true [knownConditionTrueFalse]
    if (last < cont_len) {
             ^
plugins/dirlisting/dirlisting.c:307:18: note: Assuming that condition 'cont_len<=0' is not redundant
    if (cont_len <= 0) {
                 ^
plugins/dirlisting/dirlisting.c:357:14: note: Condition 'last<cont_len' is always true
    if (last < cont_len) {
             ^
plugins/dirlisting/dirlisting.c:434:9: style: Redundant initialization for 'tpl'. The initialized value is overwritten before it is read. [redundantInitialization]
    tpl = template;
        ^
plugins/dirlisting/dirlisting.c:424:34: note: tpl is initialized
    struct dirhtml_template *tpl = template;
                                 ^
plugins/dirlisting/dirlisting.c:434:9: note: tpl is overwritten
    tpl = template;
        ^
plugins/dirlisting/dirlisting.c:278:12: style: The scope of the variable 'len' can be reduced. [variableScope]
    int i, len, match;
           ^
plugins/dirlisting/dirlisting.c:278:17: style: The scope of the variable 'match' can be reduced. [variableScope]
    int i, len, match;
                ^
plugins/dirlisting/dirlisting.c:294:9: style: The scope of the variable 'pos' can be reduced. [variableScope]
    int pos, last = 0;          /* 0=search init, 1=search end */
        ^
plugins/dirlisting/dirlisting.c:295:21: style: The scope of the variable 'tpl_idx' can be reduced. [variableScope]
    int n_tags = 0, tpl_idx = 0;
                    ^
plugins/dirlisting/dirlisting.c:741:9: style: The scope of the variable 'len' can be reduced. [variableScope]
    int len;
        ^
plugins/dirlisting/dirlisting.c:742:10: style: The scope of the variable 'tmp' can be reduced. [variableScope]
    char tmp[16];
         ^
plugins/dirlisting/dirlisting.c:374:59: style:inconclusive: Function 'mk_dirhtml_template_list_add' argument 5 names different: declaration 'tag' definition 'tag_id'. [funcArgNamesDifferent]
                                                      int tag_id)
                                                          ^
plugins/dirlisting/dirlisting.h:168:71: note: Function 'mk_dirhtml_template_list_add' argument 5 names different: declaration 'tag' definition 'tag_id'.
                                  char *buf, int len, char **tpl, int tag);
                                                                      ^
plugins/dirlisting/dirlisting.c:374:59: note: Function 'mk_dirhtml_template_list_add' argument 5 names different: declaration 'tag' definition 'tag_id'.
                                                      int tag_id)
                                                          ^
plugins/dirlisting/dirlisting.c:176:22: style: Local variable 'conf' shadows outer variable [shadowVariable]
    struct mk_rconf *conf;
                     ^
plugins/dirlisting/dirlisting.h:156:19: note: Shadowed declaration
struct mk_config *conf;
                  ^
plugins/dirlisting/dirlisting.c:176:22: note: Shadow variable
    struct mk_rconf *conf;
                     ^
plugins/dirlisting/dirlisting.c:295:29: style: Variable 'tpl_idx' is assigned a value that is never used. [unreadVariable]
    int n_tags = 0, tpl_idx = 0;
                            ^
plugins/dirlisting/dirlisting.c:675:20: style: Variable 'cb_ok' is assigned a value that is never used. [unreadVariable]
            cb_ok  = mk_dirhtml_cb_complete;
                   ^
plugins/fastcgi/fastcgi.c:145:5: style:inconclusive: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
    ret = mk_fastcgi_start_processing(cs, sr);
    ^
plugins/fastcgi/fastcgi.c:27:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret;
        ^
plugins/fastcgi/fastcgi.c:28:9: style: The scope of the variable 'sep' can be reduced. [variableScope]
    int sep;
        ^
plugins/fastcgi/fastcgi.c:132:26: style: Unused variable: handler [unusedVariable]
    struct fcgi_handler *handler;
                         ^
plugins/fastcgi/fcgi_handler.c:864:21: warning: Possible null pointer dereference: pio [nullPointer]
    channel->io   = pio->network;
                    ^
plugins/fastcgi/fcgi_handler.c:862:15: note: Assignment 'pio=NULL', assigned value is 0
        pio = NULL;
              ^
plugins/fastcgi/fcgi_handler.c:864:21: note: Null pointer dereference
    channel->io   = pio->network;
                    ^
plugins/fastcgi/fcgi_handler.c:284:9: style: The scope of the variable 'padding' can be reduced. [variableScope]
    int padding = 0;
        ^
plugins/fastcgi/fcgi_handler.c:289:11: style: The scope of the variable 'eof' can be reduced. [variableScope]
    char *eof;
          ^
plugins/fastcgi/fcgi_handler.c:462:28: style: The scope of the variable 'http_header' can be reduced. [variableScope]
    struct mk_http_header *http_header;
                           ^
plugins/fastcgi/fcgi_handler.c:610:9: style: The scope of the variable 'diff' can be reduced. [variableScope]
    int diff;
        ^
plugins/fastcgi/fcgi_handler.c:611:9: style: The scope of the variable 'xlen' can be reduced. [variableScope]
    int xlen;
        ^
plugins/fastcgi/fcgi_handler.c:612:10: style: The scope of the variable 'tmp' can be reduced. [variableScope]
    char tmp[16];
         ^
plugins/fastcgi/fcgi_handler.c:614:11: style: The scope of the variable 'end' can be reduced. [variableScope]
    char *end;
          ^
plugins/fastcgi/fcgi_handler.c:691:11: style: The scope of the variable 'body' can be reduced. [variableScope]
    char *body;
          ^
plugins/fastcgi/fcgi_handler.c:692:12: style: The scope of the variable 'offset' can be reduced. [variableScope]
    size_t offset;
           ^
plugins/fastcgi/fcgi_handler.c:339:15: style: Checking if unsigned expression 'bytes' is less than zero. [unsignedLessThanZero]
    if (bytes <= 0) {
              ^
plugins/fastcgi/fcgi_handler.c:890:9: style: Unused variable: ret [unusedVariable]
    int ret;
        ^
plugins/liana/liana.c:100:17: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
    ssize_t ret = -1;
                ^
plugins/liana/liana.c:143:24: style: Variable 'to_be_sent' is assigned a value that is never used. [unreadVariable]
    ssize_t to_be_sent = -1;
                       ^
plugins/liana/liana.c:144:22: style: Variable 'send_ret' is assigned a value that is never used. [unreadVariable]
    ssize_t send_ret = -1;
                     ^
plugins/logger/logger.c:799:23: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
            int len = snprintf(err_str, 80, "[error %u] (no description)", http_status);
                      ^
plugins/logger/logger.c:59:24: style: The scope of the variable 'entry' can be reduced. [variableScope]
    struct log_target *entry;
                       ^
plugins/logger/logger.c:87:13: style: The scope of the variable 'buffer_used' can be reduced. [variableScope]
    ssize_t buffer_used;
            ^
plugins/logger/logger.c:115:9: style: The scope of the variable 'clk' can be reduced. [variableScope]
    int clk;
        ^
plugins/logger/logger.c:233:9: style: The scope of the variable 'timeout' can be reduced. [variableScope]
    int timeout;
        ^
plugins/logger/logger.c:282:32: style: The scope of the variable 'listener' can be reduced. [variableScope]
    struct mk_config_listener *listener;
                               ^
plugins/logger/logger.c:314:9: style: The scope of the variable 'fd' can be reduced. [variableScope]
    int fd;
        ^
plugins/logger/logger.c:371:30: style: The scope of the variable 'section' can be reduced. [variableScope]
    struct mk_rconf_section *section;
                             ^
plugins/logger/logger.c:494:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i, http_status, ret, tmp;
        ^
plugins/logger/logger.c:494:30: style: The scope of the variable 'tmp' can be reduced. [variableScope]
    int i, http_status, ret, tmp;
                             ^
plugins/logger/logger.c:500:15: style: The scope of the variable 'content_length' can be reduced. [variableScope]
    mk_ptr_t *content_length;
              ^
plugins/logger/logger.c:659:14: style: The scope of the variable 'err_str' can be reduced. [variableScope]
        char err_str[80];
             ^
plugins/mandril/mandril.c:164:28: style: The scope of the variable 'entry' can be reduced. [variableScope]
    struct mk_secure_ip_t *entry;
                           ^
plugins/mandril/mandril.c:206:9: style: The scope of the variable 'n' can be reduced. [variableScope]
    int n;
        ^
plugins/mandril/mandril.c:208:29: style: The scope of the variable 'entry' can be reduced. [variableScope]
    struct mk_secure_url_t *entry;
                            ^
plugins/mandril/mandril.c:264:38: style: The scope of the variable 'entry' can be reduced. [variableScope]
    struct mk_secure_deny_hotlink_t *entry;
                                     ^
plugins/tls/tls.c:157:27: style: The statement 'if (errno!=EAGAIN) errno=EAGAIN' is logically equivalent to 'errno=EAGAIN'. [duplicateConditionalAssign]
                if (errno != EAGAIN)
                          ^
plugins/tls/tls.c:158:27: note: Assignment 'errno=EAGAIN'
                    errno = EAGAIN;
                          ^
plugins/tls/tls.c:157:27: note: Condition 'errno!=EAGAIN' is redundant
                if (errno != EAGAIN)
                          ^
plugins/tls/tls.c:393:10: style: The scope of the variable 'err_buf' can be reduced. [variableScope]
    char err_buf[72];
         ^
plugins/tls/tls.c:587:12: style: The scope of the variable 'avail' can be reduced. [variableScope]
    size_t avail;
           ^
plugins/tls/tls.c:661:13: style: The scope of the variable 'used' can be reduced. [variableScope]
    ssize_t used, remain = file_count, sent = 0;
            ^
plugins/tls/tls.c:727:32: style: The scope of the variable 'listen' can be reduced. [variableScope]
    struct mk_config_listener *listen;
                               ^
test/event_timeout.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
test/lib/acutest/acutest.h:1112:5: style:inconclusive: Found duplicate branches for 'if' and 'else'. [duplicateBranch]
    if(!acutest_no_exec_) {
    ^
test/lib/acutest/acutest.h:1203:7: note: Found duplicate branches for 'if' and 'else'.
    } else {
      ^
test/lib/acutest/acutest.h:1112:5: note: Found duplicate branches for 'if' and 'else'.
    if(!acutest_no_exec_) {
    ^
test/lib/acutest/acutest.h:463:0: information: Skipping configuration 'CLOCK_MONOTONIC;CLOCK_PROCESS_CPUTIME_ID;__APPLE__;__unix;__unix__;unix' since the value of 'CLOCK_MONOTONIC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            acutest_timer_id_ = CLOCK_MONOTONIC;
^
test/lib/acutest/acutest.h:465:0: information: Skipping configuration 'CLOCK_MONOTONIC;CLOCK_PROCESS_CPUTIME_ID;__APPLE__;__unix;__unix__;unix' since the value of 'CLOCK_PROCESS_CPUTIME_ID' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            acutest_timer_id_ = CLOCK_PROCESS_CPUTIME_ID;
^
test/lib/acutest/acutest.h:1743:0: information: Skipping configuration 'RUNNING_ON_VALGRIND' since the value of 'RUNNING_ON_VALGRIND' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
            if(RUNNING_ON_VALGRIND)
^
test/lib/acutest/acutest.h:862:0: information: Skipping configuration 'TEST_FINI' since the value of 'TEST_FINI' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    TEST_FINI
^
test/lib/acutest/acutest.h:849:0: information: Skipping configuration 'TEST_INIT' since the value of 'TEST_INIT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    TEST_INIT
^
test/lib_server.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
test/lib_server.c:166:9: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
    ret = mk_utils_worker_spawn(timeout_worker, timeout_ctx, &timeout_tid);
        ^
test/lib_server.c:159:9: note: ret is assigned
    ret = mk_event_channel_create(complete_evl,
        ^
test/lib_server.c:166:9: note: ret is overwritten
    ret = mk_utils_worker_spawn(timeout_worker, timeout_ctx, &timeout_tid);
        ^
test/lib_server.c:146:14: style: The scope of the variable 'bytes' can be reduced. [variableScope]
    int ret, bytes, fd;
             ^
test/lib_server.c:146:21: style: The scope of the variable 'fd' can be reduced. [variableScope]
    int ret, bytes, fd;
                    ^
mk_core/deps/libevent/evutil.c:2308:0: style: The function 'EVUTIL_ISLOWER_' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil.c:2307:0: style: The function 'EVUTIL_ISPRINT_' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil.c:2304:0: style: The function 'EVUTIL_ISSPACE_' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil.c:2309:0: style: The function 'EVUTIL_ISUPPER_' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil.c:2315:0: style: The function 'EVUTIL_TOUPPER_' is never used. [unusedFunction]

^
deps/rbtree/rbtree.c:170:0: style: The function '__helper_get_sibling' is never used. [unusedFunction]

^
deps/rbtree/rbtree.c:200:0: style: The function '__helper_get_uncle' is never used. [unusedFunction]

^
mk_core/deps/libevent/arc4random.c:454:0: style: The function 'arc4random_stir' is never used. [unusedFunction]

^
mk_core/deps/libevent/arc4random.c:523:0: style: The function 'arc4random_uniform' is never used. [unusedFunction]

^
mk_core/deps/libevent/bufferevent_openssl.c:1450:0: style: The function 'bufferevent_openssl_get_allow_dirty_shutdown' is never used. [unusedFunction]

^
mk_core/deps/libevent/bufferevent_sock.c:659:0: style: The function 'bufferevent_priority_set' is never used. [unusedFunction]

^
mk_core/deps/libevent/bufferevent_openssl.c:1111:0: style: The function 'bufferevent_ssl_renegotiate' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil.c:1706:0: style: The function 'cached_sock_errs_map_HT_FOREACH_FN' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil.c:1706:0: style: The function 'cached_sock_errs_map_HT_NEXT' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil.c:1706:0: style: The function 'cached_sock_errs_map_HT_REMOVE' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil.c:1706:0: style: The function 'cached_sock_errs_map_HT_REPLACE' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil.c:1712:0: style: The function 'cached_sock_errs_map_HT_REP_IS_BAD_' is never used. [unusedFunction]

^
mk_server/mk_http.c:1194:0: style: The function 'cb_stream_page_finished' is never used. [unusedFunction]

^
mk_core/deps/libevent/buffer.c:386:0: style: The function 'evbuffer_clear_flags' is never used. [unusedFunction]

^
mk_core/deps/libevent/buffer.c:410:0: style: The function 'evbuffer_defer_callbacks' is never used. [unusedFunction]

^
mk_core/deps/libevent/buffer.c:3431:0: style: The function 'evbuffer_get_callbacks_' is never used. [unusedFunction]

^
mk_core/deps/libevent/buffer.c:620:0: style: The function 'evbuffer_get_contiguous_space' is never used. [unusedFunction]

^
mk_core/deps/libevent/buffer.c:594:0: style: The function 'evbuffer_lock' is never used. [unusedFunction]

^
mk_core/deps/libevent/buffer_iocp.c:311:0: style: The function 'evbuffer_overlapped_get_fd_' is never used. [unusedFunction]

^
mk_core/deps/libevent/buffer_iocp.c:318:0: style: The function 'evbuffer_overlapped_set_fd_' is never used. [unusedFunction]

^
mk_core/deps/libevent/buffer.c:1461:0: style: The function 'evbuffer_readline' is never used. [unusedFunction]

^
mk_core/deps/libevent/buffer.c:447:0: style: The function 'evbuffer_set_parent_' is never used. [unusedFunction]

^
mk_core/deps/libevent/buffer.c:600:0: style: The function 'evbuffer_unlock' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:4097:0: style: The function 'evdns_base_clear_host_addresses' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:2461:0: style: The function 'evdns_clear_nameservers_and_suspend' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:2389:0: style: The function 'evdns_count_nameservers' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:379:0: style: The function 'evdns_get_global_base' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:3979:0: style: The function 'evdns_init' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:2583:0: style: The function 'evdns_nameserver_add' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:2635:0: style: The function 'evdns_nameserver_ip_add' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:3662:0: style: The function 'evdns_resolv_conf_parse' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:3021:0: style: The function 'evdns_resolve_reverse_ipv6' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:2479:0: style: The function 'evdns_resume' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:3144:0: style: The function 'evdns_search_add' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:3094:0: style: The function 'evdns_search_clear' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:3158:0: style: The function 'evdns_search_ndots_set' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:2146:0: style: The function 'evdns_server_request_get_requesting_addr' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:1883:0: style: The function 'evdns_server_request_set_flags' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:3520:0: style: The function 'evdns_set_option' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:1312:0: style: The function 'evdns_set_random_bytes_fn' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:1307:0: style: The function 'evdns_set_transaction_id_fn' is never used. [unusedFunction]

^
mk_core/deps/libevent/evdns.c:4109:0: style: The function 'evdns_shutdown' is never used. [unusedFunction]

^
mk_core/deps/libevent/log.c:85:0: style: The function 'event_enable_debug_logging' is never used. [unusedFunction]

^
mk_core/deps/libevent/log.c:176:0: style: The function 'event_msgx' is never used. [unusedFunction]

^
mk_core/deps/libevent/log.c:93:0: style: The function 'event_set_fatal_callback' is never used. [unusedFunction]

^
mk_core/deps/libevent/log.c:222:0: style: The function 'event_set_log_callback' is never used. [unusedFunction]

^
mk_core/deps/libevent/log.c:132:0: style: The function 'event_sock_err' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:3528:0: style: The function 'evhttp_accept_socket' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:3594:0: style: The function 'evhttp_bound_socket_get_listener' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:2509:0: style: The function 'evhttp_connection_get_peer' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:2332:0: style: The function 'evhttp_connection_new' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:1274:0: style: The function 'evhttp_connection_set_local_port' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:635:0: style: The function 'evhttp_connection_set_max_body_size' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:626:0: style: The function 'evhttp_connection_set_max_headers_size' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:3600:0: style: The function 'evhttp_del_accept_socket' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:3112:0: style: The function 'evhttp_encode_uri' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:3538:0: style: The function 'evhttp_foreach_bound_socket' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:3274:0: style: The function 'evhttp_parse_query_str' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:3770:0: style: The function 'evhttp_remove_server_alias' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:3736:0: style: The function 'evhttp_remove_virtual_host' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:4071:0: style: The function 'evhttp_request_get_evhttp_uri' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:4038:0: style: The function 'evhttp_request_set_header_cb' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:3655:0: style: The function 'evhttp_start' is never used. [unusedFunction]

^
mk_core/deps/libevent/http.c:4427:0: style: The function 'evhttp_uri_set_flags' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:120:0: style: The function 'evrpc_add_hook' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:93:0: style: The function 'evrpc_free' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:467:0: style: The function 'evrpc_get_reply' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:461:0: style: The function 'evrpc_get_request' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:1029:0: style: The function 'evrpc_hook_add_meta' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:1052:0: style: The function 'evrpc_hook_find_meta' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:1072:0: style: The function 'evrpc_hook_get_connection' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:72:0: style: The function 'evrpc_init' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:579:0: style: The function 'evrpc_pool_add_connection' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:537:0: style: The function 'evrpc_pool_free' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:507:0: style: The function 'evrpc_pool_new' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:612:0: style: The function 'evrpc_pool_remove_connection' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:619:0: style: The function 'evrpc_pool_set_timeout' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:1132:0: style: The function 'evrpc_register_generic' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:403:0: style: The function 'evrpc_request_done' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:1152:0: style: The function 'evrpc_request_get_pool' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:1165:0: style: The function 'evrpc_request_set_cb' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:1158:0: style: The function 'evrpc_request_set_pool' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:778:0: style: The function 'evrpc_resume_request' is never used. [unusedFunction]

^
mk_core/deps/libevent/evrpc.c:1079:0: style: The function 'evrpc_send_request_generic' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:454:0: style: The function 'evtag_consume' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:386:0: style: The function 'evtag_decode_int64' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:245:0: style: The function 'evtag_decode_tag' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:161:0: style: The function 'evtag_encode_int64' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:266:0: style: The function 'evtag_marshal_buffer' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:277:0: style: The function 'evtag_marshal_int' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:288:0: style: The function 'evtag_marshal_int64' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:300:0: style: The function 'evtag_marshal_string' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:307:0: style: The function 'evtag_marshal_timeval' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:420:0: style: The function 'evtag_payload_length' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:396:0: style: The function 'evtag_peek' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:402:0: style: The function 'evtag_peek_length' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:467:0: style: The function 'evtag_unmarshal' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:539:0: style: The function 'evtag_unmarshal_fixed' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:485:0: style: The function 'evtag_unmarshal_int' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:511:0: style: The function 'evtag_unmarshal_int64' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:558:0: style: The function 'evtag_unmarshal_string' is never used. [unusedFunction]

^
mk_core/deps/libevent/event_tagging.c:580:0: style: The function 'evtag_unmarshal_timeval' is never used. [unusedFunction]

^
mk_core/deps/libevent/evthread.c:359:0: style: The function 'evthread_debug_get_real_lock_' is never used. [unusedFunction]

^
mk_core/deps/libevent/evthread.c:312:0: style: The function 'evthread_enable_lock_debuging' is never used. [unusedFunction]

^
mk_core/deps/libevent/evthread_pthread.c:164:0: style: The function 'evthread_use_pthreads' is never used. [unusedFunction]

^
mk_core/deps/libevent/evthread.c:87:0: style: The function 'evthreadimpl_disable_lock_debugging_' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil.c:2658:0: style: The function 'evutil_eventfd_' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil.c:2689:0: style: The function 'evutil_free_globals_' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil.c:2391:0: style: The function 'evutil_getenv_' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil.c:1775:0: style: The function 'evutil_global_setup_locks_' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil.c:403:0: style: The function 'evutil_make_socket_closeonexec' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil_rand.c:196:0: style: The function 'evutil_secure_rng_add_bytes' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil_rand.c:138:0: style: The function 'evutil_secure_rng_global_setup_locks_' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil_rand.c:158:0: style: The function 'evutil_secure_rng_set_urandom_device_file' is never used. [unusedFunction]

^
mk_core/deps/libevent/evutil.c:2432:0: style: The function 'evutil_weakrand_range_' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/aesni.c:95:0: style: The function 'mbedtls_aesni_crypt_ecb' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/aesni.c:252:0: style: The function 'mbedtls_aesni_inverse_key' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/aesni.c:447:0: style: The function 'mbedtls_aesni_setkey_enc' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/arc4.c:162:0: style: The function 'mbedtls_arc4_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/asn1write.c:317:0: style: The function 'mbedtls_asn1_write_octet_string' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/base64.c:251:0: style: The function 'mbedtls_base64_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/blowfish.c:232:0: style: The function 'mbedtls_blowfish_crypt_ecb' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/blowfish.c:163:0: style: The function 'mbedtls_blowfish_free' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/blowfish.c:158:0: style: The function 'mbedtls_blowfish_init' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/blowfish.c:174:0: style: The function 'mbedtls_blowfish_setkey' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/camellia.c:894:0: style: The function 'mbedtls_camellia_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ccm.c:400:0: style: The function 'mbedtls_ccm_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/cipher.c:769:0: style: The function 'mbedtls_cipher_check_tag' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/cmac.c:371:0: style: The function 'mbedtls_cipher_cmac_reset' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/cipher.c:102:0: style: The function 'mbedtls_cipher_info_from_string' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/cipher.c:70:0: style: The function 'mbedtls_cipher_list' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/cipher.c:254:0: style: The function 'mbedtls_cipher_update_ad' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/cipher.c:754:0: style: The function 'mbedtls_cipher_write_tag' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/cmac.c:918:0: style: The function 'mbedtls_cmac_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ctr_drbg.c:540:0: style: The function 'mbedtls_ctr_drbg_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ctr_drbg.c:132:0: style: The function 'mbedtls_ctr_drbg_set_entropy_len' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ctr_drbg.c:137:0: style: The function 'mbedtls_ctr_drbg_set_reseed_interval' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ctr_drbg.c:445:0: style: The function 'mbedtls_ctr_drbg_update_seed_file' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/debug.c:141:0: style: The function 'mbedtls_debug_print_buf' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/debug.c:341:0: style: The function 'mbedtls_debug_print_crt' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/debug.c:81:0: style: The function 'mbedtls_debug_print_msg' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/debug.c:118:0: style: The function 'mbedtls_debug_print_ret' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/debug.c:55:0: style: The function 'mbedtls_debug_set_threshold' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/des.c:357:0: style: The function 'mbedtls_des_key_check_key_parity' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/des.c:412:0: style: The function 'mbedtls_des_key_check_weak' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/des.c:346:0: style: The function 'mbedtls_des_key_set_parity' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/des.c:870:0: style: The function 'mbedtls_des_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/dhm.c:236:0: style: The function 'mbedtls_dhm_make_public' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/dhm.c:129:0: style: The function 'mbedtls_dhm_read_params' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/dhm.c:595:0: style: The function 'mbedtls_dhm_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ecdh.c:96:0: style: The function 'mbedtls_ecdh_free' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ecdh.c:88:0: style: The function 'mbedtls_ecdh_init' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ecdh.c:118:0: style: The function 'mbedtls_ecdh_make_params' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ecdsa.c:408:0: style: The function 'mbedtls_ecdsa_genkey' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ecdsa.c:344:0: style: The function 'mbedtls_ecdsa_write_signature_det' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ecjpake.c:968:0: style: The function 'mbedtls_ecjpake_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ecp.c:239:0: style: The function 'mbedtls_ecp_curve_info_from_name' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ecp.c:1908:0: style: The function 'mbedtls_ecp_gen_key' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ecp.c:425:0: style: The function 'mbedtls_ecp_point_read_string' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ecp.c:1966:0: style: The function 'mbedtls_ecp_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/entropy.c:578:0: style: The function 'mbedtls_entropy_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/entropy.c:428:0: style: The function 'mbedtls_entropy_update_seed_file' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/gcm.c:737:0: style: The function 'mbedtls_gcm_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/havege.c:217:0: style: The function 'mbedtls_havege_random' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/hmac_drbg.c:408:0: style: The function 'mbedtls_hmac_drbg_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/hmac_drbg.c:232:0: style: The function 'mbedtls_hmac_drbg_set_entropy_len' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/hmac_drbg.c:240:0: style: The function 'mbedtls_hmac_drbg_set_reseed_interval' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/hmac_drbg.c:370:0: style: The function 'mbedtls_hmac_drbg_update_seed_file' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/md2.c:255:0: style: The function 'mbedtls_md2_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/md4.c:351:0: style: The function 'mbedtls_md4_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/md5.c:372:0: style: The function 'mbedtls_md5_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/md.c:203:0: style: The function 'mbedtls_md_clone' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/md.c:290:0: style: The function 'mbedtls_md_file' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/md.c:463:0: style: The function 'mbedtls_md_get_name' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/md.c:413:0: style: The function 'mbedtls_md_hmac' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/md.c:99:0: style: The function 'mbedtls_md_info_from_string' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/md.c:219:0: style: The function 'mbedtls_md_init_ctx' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/md.c:94:0: style: The function 'mbedtls_md_list' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/memory_buffer_alloc.c:541:0: style: The function 'mbedtls_memory_buffer_alloc_cur_get' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/memory_buffer_alloc.c:529:0: style: The function 'mbedtls_memory_buffer_alloc_max_get' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/memory_buffer_alloc.c:535:0: style: The function 'mbedtls_memory_buffer_alloc_max_reset' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/memory_buffer_alloc.c:648:0: style: The function 'mbedtls_memory_buffer_alloc_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/memory_buffer_alloc.c:509:0: style: The function 'mbedtls_memory_buffer_alloc_status' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/memory_buffer_alloc.c:503:0: style: The function 'mbedtls_memory_buffer_alloc_verify' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/memory_buffer_alloc.c:498:0: style: The function 'mbedtls_memory_buffer_set_verify' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/bignum.c:600:0: style: The function 'mbedtls_mpi_read_file' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/bignum.c:228:0: style: The function 'mbedtls_mpi_safe_cond_assign' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/bignum.c:2287:0: style: The function 'mbedtls_mpi_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/bignum.c:144:0: style: The function 'mbedtls_mpi_shrink' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/bignum.c:633:0: style: The function 'mbedtls_mpi_write_file' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/net_sockets.c:296:0: style: The function 'mbedtls_net_accept' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/net_sockets.c:184:0: style: The function 'mbedtls_net_bind' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/net_sockets.c:136:0: style: The function 'mbedtls_net_connect' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/net_sockets.c:575:0: style: The function 'mbedtls_net_free' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/net_sockets.c:128:0: style: The function 'mbedtls_net_init' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/net_sockets.c:495:0: style: The function 'mbedtls_net_recv_timeout' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/net_sockets.c:414:0: style: The function 'mbedtls_net_set_block' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/net_sockets.c:425:0: style: The function 'mbedtls_net_set_nonblock' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/net_sockets.c:439:0: style: The function 'mbedtls_net_usleep' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/oid.c:670:0: style: The function 'mbedtls_oid_get_numeric_string' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/padlock.c:49:0: style: The function 'mbedtls_padlock_has_support' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/padlock.c:120:0: style: The function 'mbedtls_padlock_xcryptcbc' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/padlock.c:80:0: style: The function 'mbedtls_padlock_xcryptecb' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/pk.c:312:0: style: The function 'mbedtls_pk_check_pair' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/pk.c:276:0: style: The function 'mbedtls_pk_decrypt' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/pk.c:294:0: style: The function 'mbedtls_pk_encrypt' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/pkparse.c:146:0: style: The function 'mbedtls_pk_parse_public_keyfile' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/pk.c:122:0: style: The function 'mbedtls_pk_setup_rsa_alt' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/pkwrite.c:400:0: style: The function 'mbedtls_pk_write_key_pem' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/pkwrite.c:378:0: style: The function 'mbedtls_pk_write_pubkey_pem' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/pkcs11.c:129:0: style: The function 'mbedtls_pkcs11_decrypt' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/pkcs11.c:44:0: style: The function 'mbedtls_pkcs11_init' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/pkcs11.c:98:0: style: The function 'mbedtls_pkcs11_priv_key_bind' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/pkcs11.c:123:0: style: The function 'mbedtls_pkcs11_priv_key_free' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/pkcs11.c:167:0: style: The function 'mbedtls_pkcs11_sign' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/pkcs5.c:291:0: style: The function 'mbedtls_pkcs5_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/platform.c:186:0: style: The function 'mbedtls_platform_set_exit' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/platform.c:296:0: style: The function 'mbedtls_platform_set_nv_seed' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/platform.c:211:0: style: The function 'mbedtls_platform_set_time' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ripemd160.c:431:0: style: The function 'mbedtls_ripemd160_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/rsa.c:1478:0: style: The function 'mbedtls_rsa_copy' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/rsa.c:94:0: style: The function 'mbedtls_rsa_gen_key' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/rsa.c:1611:0: style: The function 'mbedtls_rsa_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/sha1.c:392:0: style: The function 'mbedtls_sha1_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/sha256.c:392:0: style: The function 'mbedtls_sha256_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/sha512.c:448:0: style: The function 'mbedtls_sha512_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_cache.c:301:0: style: The function 'mbedtls_ssl_cache_free' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_cache.c:294:0: style: The function 'mbedtls_ssl_cache_set_max_entries' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_cache.c:286:0: style: The function 'mbedtls_ssl_cache_set_timeout' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:6068:0: style: The function 'mbedtls_ssl_conf_arc4_support' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:5695:0: style: The function 'mbedtls_ssl_conf_ciphersuites' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:5704:0: style: The function 'mbedtls_ssl_conf_ciphersuites_for_version' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:5623:0: style: The function 'mbedtls_ssl_conf_dbg' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:6054:0: style: The function 'mbedtls_ssl_conf_encrypt_then_mac' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:6103:0: style: The function 'mbedtls_ssl_conf_legacy_renegotiation' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:6034:0: style: The function 'mbedtls_ssl_conf_max_version' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:6040:0: style: The function 'mbedtls_ssl_conf_min_version' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:5643:0: style: The function 'mbedtls_ssl_conf_read_timeout' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:7334:0: style: The function 'mbedtls_ssl_config_free' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_cookie.c:206:0: style: The function 'mbedtls_ssl_cookie_check' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_cookie.c:96:0: style: The function 'mbedtls_ssl_cookie_free' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_cookie.c:78:0: style: The function 'mbedtls_ssl_cookie_init' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_cookie.c:91:0: style: The function 'mbedtls_ssl_cookie_set_timeout' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_cookie.c:107:0: style: The function 'mbedtls_ssl_cookie_setup' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_cookie.c:160:0: style: The function 'mbedtls_ssl_cookie_write' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:6160:0: style: The function 'mbedtls_ssl_get_bytes_avail' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:6176:0: style: The function 'mbedtls_ssl_get_ciphersuite' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_ciphersuites.c:1786:0: style: The function 'mbedtls_ssl_get_ciphersuite_id' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:6222:0: style: The function 'mbedtls_ssl_get_record_expansion' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:6165:0: style: The function 'mbedtls_ssl_get_verify_result' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:6184:0: style: The function 'mbedtls_ssl_get_version' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_cli.c:3272:0: style: The function 'mbedtls_ssl_handshake_client_step' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_srv.c:3799:0: style: The function 'mbedtls_ssl_handshake_server_step' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:7399:0: style: The function 'mbedtls_ssl_md_alg_from_hash' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:4633:0: style: The function 'mbedtls_ssl_reset_checksum' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:7645:0: style: The function 'mbedtls_ssl_set_calc_verify_md' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:5648:0: style: The function 'mbedtls_ssl_set_timer_cb' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_ticket.c:477:0: style: The function 'mbedtls_ssl_ticket_free' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_ticket.c:50:0: style: The function 'mbedtls_ssl_ticket_init' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_ticket.c:383:0: style: The function 'mbedtls_ssl_ticket_parse' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_ticket.c:122:0: style: The function 'mbedtls_ssl_ticket_setup' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_ticket.c:285:0: style: The function 'mbedtls_ssl_ticket_write' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/threading.c:121:0: style: The function 'mbedtls_threading_free_alt' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/threading.c:104:0: style: The function 'mbedtls_threading_set_alt' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/version_features.c:628:0: style: The function 'mbedtls_version_check_feature' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/version.c:33:0: style: The function 'mbedtls_version_get_number' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/version.c:38:0: style: The function 'mbedtls_version_get_string' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/version.c:44:0: style: The function 'mbedtls_version_get_string_full' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509_crl.c:581:0: style: The function 'mbedtls_x509_crl_info' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509_crl.c:555:0: style: The function 'mbedtls_x509_crl_parse_file' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509_crt.c:1102:0: style: The function 'mbedtls_x509_crt_parse_path' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509_crt.c:1517:0: style: The function 'mbedtls_x509_crt_verify_info' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509_csr.c:340:0: style: The function 'mbedtls_x509_csr_info' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509_csr.c:317:0: style: The function 'mbedtls_x509_csr_parse_file' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509.c:119:0: style: The function 'mbedtls_x509_get_alg_null' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509.c:1036:0: style: The function 'mbedtls_x509_self_test' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_crt.c:60:0: style: The function 'mbedtls_x509write_crt_free' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_crt.c:52:0: style: The function 'mbedtls_x509write_crt_init' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_crt.c:434:0: style: The function 'mbedtls_x509write_crt_pem' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_crt.c:192:0: style: The function 'mbedtls_x509write_crt_set_authority_key_identifier' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_crt.c:138:0: style: The function 'mbedtls_x509write_crt_set_basic_constraints' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_crt.c:86:0: style: The function 'mbedtls_x509write_crt_set_issuer_key' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_crt.c:97:0: style: The function 'mbedtls_x509write_crt_set_issuer_name' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_crt.c:219:0: style: The function 'mbedtls_x509write_crt_set_key_usage' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_crt.c:76:0: style: The function 'mbedtls_x509write_crt_set_md_alg' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_crt.c:245:0: style: The function 'mbedtls_x509write_crt_set_ns_cert_type' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_crt.c:103:0: style: The function 'mbedtls_x509write_crt_set_serial' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_crt.c:81:0: style: The function 'mbedtls_x509write_crt_set_subject_key' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_crt.c:170:0: style: The function 'mbedtls_x509write_crt_set_subject_key_identifier' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_crt.c:91:0: style: The function 'mbedtls_x509write_crt_set_subject_name' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_crt.c:113:0: style: The function 'mbedtls_x509write_crt_set_validity' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_crt.c:71:0: style: The function 'mbedtls_x509write_crt_set_version' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_csr.c:56:0: style: The function 'mbedtls_x509write_csr_free' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_csr.c:51:0: style: The function 'mbedtls_x509write_csr_init' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_csr.c:234:0: style: The function 'mbedtls_x509write_csr_pem' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_csr.c:69:0: style: The function 'mbedtls_x509write_csr_set_key' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_csr.c:88:0: style: The function 'mbedtls_x509write_csr_set_key_usage' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_csr.c:64:0: style: The function 'mbedtls_x509write_csr_set_md_alg' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_csr.c:108:0: style: The function 'mbedtls_x509write_csr_set_ns_cert_type' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/x509write_csr.c:74:0: style: The function 'mbedtls_x509write_csr_set_subject_name' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/xtea.c:240:0: style: The function 'mbedtls_xtea_self_test' is never used. [unusedFunction]

^
mk_server/mk_stream.c:41:0: style: The function 'mk_channel_release' is never used. [unusedFunction]

^
plugins/cheetah/cmd.c:134:0: style: The function 'mk_cheetah_cmd_plugins_print_core' is never used. [unusedFunction]

^
plugins/cheetah/cmd.c:164:0: style: The function 'mk_cheetah_cmd_plugins_print_network' is never used. [unusedFunction]

^
plugins/cheetah/cutils.c:29:0: style: The function 'mk_cheetah_print_worker_memory_usage' is never used. [unusedFunction]

^
mk_core/mk_event.c:180:0: style: The function 'mk_event_channel_destroy' is never used. [unusedFunction]

^
mk_core/mk_event.c:106:0: style: The function 'mk_event_inject' is never used. [unusedFunction]

^
mk_core/mk_event.c:153:0: style: The function 'mk_event_timeout_disable' is never used. [unusedFunction]

^
mk_core/mk_event.c:202:0: style: The function 'mk_event_wait_2' is never used. [unusedFunction]

^
mk_server/mk_fifo.c:212:0: style: The function 'mk_fifo_queue_id_destroy' is never used. [unusedFunction]

^
mk_server/mk_http.c:1398:0: style: The function 'mk_http_session_lookup' is never used. [unusedFunction]

^
mk_server/mk_lib.c:789:0: style: The function 'mk_main' is never used. [unusedFunction]

^
mk_server/mk_net.c:176:0: style: The function 'mk_net_conn_write' is never used. [unusedFunction]

^
mk_server/mk_plugin.c:707:0: style: The function 'mk_plugin_event_bad_return' is never used. [unusedFunction]

^
mk_core/mk_memory.c:29:0: style: The function 'mk_ptr_create' is never used. [unusedFunction]

^
mk_core/mk_rconf.c:131:0: style: The function 'mk_rconf_meta_get' is never used. [unusedFunction]

^
mk_server/mk_scheduler.c:514:0: style: The function 'mk_sched_set_request_list' is never used. [unusedFunction]

^
mk_server/mk_scheduler.c:637:0: style: The function 'mk_sched_threads_destroy_all' is never used. [unusedFunction]

^
mk_server/mk_server.c:133:0: style: The function 'mk_server_listen_free' is never used. [unusedFunction]

^
mk_server/mk_stream.c:67:0: style: The function 'mk_stream_size' is never used. [unusedFunction]

^
mk_core/mk_string.c:310:0: style: The function 'mk_string_casestr' is never used. [unusedFunction]

^
mk_core/mk_string.c:284:0: style: The function 'mk_string_char_search_r' is never used. [unusedFunction]

^
mk_core/mk_thread.c:336:0: style: The function 'mk_thread_add_channel' is never used. [unusedFunction]

^
mk_core/mk_thread_channel.c:59:0: style: The function 'mk_thread_channel_create' is never used. [unusedFunction]

^
mk_core/mk_thread_channel.c:85:0: style: The function 'mk_thread_channel_free' is never used. [unusedFunction]

^
mk_core/mk_thread_channel.c:129:0: style: The function 'mk_thread_channel_recv' is never used. [unusedFunction]

^
mk_core/mk_thread_channel.c:103:0: style: The function 'mk_thread_channel_send' is never used. [unusedFunction]

^
mk_core/mk_thread.c:123:0: style: The function 'mk_thread_close' is never used. [unusedFunction]

^
mk_core/mk_thread.c:148:0: style: The function 'mk_thread_create' is never used. [unusedFunction]

^
mk_core/mk_thread.c:327:0: style: The function 'mk_thread_running' is never used. [unusedFunction]

^
mk_core/mk_thread.c:225:0: style: The function 'mk_thread_status' is never used. [unusedFunction]

^
mk_core/mk_utils.c:167:0: style: The function 'mk_utils_print_errno' is never used. [unusedFunction]

^
mk_core/mk_utils.c:100:0: style: The function 'mk_utils_trace' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:550:0: style: The function 'pthread_attr_destroy' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:562:0: style: The function 'pthread_attr_getdetachstate' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:573:0: style: The function 'pthread_attr_getinheritsched' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:584:0: style: The function 'pthread_attr_getscope' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:590:0: style: The function 'pthread_attr_getstackaddr' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:602:0: style: The function 'pthread_attr_getstacksize' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:568:0: style: The function 'pthread_attr_setinheritsched' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:579:0: style: The function 'pthread_attr_setscope' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:596:0: style: The function 'pthread_attr_setstackaddr' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:608:0: style: The function 'pthread_attr_setstacksize' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:866:0: style: The function 'pthread_barrier_destroy' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:883:0: style: The function 'pthread_barrier_init' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:897:0: style: The function 'pthread_barrier_wait' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:946:0: style: The function 'pthread_barrierattr_destroy' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:960:0: style: The function 'pthread_barrierattr_getpshared' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:940:0: style: The function 'pthread_barrierattr_init' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:954:0: style: The function 'pthread_barrierattr_setpshared' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:1215:0: style: The function 'pthread_condattr_destroy' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:1227:0: style: The function 'pthread_condattr_getpshared' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:1221:0: style: The function 'pthread_condattr_init' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:1233:0: style: The function 'pthread_condattr_setpshared' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:736:0: style: The function 'pthread_detach' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:199:0: style: The function 'pthread_equal' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:431:0: style: The function 'pthread_get_concurrency' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:1071:0: style: The function 'pthread_key_delete' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:828:0: style: The function 'pthread_mutex_timedlock' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:758:0: style: The function 'pthread_mutexattr_destroy' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:814:0: style: The function 'pthread_mutexattr_getprioceiling' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:797:0: style: The function 'pthread_mutexattr_getprotocol' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:780:0: style: The function 'pthread_mutexattr_getpshared' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:764:0: style: The function 'pthread_mutexattr_gettype' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:820:0: style: The function 'pthread_mutexattr_setprioceiling' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:804:0: style: The function 'pthread_mutexattr_setprotocol' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:787:0: style: The function 'pthread_mutexattr_setpshared' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:212:0: style: The function 'pthread_rwlock_destroy' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:204:0: style: The function 'pthread_rwlock_init' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:389:0: style: The function 'pthread_rwlock_timedrdlock' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:410:0: style: The function 'pthread_rwlock_timedwrlock' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:1239:0: style: The function 'pthread_rwlockattr_destroy' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:1251:0: style: The function 'pthread_rwlockattr_getpshared' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:1245:0: style: The function 'pthread_rwlockattr_init' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:1257:0: style: The function 'pthread_rwlockattr_setpshared' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:437:0: style: The function 'pthread_set_concurrency' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:1129:0: style: The function 'pthread_spin_destroy' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:1121:0: style: The function 'pthread_spin_init' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:1136:0: style: The function 'pthread_spin_lock' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:1153:0: style: The function 'pthread_spin_trylock' is never used. [unusedFunction]

^
mk_core/external/winpthreads.c:1158:0: style: The function 'pthread_spin_unlock' is never used. [unusedFunction]

^
deps/rbtree/rbtree.c:101:0: style: The function 'rb_tree_destroy' is never used. [unusedFunction]

^
deps/rbtree/rbtree.c:112:0: style: The function 'rb_tree_empty' is never used. [unusedFunction]

^
deps/rbtree/rbtree.c:125:0: style: The function 'rb_tree_find' is never used. [unusedFunction]

^
deps/rbtree/rbtree.c:421:0: style: The function 'rb_tree_find_or_insert' is never used. [unusedFunction]

^
deps/rbtree/rbtree.c:680:0: style: The function 'rb_tree_remove' is never used. [unusedFunction]

^
deps/regex/re.c:53:0: style: The function 're_match' is never used. [unusedFunction]

^
deps/regex/re.c:238:0: style: The function 're_print' is never used. [unusedFunction]

^
mk_core/mk_string.c:95:0: style: The function 'strndup' is never used. [unusedFunction]

^
deps/mbedtls-2.4.2/library/ssl_tls.c:367:0: style: The function 'tls_prf_generic' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

